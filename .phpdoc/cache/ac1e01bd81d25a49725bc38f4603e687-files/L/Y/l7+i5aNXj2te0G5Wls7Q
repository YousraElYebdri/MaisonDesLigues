1717368422
ac1e01bd81d25a49725bc38f4603e687-phpdoc%3Af939af122cb243fe7c47b79d7b84aa2d-84bd256bcaf9b47326bf919bbf75d9ce
s:84316:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"84bd256bcaf9b47326bf919bbf75d9ce";s:39:" phpDocumentor\Reflection\Php\File name";s:36:"9770bc03b7b456ed66c3e68c4c629eab.php";s:39:" phpDocumentor\Reflection\Php\File path";s:58:"var/cache/dev/twig/97/9770bc03b7b456ed66c3e68c4c629eab.php";s:41:" phpDocumentor\Reflection\Php\File source";s:38576:"<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\CoreExtension;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* accueil/Accueil.html.twig */
class __TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb extends Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->blocks = [
            'content' => [$this, 'block_content'],
        ];
    }

    protected function doGetParent(array $context)
    {
        // line 1
        return "base.html.twig";
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        $__internal_5a27a8ba21ca79b61932376b2fa922d2 = $this->extensions["Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension"];
        $__internal_5a27a8ba21ca79b61932376b2fa922d2->enter($__internal_5a27a8ba21ca79b61932376b2fa922d2_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "accueil/Accueil.html.twig"));

        $__internal_6f47bbe9983af81f1e7450e9a3e3768f = $this->extensions["Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension"];
        $__internal_6f47bbe9983af81f1e7450e9a3e3768f->enter($__internal_6f47bbe9983af81f1e7450e9a3e3768f_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "accueil/Accueil.html.twig"));

        $this->parent = $this->loadTemplate("base.html.twig", "accueil/Accueil.html.twig", 1);
        yield from $this->parent->unwrap()->yield($context, array_merge($this->blocks, $blocks));
        
        $__internal_5a27a8ba21ca79b61932376b2fa922d2->leave($__internal_5a27a8ba21ca79b61932376b2fa922d2_prof);

        
        $__internal_6f47bbe9983af81f1e7450e9a3e3768f->leave($__internal_6f47bbe9983af81f1e7450e9a3e3768f_prof);

    }

    // line 2
    public function block_content($context, array $blocks = [])
    {
        $macros = $this->macros;
        $__internal_5a27a8ba21ca79b61932376b2fa922d2 = $this->extensions["Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension"];
        $__internal_5a27a8ba21ca79b61932376b2fa922d2->enter($__internal_5a27a8ba21ca79b61932376b2fa922d2_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "block", "content"));

        $__internal_6f47bbe9983af81f1e7450e9a3e3768f = $this->extensions["Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension"];
        $__internal_6f47bbe9983af81f1e7450e9a3e3768f->enter($__internal_6f47bbe9983af81f1e7450e9a3e3768f_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "block", "content"));

        // line 3
        yield "
    <div class=\"modal fade\" id=\"licenceModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"licenceModalLabel\" aria-hidden=\"true\">
        <div class=\"modal-dialog\" role=\"document\">
            <div class=\"modal-content\">
                <div class=\"modal-header\">
                    <h5 class=\"modal-title\" id=\"licenceModalLabel\">Erreur</h5>
                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">
                        <span aria-hidden=\"true\">&times;</span>
                    </button>
                </div>
                <div class=\"modal-body\">
                    Le numéro de licence saisi ne correspond pas
                </div>
                <div class=\"modal-footer\">
                    <button type=\"button\" class=\"btn btn-secondary text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\" data-dismiss=\"modal\">Fermer</button>
                </div>
            </div>
        </div>
    </div>

    <div class=\"modal fade\" id=\"licenceModalCompte\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"licenceModalLabel\" aria-hidden=\"true\">
        <div class=\"modal-dialog\" role=\"document\">
            <div class=\"modal-content\">
                <div class=\"modal-header\">
                    <h5 class=\"modal-title\" id=\"licenceModalLabel\">Succes</h5>
                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">
                        <span aria-hidden=\"true\">&times;</span>
                    </button>
                </div>
                <div class=\"modal-body\">
                    Votre compte a été confirmé
                </div>
                <div class=\"modal-footer\">
                    <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Fermer</button>
                </div>
            </div>
        </div>
    </div>

    <div class=\"modal fade\" id=\"licenceModalCompteSuppr\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"licenceModalLabel\" aria-hidden=\"true\">
        <div class=\"modal-dialog\" role=\"document\">
            <div class=\"modal-content\">
                <div class=\"modal-header\">
                    <h5 class=\"modal-title\" id=\"licenceModalLabel\">Succes</h5>
                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">
                        <span aria-hidden=\"true\">&times;</span>
                    </button>
                </div>
                <div class=\"modal-body\">
                    Votre demande a bien été annulée
                </div>
                <div class=\"modal-footer\">
                    <button type=\"button\" class=\"btn btn-secondary text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\" data-dismiss=\"modal\">Fermer</button>
                </div>
            </div>
        </div>
    </div>

    <div class=\"modal fade\" id=\"licenceModalCompteMdpInvalide\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"licenceModalLabel\" aria-hidden=\"true\">
        <div class=\"modal-dialog\" role=\"document\">
            <div class=\"modal-content\">
                <div class=\"modal-header\">
                    <h5 class=\"modal-title\" id=\"licenceModalLabel\">Succes</h5>
                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">
                        <span aria-hidden=\"true\">&times;</span>
                    </button>
                </div>
                <div class=\"modal-body\">
                    Le mot de passe est invalide
                </div>
                <div class=\"modal-footer\">
                    <button type=\"button\" class=\"btn btn-secondary \" data-dismiss=\"modal\">Fermer</button>
                </div>
            </div>
        </div>
    </div>

    ";
        // line 80
        if (CoreExtension::getAttribute($this->env, $this->source, (isset($context["app"]) || array_key_exists("app", $context) ? $context["app"] : (function () { throw new RuntimeError('Variable "app" does not exist.', 80, $this->source); })()), "flashes", ["danger"], "method", false, false, false, 80)) {
            // line 81
            yield "        <script>
            \$(document).ready(function(){
                \$('#licenceModal').modal('show');
            });
        </script>
    ";
        }
        // line 87
        yield "
    ";
        // line 88
        if (CoreExtension::getAttribute($this->env, $this->source, (isset($context["app"]) || array_key_exists("app", $context) ? $context["app"] : (function () { throw new RuntimeError('Variable "app" does not exist.', 88, $this->source); })()), "flashes", ["success"], "method", false, false, false, 88)) {
            // line 89
            yield "        <script>
            \$(document).ready(function(){
                \$('#licenceModalCompte').modal('show');
            });
        </script>
    ";
        }
        // line 95
        yield "
    ";
        // line 96
        if (CoreExtension::getAttribute($this->env, $this->source, (isset($context["app"]) || array_key_exists("app", $context) ? $context["app"] : (function () { throw new RuntimeError('Variable "app" does not exist.', 96, $this->source); })()), "flashes", ["successSuprr"], "method", false, false, false, 96)) {
            // line 97
            yield "        <script>
            \$(document).ready(function(){
                \$('#licenceModalCompteSuppr').modal('show');
            });
        </script>
    ";
        }
        // line 103
        yield "
    ";
        // line 104
        if (CoreExtension::getAttribute($this->env, $this->source, (isset($context["app"]) || array_key_exists("app", $context) ? $context["app"] : (function () { throw new RuntimeError('Variable "app" does not exist.', 104, $this->source); })()), "flashes", ["erreurMdp"], "method", false, false, false, 104)) {
            // line 105
            yield "        <script>
            \$(document).ready(function(){
                \$('#licenceModalCompteMdpInvalide').modal('show');
            });
        </script>
    ";
        }
        // line 111
        yield "

    <div class=\"flex flex-col justify-center item-center w-[70%]\">    
        <div class=\"p-6 \">
            <h2 class=\"text-xl text-center font-bold mb-4 font-['PlayPretend']\">Dates du Congrès</h2>
            <h2 class=\"text-sm text-center\">Le congrès se déroulera du 20 au 23 Octobre 2024.</h2>
        </div>

        <!-- Bloc pour les ateliers proposés -->
       <div class=\"p-6 bg-white\">
    <h2 class=\"text-xl text-center font-bold mb-4\">Ateliers Proposés</h2>
    <div id=\"ateliersContainer\" class=\"ateliers-container grid grid-cols-1 sm:grid-cols-2  gap-4\">
        ";
        // line 123
        $context["displayedCount"] = 0;
        // line 124
        yield "        ";
        $context['_parent'] = $context;
        $context['_seq'] = CoreExtension::ensureTraversable((isset($context["ateliers"]) || array_key_exists("ateliers", $context) ? $context["ateliers"] : (function () { throw new RuntimeError('Variable "ateliers" does not exist.', 124, $this->source); })()));
        foreach ($context['_seq'] as $context["_key"] => $context["atelier"]) {
            // line 125
            yield "            ";
            if (((isset($context["displayedCount"]) || array_key_exists("displayedCount", $context) ? $context["displayedCount"] : (function () { throw new RuntimeError('Variable "displayedCount" does not exist.', 125, $this->source); })()) < 2)) {
                // line 126
                yield "                <div class=\"atelier-wrapper\">
                    <div class=\"atelier bg-stone-400 hover:bg-gray-300 transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-100 p-4 mb-4 cursor-pointer\">
                        <h3 class=\"text-base font-semibold decoration-neutral-200\">";
                // line 128
                yield Twig\Extension\EscaperExtension::escape($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["atelier"], "libelle", [], "any", false, false, false, 128), "html", null, true);
                yield "</h3>
                        <ul>
                            ";
                // line 130
                $context['_parent'] = $context;
                $context['_seq'] = CoreExtension::ensureTraversable(CoreExtension::getAttribute($this->env, $this->source, $context["atelier"], "themes", [], "any", false, false, false, 130));
                foreach ($context['_seq'] as $context["_key"] => $context["theme"]) {
                    // line 131
                    yield "                                <li class=\"text-sm\">";
                    yield Twig\Extension\EscaperExtension::escape($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["theme"], "libelle", [], "any", false, false, false, 131), "html", null, true);
                    yield "</li>
                            ";
                }
                $_parent = $context['_parent'];
                unset($context['_seq'], $context['_iterated'], $context['_key'], $context['theme'], $context['_parent'], $context['loop']);
                $context = array_intersect_key($context, $_parent) + $_parent;
                // line 133
                yield "                        </ul>
                    </div>
                </div>
                ";
                // line 136
                $context["displayedCount"] = ((isset($context["displayedCount"]) || array_key_exists("displayedCount", $context) ? $context["displayedCount"] : (function () { throw new RuntimeError('Variable "displayedCount" does not exist.', 136, $this->source); })()) + 1);
                // line 137
                yield "            ";
            } else {
                // line 138
                yield "                <div class=\"atelier-wrapper hidden\">
                    <div class=\"atelier bg-stone-400 hover:bg-gray-300 transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-100 p-4 mb-4 cursor-pointer\">
                        <h3 class=\"text-base font-semibold decoration-neutral-200\">";
                // line 140
                yield Twig\Extension\EscaperExtension::escape($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["atelier"], "libelle", [], "any", false, false, false, 140), "html", null, true);
                yield "</h3>
                        <ul>
                            ";
                // line 142
                $context['_parent'] = $context;
                $context['_seq'] = CoreExtension::ensureTraversable(CoreExtension::getAttribute($this->env, $this->source, $context["atelier"], "themes", [], "any", false, false, false, 142));
                foreach ($context['_seq'] as $context["_key"] => $context["theme"]) {
                    // line 143
                    yield "                                <li class=\"text-sm\">";
                    yield Twig\Extension\EscaperExtension::escape($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["theme"], "libelle", [], "any", false, false, false, 143), "html", null, true);
                    yield "</li>
                            ";
                }
                $_parent = $context['_parent'];
                unset($context['_seq'], $context['_iterated'], $context['_key'], $context['theme'], $context['_parent'], $context['loop']);
                $context = array_intersect_key($context, $_parent) + $_parent;
                // line 145
                yield "                        </ul>
                    </div>
                </div>
            ";
            }
            // line 149
            yield "        ";
        }
        $_parent = $context['_parent'];
        unset($context['_seq'], $context['_iterated'], $context['_key'], $context['atelier'], $context['_parent'], $context['loop']);
        $context = array_intersect_key($context, $_parent) + $_parent;
        // line 150
        yield "    </div>
    <button id=\"showMoreButton\" class=\"block mx-auto mt-4 bg-black text-white px-4 py-2 rounded hover:bg-red-600\">Afficher plus</button>
</div>

<script>
    const showMoreButton = document.getElementById('showMoreButton');
    const ateliersContainer = document.getElementById('ateliersContainer');
    const ateliers = Array.from(ateliersContainer.querySelectorAll('.atelier-wrapper'));
    const ateliersToShow = 2;
    let index = ateliersToShow;

    showMoreButton.addEventListener('click', () => {
        for (let i = index; i < index + ateliersToShow; i++) {
            if (i < ateliers.length) {
                ateliers[i].classList.remove('hidden');
            }
        }
        index += ateliersToShow;

        if (index >= ateliers.length) {
            showMoreButton.classList.add('hidden');
        }
    });
</script>




        <!-- Bloc pour les vacations -->
        <div class=\"p-6 bg-white\">
            <h2 class=\"text-xl text-center font-bold mb-4 \">Horraires des ateliers</h2>
            <div class=\"ateliers-container flex flex-wrap justify-center item-center -mx-2\">
                <div 
                    tabindex=\"0\" 
                    role=\"button\" 
                    class=\"atelier bg-stone-400 hover:bg-gray-300 transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-110 p-4 mb-4 cursor-pointer mx-5 w-1/3\"
                    aria-label=\"Détails des horraires\">

                    <div class=\"text-center\">
                        <h3 class=\"text-base font-semibold decoration-neutral-200\"> 8 septembre </h3>
                        ";
        // line 190
        $context['_parent'] = $context;
        $context['_seq'] = CoreExtension::ensureTraversable(Twig\Extension\CoreExtension::slice($this->env, (isset($context["vacations"]) || array_key_exists("vacations", $context) ? $context["vacations"] : (function () { throw new RuntimeError('Variable "vacations" does not exist.', 190, $this->source); })()), 0, 3));
        foreach ($context['_seq'] as $context["_key"] => $context["vacation"]) {
            // line 191
            yield "                            <h1> ";
            yield Twig\Extension\EscaperExtension::escape($this->env, Twig\Extension\CoreExtension::slice($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["vacation"], "dateHeureDebut", [], "any", false, false, false, 191), 11, 5), "html", null, true);
            yield " - ";
            yield Twig\Extension\EscaperExtension::escape($this->env, Twig\Extension\CoreExtension::slice($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["vacation"], "dateHeureFin", [], "any", false, false, false, 191), 11, 5), "html", null, true);
            yield " </h1>
                        ";
        }
        $_parent = $context['_parent'];
        unset($context['_seq'], $context['_iterated'], $context['_key'], $context['vacation'], $context['_parent'], $context['loop']);
        $context = array_intersect_key($context, $_parent) + $_parent;
        // line 193
        yield "
                        <h3 class=\"text-base font-semibold decoration-neutral-200\"> 9 septembre </h3>
                        ";
        // line 195
        $context['_parent'] = $context;
        $context['_seq'] = CoreExtension::ensureTraversable(Twig\Extension\CoreExtension::slice($this->env, (isset($context["vacations"]) || array_key_exists("vacations", $context) ? $context["vacations"] : (function () { throw new RuntimeError('Variable "vacations" does not exist.', 195, $this->source); })()), 3, 2));
        foreach ($context['_seq'] as $context["_key"] => $context["vacation"]) {
            // line 196
            yield "                            <h1> ";
            yield Twig\Extension\EscaperExtension::escape($this->env, Twig\Extension\CoreExtension::slice($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["vacation"], "dateHeureDebut", [], "any", false, false, false, 196), 11, 5), "html", null, true);
            yield " - ";
            yield Twig\Extension\EscaperExtension::escape($this->env, Twig\Extension\CoreExtension::slice($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["vacation"], "dateHeureFin", [], "any", false, false, false, 196), 11, 5), "html", null, true);
            yield " </h1>
                        ";
        }
        $_parent = $context['_parent'];
        unset($context['_seq'], $context['_iterated'], $context['_key'], $context['vacation'], $context['_parent'], $context['loop']);
        $context = array_intersect_key($context, $_parent) + $_parent;
        // line 198
        yield "                    </div>
                </div>

                 ";
        // line 215
        yield "            </div>
        </div>


        <!-- Bloc pour les options d'hébergement -->
        <section class=\"p-6\">
            <h2 class=\"text-xl text-center font-bold mb-4\">Options d'Hébergement</h2>
             <div class=\"ateliers-container flex flex-wrap justify-center item-center -mx-2\">
            ";
        // line 223
        $context['_parent'] = $context;
        $context['_seq'] = CoreExtension::ensureTraversable((isset($context["hotels"]) || array_key_exists("hotels", $context) ? $context["hotels"] : (function () { throw new RuntimeError('Variable "hotels" does not exist.', 223, $this->source); })()));
        foreach ($context['_seq'] as $context["_key"] => $context["hotel"]) {
            // line 224
            yield "                <div 
                        tabindex=\"0\" 
                        role=\"button\" 
                        class=\"atelier bg-white hover:bg-gray-300 transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-110 p-4 mb-4 cursor-pointer mx-5 w-1/3\"
                        aria-label=\"Option hebergement\"
                        >
                    <h3 class=\"text-base text-center font-semibold mb-2\">";
            // line 230
            yield Twig\Extension\EscaperExtension::escape($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["hotel"], "pnom", [], "any", false, false, false, 230), "html", null, true);
            yield "</h3>
                    <p class=\"text-sm text-center\">Adresse : ";
            // line 231
            yield Twig\Extension\EscaperExtension::escape($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["hotel"], "adresse1", [], "any", false, false, false, 231), "html", null, true);
            yield ", ";
            yield Twig\Extension\EscaperExtension::escape($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["hotel"], "cp", [], "any", false, false, false, 231), "html", null, true);
            yield " ";
            yield Twig\Extension\EscaperExtension::escape($this->env, CoreExtension::getAttribute($this->env, $this->source, $context["hotel"], "ville", [], "any", false, false, false, 231), "html", null, true);
            yield "</p>

                    <p class=\"font-bold text-center \">Tarifications :</p>
                    ";
            // line 234
            if ((CoreExtension::getAttribute($this->env, $this->source, $context["hotel"], "pnom", [], "any", false, false, false, 234) == "ibis Styles Lille Centre Gare Beffroi")) {
                // line 235
                yield "                        <li class=\"text-sm text-center\">Single: ";
                yield Twig\Extension\EscaperExtension::escape($this->env, (isset($context["ibisSingle"]) || array_key_exists("ibisSingle", $context) ? $context["ibisSingle"] : (function () { throw new RuntimeError('Variable "ibisSingle" does not exist.', 235, $this->source); })()), "html", null, true);
                yield " €</li>
                        <li class=\"text-sm text-center\">Double: ";
                // line 236
                yield Twig\Extension\EscaperExtension::escape($this->env, (isset($context["ibisDouble"]) || array_key_exists("ibisDouble", $context) ? $context["ibisDouble"] : (function () { throw new RuntimeError('Variable "ibisDouble" does not exist.', 236, $this->source); })()), "html", null, true);
                yield " €</li>
                        ";
            }
            // line 238
            yield "
                    ";
            // line 239
            if ((CoreExtension::getAttribute($this->env, $this->source, $context["hotel"], "pnom", [], "any", false, false, false, 239) == "Ibis Budget Lille Gares Vieux-Lille")) {
                // line 240
                yield "                        <li class=\"text-sm text-center\">Single: ";
                yield Twig\Extension\EscaperExtension::escape($this->env, (isset($context["budgetSingle"]) || array_key_exists("budgetSingle", $context) ? $context["budgetSingle"] : (function () { throw new RuntimeError('Variable "budgetSingle" does not exist.', 240, $this->source); })()), "html", null, true);
                yield " €</li>
                        <li class=\"text-sm text-center\">Double: ";
                // line 241
                yield Twig\Extension\EscaperExtension::escape($this->env, (isset($context["budgetDouble"]) || array_key_exists("budgetDouble", $context) ? $context["budgetDouble"] : (function () { throw new RuntimeError('Variable "budgetDouble" does not exist.', 241, $this->source); })()), "html", null, true);
                yield " €</li>
                        ";
            }
            // line 243
            yield "
                </div>
            ";
        }
        $_parent = $context['_parent'];
        unset($context['_seq'], $context['_iterated'], $context['_key'], $context['hotel'], $context['_parent'], $context['loop']);
        $context = array_intersect_key($context, $_parent) + $_parent;
        // line 246
        yield "             </div>
        </section>
    </div>
";
        
        $__internal_6f47bbe9983af81f1e7450e9a3e3768f->leave($__internal_6f47bbe9983af81f1e7450e9a3e3768f_prof);

        
        $__internal_5a27a8ba21ca79b61932376b2fa922d2->leave($__internal_5a27a8ba21ca79b61932376b2fa922d2_prof);

        return; yield '';
    }

    /**
     * @codeCoverageIgnore
     */
    public function getTemplateName()
    {
        return "accueil/Accueil.html.twig";
    }

    /**
     * @codeCoverageIgnore
     */
    public function isTraitable()
    {
        return false;
    }

    /**
     * @codeCoverageIgnore
     */
    public function getDebugInfo()
    {
        return array (  439 => 246,  431 => 243,  426 => 241,  421 => 240,  419 => 239,  416 => 238,  411 => 236,  406 => 235,  404 => 234,  394 => 231,  390 => 230,  382 => 224,  378 => 223,  368 => 215,  363 => 198,  352 => 196,  348 => 195,  344 => 193,  333 => 191,  329 => 190,  287 => 150,  281 => 149,  275 => 145,  266 => 143,  262 => 142,  257 => 140,  253 => 138,  250 => 137,  248 => 136,  243 => 133,  234 => 131,  230 => 130,  225 => 128,  221 => 126,  218 => 125,  213 => 124,  211 => 123,  197 => 111,  189 => 105,  187 => 104,  184 => 103,  176 => 97,  174 => 96,  171 => 95,  163 => 89,  161 => 88,  158 => 87,  150 => 81,  148 => 80,  69 => 3,  59 => 2,  36 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("{% extends \"base.html.twig\" %}
{% block content %}

    <div class=\"modal fade\" id=\"licenceModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"licenceModalLabel\" aria-hidden=\"true\">
        <div class=\"modal-dialog\" role=\"document\">
            <div class=\"modal-content\">
                <div class=\"modal-header\">
                    <h5 class=\"modal-title\" id=\"licenceModalLabel\">Erreur</h5>
                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">
                        <span aria-hidden=\"true\">&times;</span>
                    </button>
                </div>
                <div class=\"modal-body\">
                    Le numéro de licence saisi ne correspond pas
                </div>
                <div class=\"modal-footer\">
                    <button type=\"button\" class=\"btn btn-secondary text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\" data-dismiss=\"modal\">Fermer</button>
                </div>
            </div>
        </div>
    </div>

    <div class=\"modal fade\" id=\"licenceModalCompte\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"licenceModalLabel\" aria-hidden=\"true\">
        <div class=\"modal-dialog\" role=\"document\">
            <div class=\"modal-content\">
                <div class=\"modal-header\">
                    <h5 class=\"modal-title\" id=\"licenceModalLabel\">Succes</h5>
                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">
                        <span aria-hidden=\"true\">&times;</span>
                    </button>
                </div>
                <div class=\"modal-body\">
                    Votre compte a été confirmé
                </div>
                <div class=\"modal-footer\">
                    <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Fermer</button>
                </div>
            </div>
        </div>
    </div>

    <div class=\"modal fade\" id=\"licenceModalCompteSuppr\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"licenceModalLabel\" aria-hidden=\"true\">
        <div class=\"modal-dialog\" role=\"document\">
            <div class=\"modal-content\">
                <div class=\"modal-header\">
                    <h5 class=\"modal-title\" id=\"licenceModalLabel\">Succes</h5>
                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">
                        <span aria-hidden=\"true\">&times;</span>
                    </button>
                </div>
                <div class=\"modal-body\">
                    Votre demande a bien été annulée
                </div>
                <div class=\"modal-footer\">
                    <button type=\"button\" class=\"btn btn-secondary text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\" data-dismiss=\"modal\">Fermer</button>
                </div>
            </div>
        </div>
    </div>

    <div class=\"modal fade\" id=\"licenceModalCompteMdpInvalide\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"licenceModalLabel\" aria-hidden=\"true\">
        <div class=\"modal-dialog\" role=\"document\">
            <div class=\"modal-content\">
                <div class=\"modal-header\">
                    <h5 class=\"modal-title\" id=\"licenceModalLabel\">Succes</h5>
                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">
                        <span aria-hidden=\"true\">&times;</span>
                    </button>
                </div>
                <div class=\"modal-body\">
                    Le mot de passe est invalide
                </div>
                <div class=\"modal-footer\">
                    <button type=\"button\" class=\"btn btn-secondary \" data-dismiss=\"modal\">Fermer</button>
                </div>
            </div>
        </div>
    </div>

    {% if app.flashes('danger') %}
        <script>
            \$(document).ready(function(){
                \$('#licenceModal').modal('show');
            });
        </script>
    {% endif %}

    {% if app.flashes('success') %}
        <script>
            \$(document).ready(function(){
                \$('#licenceModalCompte').modal('show');
            });
        </script>
    {% endif %}

    {% if app.flashes('successSuprr') %}
        <script>
            \$(document).ready(function(){
                \$('#licenceModalCompteSuppr').modal('show');
            });
        </script>
    {% endif %}

    {% if app.flashes('erreurMdp') %}
        <script>
            \$(document).ready(function(){
                \$('#licenceModalCompteMdpInvalide').modal('show');
            });
        </script>
    {% endif %}


    <div class=\"flex flex-col justify-center item-center w-[70%]\">    
        <div class=\"p-6 \">
            <h2 class=\"text-xl text-center font-bold mb-4 font-['PlayPretend']\">Dates du Congrès</h2>
            <h2 class=\"text-sm text-center\">Le congrès se déroulera du 20 au 23 Octobre 2024.</h2>
        </div>

        <!-- Bloc pour les ateliers proposés -->
       <div class=\"p-6 bg-white\">
    <h2 class=\"text-xl text-center font-bold mb-4\">Ateliers Proposés</h2>
    <div id=\"ateliersContainer\" class=\"ateliers-container grid grid-cols-1 sm:grid-cols-2  gap-4\">
        {% set displayedCount = 0 %}
        {% for atelier in ateliers %}
            {% if displayedCount < 2 %}
                <div class=\"atelier-wrapper\">
                    <div class=\"atelier bg-stone-400 hover:bg-gray-300 transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-100 p-4 mb-4 cursor-pointer\">
                        <h3 class=\"text-base font-semibold decoration-neutral-200\">{{ atelier.libelle }}</h3>
                        <ul>
                            {% for theme in atelier.themes %}
                                <li class=\"text-sm\">{{ theme.libelle }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
                {% set displayedCount = displayedCount + 1 %}
            {% else %}
                <div class=\"atelier-wrapper hidden\">
                    <div class=\"atelier bg-stone-400 hover:bg-gray-300 transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-100 p-4 mb-4 cursor-pointer\">
                        <h3 class=\"text-base font-semibold decoration-neutral-200\">{{ atelier.libelle }}</h3>
                        <ul>
                            {% for theme in atelier.themes %}
                                <li class=\"text-sm\">{{ theme.libelle }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
            {% endif %}
        {% endfor %}
    </div>
    <button id=\"showMoreButton\" class=\"block mx-auto mt-4 bg-black text-white px-4 py-2 rounded hover:bg-red-600\">Afficher plus</button>
</div>

<script>
    const showMoreButton = document.getElementById('showMoreButton');
    const ateliersContainer = document.getElementById('ateliersContainer');
    const ateliers = Array.from(ateliersContainer.querySelectorAll('.atelier-wrapper'));
    const ateliersToShow = 2;
    let index = ateliersToShow;

    showMoreButton.addEventListener('click', () => {
        for (let i = index; i < index + ateliersToShow; i++) {
            if (i < ateliers.length) {
                ateliers[i].classList.remove('hidden');
            }
        }
        index += ateliersToShow;

        if (index >= ateliers.length) {
            showMoreButton.classList.add('hidden');
        }
    });
</script>




        <!-- Bloc pour les vacations -->
        <div class=\"p-6 bg-white\">
            <h2 class=\"text-xl text-center font-bold mb-4 \">Horraires des ateliers</h2>
            <div class=\"ateliers-container flex flex-wrap justify-center item-center -mx-2\">
                <div 
                    tabindex=\"0\" 
                    role=\"button\" 
                    class=\"atelier bg-stone-400 hover:bg-gray-300 transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-110 p-4 mb-4 cursor-pointer mx-5 w-1/3\"
                    aria-label=\"Détails des horraires\">

                    <div class=\"text-center\">
                        <h3 class=\"text-base font-semibold decoration-neutral-200\"> 8 septembre </h3>
                        {% for vacation in vacations|slice(0,3) %}
                            <h1> {{vacation.dateHeureDebut|slice(11,5)}} - {{vacation.dateHeureFin|slice(11,5)}} </h1>
                        {% endfor %}

                        <h3 class=\"text-base font-semibold decoration-neutral-200\"> 9 septembre </h3>
                        {% for vacation in vacations|slice(3,2) %}
                            <h1> {{vacation.dateHeureDebut|slice(11,5)}} - {{vacation.dateHeureFin|slice(11,5)}} </h1>
                        {% endfor %}
                    </div>
                </div>

                 {#}{% set break = false %}
                        {% if vacation.id == 4 %}
                            {% set break = true %}
                        {% endif %}

                        {% if not break %}
                            <h1> {{vacation.dateHeureDebut}} </h1>
                        {% endif %}

                        {% if break %}
                            {% set break = false %}
                        {% endif %}
    
                    {% endfor %}{#}
            </div>
        </div>


        <!-- Bloc pour les options d'hébergement -->
        <section class=\"p-6\">
            <h2 class=\"text-xl text-center font-bold mb-4\">Options d'Hébergement</h2>
             <div class=\"ateliers-container flex flex-wrap justify-center item-center -mx-2\">
            {% for hotel in hotels %}
                <div 
                        tabindex=\"0\" 
                        role=\"button\" 
                        class=\"atelier bg-white hover:bg-gray-300 transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-110 p-4 mb-4 cursor-pointer mx-5 w-1/3\"
                        aria-label=\"Option hebergement\"
                        >
                    <h3 class=\"text-base text-center font-semibold mb-2\">{{ hotel.pnom }}</h3>
                    <p class=\"text-sm text-center\">Adresse : {{ hotel.adresse1 }}, {{ hotel.cp }} {{ hotel.ville }}</p>

                    <p class=\"font-bold text-center \">Tarifications :</p>
                    {% if hotel.pnom == \"ibis Styles Lille Centre Gare Beffroi\" %}
                        <li class=\"text-sm text-center\">Single: {{ ibisSingle }} €</li>
                        <li class=\"text-sm text-center\">Double: {{ ibisDouble }} €</li>
                        {% endif %}

                    {% if hotel.pnom == \"Ibis Budget Lille Gares Vieux-Lille\" %}
                        <li class=\"text-sm text-center\">Single: {{ budgetSingle }} €</li>
                        <li class=\"text-sm text-center\">Double: {{ budgetDouble }} €</li>
                        {% endif %}

                </div>
            {% endfor %}
             </div>
        </section>
    </div>
{% endblock %}", "accueil/Accueil.html.twig", "/Users/manny/Documents/Programmation/MDL MANNY/MaisonDesLigues/templates/accueil/Accueil.html.twig");
    }
}
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:48:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb";O:35:"phpDocumentor\Reflection\Php\Class_":14:{s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:48:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb";s:36:" phpDocumentor\Reflection\Fqsen name";s:47:"__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";N;s:45:" phpDocumentor\Reflection\Php\Class_ readOnly";b:0;s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:43:" phpDocumentor\Reflection\Php\Class_ parent";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:14:"\Twig\Template";s:36:" phpDocumentor\Reflection\Fqsen name";s:8:"Template";}s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:2:{s:57:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::$source";O:37:"phpDocumentor\Reflection\Php\Property":11:{s:44:" phpDocumentor\Reflection\Php\Property fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:57:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::$source";s:36:" phpDocumentor\Reflection\Fqsen name";s:6:"source";}s:47:" phpDocumentor\Reflection\Php\Property docBlock";N;s:44:" phpDocumentor\Reflection\Php\Property types";a:0:{}s:46:" phpDocumentor\Reflection\Php\Property default";N;s:45:" phpDocumentor\Reflection\Php\Property static";b:0;s:49:" phpDocumentor\Reflection\Php\Property visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:47:" phpDocumentor\Reflection\Php\Property location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:19;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\Php\Property endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:19;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:43:" phpDocumentor\Reflection\Php\Property type";N;s:47:" phpDocumentor\Reflection\Php\Property readOnly";b:0;s:47:" phpDocumentor\Reflection\Php\Property metadata";a:0:{}}s:57:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::$macros";O:37:"phpDocumentor\Reflection\Php\Property":11:{s:44:" phpDocumentor\Reflection\Php\Property fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:57:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::$macros";s:36:" phpDocumentor\Reflection\Fqsen name";s:6:"macros";}s:47:" phpDocumentor\Reflection\Php\Property docBlock";N;s:44:" phpDocumentor\Reflection\Php\Property types";a:0:{}s:46:" phpDocumentor\Reflection\Php\Property default";s:2:"[]";s:45:" phpDocumentor\Reflection\Php\Property static";b:0;s:49:" phpDocumentor\Reflection\Php\Property visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:47:" phpDocumentor\Reflection\Php\Property location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:20;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\Php\Property endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:20;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:43:" phpDocumentor\Reflection\Php\Property type";N;s:47:" phpDocumentor\Reflection\Php\Property readOnly";b:0;s:47:" phpDocumentor\Reflection\Php\Property metadata";a:0:{}}}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:8:{s:63:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::__construct()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:63:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::__construct()";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"__construct";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:3:"env";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Twig\Environment";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"Environment";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:22;s:47:" phpDocumentor\Reflection\Location columnNumber";i:543;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:31;s:47:" phpDocumentor\Reflection\Location columnNumber";i:775;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:63:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::doGetParent()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:63:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::doGetParent()";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"doGetParent";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:9:"protected";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:33;s:47:" phpDocumentor\Reflection\Location columnNumber";i:782;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:37;s:47:" phpDocumentor\Reflection\Location columnNumber";i:890;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:61:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::doDisplay()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:61:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::doDisplay()";s:36:" phpDocumentor\Reflection\Fqsen name";s:9:"doDisplay";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:9:"protected";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"blocks";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:46:" phpDocumentor\Reflection\Php\Argument default";s:2:"[]";s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:39;s:47:" phpDocumentor\Reflection\Location columnNumber";i:897;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:56;s:47:" phpDocumentor\Reflection\Location columnNumber";i:2129;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:65:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::block_content()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:65:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::block_content()";s:36:" phpDocumentor\Reflection\Fqsen name";s:13:"block_content";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"blocks";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:46:" phpDocumentor\Reflection\Php\Argument default";s:2:"[]";s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:59;s:47:" phpDocumentor\Reflection\Location columnNumber";i:2150;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:450;s:47:" phpDocumentor\Reflection\Location columnNumber";i:25668;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:67:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::getTemplateName()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:0:"";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:1:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:18:"codeCoverageIgnore";s:14:" * description";N;}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:67:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::getTemplateName()";s:36:" phpDocumentor\Reflection\Fqsen name";s:15:"getTemplateName";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:455;s:47:" phpDocumentor\Reflection\Location columnNumber";i:25718;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:458;s:47:" phpDocumentor\Reflection\Location columnNumber";i:25806;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:63:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::isTraitable()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:0:"";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:1:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:18:"codeCoverageIgnore";s:14:" * description";N;}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:63:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::isTraitable()";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"isTraitable";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:463;s:47:" phpDocumentor\Reflection\Location columnNumber";i:25856;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:466;s:47:" phpDocumentor\Reflection\Location columnNumber";i:25918;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:64:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::getDebugInfo()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:0:"";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:1:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:18:"codeCoverageIgnore";s:14:" * description";N;}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:64:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::getDebugInfo()";s:36:" phpDocumentor\Reflection\Fqsen name";s:12:"getDebugInfo";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:471;s:47:" phpDocumentor\Reflection\Location columnNumber";i:25968;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:474;s:47:" phpDocumentor\Reflection\Location columnNumber";i:26693;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:68:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::getSourceContext()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:68:"\__TwigTemplate_a96a15a1b1a193e35c3fc07a63f715eb::getSourceContext()";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"getSourceContext";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:476;s:47:" phpDocumentor\Reflection\Location columnNumber";i:26700;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:727;s:47:" phpDocumentor\Reflection\Location columnNumber";i:38572;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:17;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Class_ endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:728;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:45:" phpDocumentor\Reflection\Php\Class_ metadata";a:0:{}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";