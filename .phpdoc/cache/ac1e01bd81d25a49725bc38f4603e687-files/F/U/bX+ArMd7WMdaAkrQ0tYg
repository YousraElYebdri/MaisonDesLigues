1717368478
ac1e01bd81d25a49725bc38f4603e687-phpdoc%3A7c1ec962657f3dbee58287856e2642c5-648de4b6ed20db7864e33b24f3ee9571
s:105980:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjY0OGRlNGI2ZWQyMGRiNzg2NGUzM2IyNGYzZWU5NTcxIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTc6IkNvbmZpZ3VyYXRpb24ucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NzM6InZlbmRvci9kb2N0cmluZS9kb2N0cmluZS1idW5kbGUvc3JjL0RlcGVuZGVuY3lJbmplY3Rpb24vQ29uZmlndXJhdGlvbi5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjM5MjgzOiI8P3BocAoKbmFtZXNwYWNlIERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uOwoKdXNlIERvY3RyaW5lXERCQUxcU2NoZW1hXExlZ2FjeVNjaGVtYU1hbmFnZXJGYWN0b3J5Owp1c2UgRG9jdHJpbmVcT1JNXEVudGl0eU1hbmFnZXI7CnVzZSBEb2N0cmluZVxPUk1cRW50aXR5UmVwb3NpdG9yeTsKdXNlIERvY3RyaW5lXE9STVxNYXBwaW5nXENsYXNzTWV0YWRhdGFGYWN0b3J5Owp1c2UgRG9jdHJpbmVcT1JNXE1hcHBpbmdcRHJpdmVyXEFubm90YXRpb25Ecml2ZXI7CnVzZSBEb2N0cmluZVxPUk1cUHJveHlcUHJveHlGYWN0b3J5Owp1c2UgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uOwp1c2UgUmVmbGVjdGlvbkNsYXNzOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxOb2RlRGVmaW5pdGlvbjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcVHJlZUJ1aWxkZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxDb25maWd1cmF0aW9uSW50ZXJmYWNlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcRGVwZW5kZW5jeUluamVjdGlvblxFeGNlcHRpb25cTG9naWNFeGNlcHRpb247Cgp1c2UgZnVuY3Rpb24gYXJyYXlfZGlmZl9rZXk7CnVzZSBmdW5jdGlvbiBhcnJheV9pbnRlcnNlY3Rfa2V5Owp1c2UgZnVuY3Rpb24gYXJyYXlfa2V5X2V4aXN0czsKdXNlIGZ1bmN0aW9uIGFycmF5X2tleXM7CnVzZSBmdW5jdGlvbiBhcnJheV9wb3A7CnVzZSBmdW5jdGlvbiBhc3NlcnQ7CnVzZSBmdW5jdGlvbiBjbGFzc19leGlzdHM7CnVzZSBmdW5jdGlvbiBjb25zdGFudDsKdXNlIGZ1bmN0aW9uIGNvdW50Owp1c2UgZnVuY3Rpb24gZGVmaW5lZDsKdXNlIGZ1bmN0aW9uIGltcGxvZGU7CnVzZSBmdW5jdGlvbiBpbl9hcnJheTsKdXNlIGZ1bmN0aW9uIGlzX2FycmF5Owp1c2UgZnVuY3Rpb24gaXNfYm9vbDsKdXNlIGZ1bmN0aW9uIGlzX2ludDsKdXNlIGZ1bmN0aW9uIGlzX3N0cmluZzsKdXNlIGZ1bmN0aW9uIGtleTsKdXNlIGZ1bmN0aW9uIG1ldGhvZF9leGlzdHM7CnVzZSBmdW5jdGlvbiByZXNldDsKdXNlIGZ1bmN0aW9uIHNwcmludGY7CnVzZSBmdW5jdGlvbiBzdHJsZW47CnVzZSBmdW5jdGlvbiBzdHJwb3M7CnVzZSBmdW5jdGlvbiBzdHJ0b3VwcGVyOwp1c2UgZnVuY3Rpb24gc3Vic3RyOwp1c2UgZnVuY3Rpb24gdHJpZ2dlcl9kZXByZWNhdGlvbjsKCi8qKgogKiBUaGlzIGNsYXNzIGNvbnRhaW5zIHRoZSBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uIGZvciB0aGUgYnVuZGxlCiAqCiAqIFRoaXMgaW5mb3JtYXRpb24gaXMgc29sZWx5IHJlc3BvbnNpYmxlIGZvciBob3cgdGhlIGRpZmZlcmVudCBjb25maWd1cmF0aW9uCiAqIHNlY3Rpb25zIGFyZSBub3JtYWxpemVkLCBhbmQgbWVyZ2VkLgogKgogKiBAZmluYWwgc2luY2UgMi45CiAqLwpjbGFzcyBDb25maWd1cmF0aW9uIGltcGxlbWVudHMgQ29uZmlndXJhdGlvbkludGVyZmFjZQp7CiAgICBwcml2YXRlIGJvb2wgJGRlYnVnOwoKICAgIC8qKiBAcGFyYW0gYm9vbCAkZGVidWcgV2hldGhlciB0byB1c2UgdGhlIGRlYnVnIG1vZGUgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdChib29sICRkZWJ1ZykKICAgIHsKICAgICAgICAkdGhpcy0+ZGVidWcgPSAkZGVidWc7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGdldENvbmZpZ1RyZWVCdWlsZGVyKCk6IFRyZWVCdWlsZGVyCiAgICB7CiAgICAgICAgJHRyZWVCdWlsZGVyID0gbmV3IFRyZWVCdWlsZGVyKCdkb2N0cmluZScpOwogICAgICAgICRyb290Tm9kZSAgICA9ICR0cmVlQnVpbGRlci0+Z2V0Um9vdE5vZGUoKTsKCiAgICAgICAgJHRoaXMtPmFkZERiYWxTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZE9ybVNlY3Rpb24oJHJvb3ROb2RlKTsKCiAgICAgICAgcmV0dXJuICR0cmVlQnVpbGRlcjsKICAgIH0KCiAgICAvKioKICAgICAqIEFkZCBEQkFMIHNlY3Rpb24gdG8gY29uZmlndXJhdGlvbiB0cmVlCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkRGJhbFNlY3Rpb24oQXJyYXlOb2RlRGVmaW5pdGlvbiAkbm9kZSk6IHZvaWQKICAgIHsKICAgICAgICAvLyBLZXkgdGhhdCBzaG91bGQgbm90IGJlIHJld3JpdHRlbiB0byB0aGUgY29ubmVjdGlvbiBjb25maWcKICAgICAgICAkZXhjbHVkZWRLZXlzID0gWydkZWZhdWx0X2Nvbm5lY3Rpb24nID0+IHRydWUsICdkcml2ZXJfc2NoZW1lcycgPT4gdHJ1ZSwgJ2RyaXZlcl9zY2hlbWUnID0+IHRydWUsICd0eXBlcycgPT4gdHJ1ZSwgJ3R5cGUnID0+IHRydWVdOwoKICAgICAgICAkbm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2RiYWwnKQogICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShzdGF0aWMgZnVuY3Rpb24gKCR2KSB1c2UgKCRleGNsdWRlZEtleXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEgaXNfYXJyYXkoJHYpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnJheV9rZXlfZXhpc3RzKCdjb25uZWN0aW9ucycsICR2KSB8fCBhcnJheV9rZXlfZXhpc3RzKCdjb25uZWN0aW9uJywgJHYpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElzIHRoZXJlIGFjdHVhbGx5IGFueXRoaW5nIHRvIHVzZSBvbmNlIGV4Y2x1ZGVkIGtleXMgYXJlIGNvbnNpZGVyZWQ/CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYm9vbCkgYXJyYXlfZGlmZl9rZXkoJHYsICRleGNsdWRlZEtleXMpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT50aGVuKHN0YXRpYyBmdW5jdGlvbiAoJHYpIHVzZSAoJGV4Y2x1ZGVkS2V5cykgewogICAgICAgICAgICAgICAgICAgICAgICAkY29ubmVjdGlvbiA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkdiBhcyAka2V5ID0+ICR2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRleGNsdWRlZEtleXNbJGtleV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbm5lY3Rpb25bJGtleV0gPSAkdlska2V5XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2V0KCR2WyRrZXldKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgJHZbJ2Nvbm5lY3Rpb25zJ10gPSBbKCR2WydkZWZhdWx0X2Nvbm5lY3Rpb24nXSA/PyAnZGVmYXVsdCcpID0+ICRjb25uZWN0aW9uXTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkdjsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdkZWZhdWx0X2Nvbm5lY3Rpb24nKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCd0eXBlJykKICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCd0eXBlcycpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnYXJyYXknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW4oc3RhdGljIGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWydjbGFzcycgPT4gJHZdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2NsYXNzJyktPmlzUmVxdWlyZWQoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdjb21tZW50ZWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNldERlcHJlY2F0ZWQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZG9jdHJpbmUvZG9jdHJpbmUtYnVuZGxlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcyLjAnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZSBkb2N0cmluZS1idW5kbGUgdHlwZSBjb21tZW50aW5nIGZlYXR1cmVzIHdlcmUgcmVtb3ZlZDsgdGhlIGNvcnJlc3BvbmRpbmcgY29uZmlnIHBhcmFtZXRlciB3YXMgZGVwcmVjYXRlZCBpbiAyLjAgYW5kIHdpbGwgYmUgZHJvcHBlZCBpbiAzLjAuJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdkcml2ZXJfc2NoZW1lJykKICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdkcml2ZXJfc2NoZW1lcycpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ3NjaGVtZScpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+bm9ybWFsaXplS2V5cyhmYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJQcm90b3R5cGUoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdEZWZpbmVzIGEgZHJpdmVyIGZvciBnaXZlbiBVUkwgc2NoZW1lcy4gU2NoZW1lcyBiZWluZyBkcml2ZXIgbmFtZXMgY2Fubm90IGJlIHJlZGVmaW5lZC4gSG93ZXZlciwgb3RoZXIgZGVmYXVsdCBzY2hlbWVzIGNhbiBiZSBvdmVyd3JpdHRlbi4nKQogICAgICAgICAgICAgICAgICAgICAgICAtPnZhbGlkYXRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YWx3YXlzKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbihzdGF0aWMgZnVuY3Rpb24gKGFycmF5ICR2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1bnN1cHBvcnRlZFNjaGVtZXMgPSBbXTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJHZhbHVlIGFzICRzY2hlbWUgPT4gJGRyaXZlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISBpbl9hcnJheSgkc2NoZW1lLCBbJ3Bkby1teXNxbCcsICdwZG8tc3FsaXRlJywgJ3Bkby1wZ3NxbCcsICdwZG8tb2NpJywgJ29jaTgnLCAnaWJtLWRiMicsICdwZG8tc3Fsc3J2JywgJ215c3FsaScsICdwZ3NxbCcsICdzcWxzcnYnLCAnc3FsaXRlMyddLCB0cnVlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1bnN1cHBvcnRlZFNjaGVtZXNbXSA9ICRzY2hlbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHVuc3VwcG9ydGVkU2NoZW1lcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uKHNwcmludGYoJ1JlZ2lzdGVyaW5nIGEgc2NoZW1lIHdpdGggdGhlIG5hbWUgb2Ygb25lIG9mIHRoZSBvZmZpY2lhbCBkcml2ZXJzIGlzIGZvcmJpZGRlbiwgYXMgdGhvc2UgYXJlIGRlZmluZWQgaW4gREJBTCBpdHNlbGYuIFRoZSBmb2xsb3dpbmcgc2NoZW1lcyBhcmUgZm9yYmlkZGVuOiAlcycsIGltcGxvZGUoJywgJywgJHVuc3VwcG9ydGVkU2NoZW1lcykpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ2Nvbm5lY3Rpb24nKQogICAgICAgICAgICAgICAgLT5hcHBlbmQoJHRoaXMtPmdldERiYWxDb25uZWN0aW9uc05vZGUoKSkKICAgICAgICAgICAgLT5lbmQoKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiB0aGUgZGJhbCBjb25uZWN0aW9ucyBub2RlCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gZ2V0RGJhbENvbm5lY3Rpb25zTm9kZSgpOiBBcnJheU5vZGVEZWZpbml0aW9uCiAgICB7CiAgICAgICAgJHRyZWVCdWlsZGVyID0gbmV3IFRyZWVCdWlsZGVyKCdjb25uZWN0aW9ucycpOwogICAgICAgICRub2RlICAgICAgICA9ICR0cmVlQnVpbGRlci0+Z2V0Um9vdE5vZGUoKTsKCiAgICAgICAgJGNvbm5lY3Rpb25Ob2RlID0gJG5vZGUKICAgICAgICAgICAgLT5yZXF1aXJlc0F0TGVhc3RPbmVFbGVtZW50KCkKICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnbmFtZScpCiAgICAgICAgICAgIC0+cHJvdG90eXBlKCdhcnJheScpOwogICAgICAgIGFzc2VydCgkY29ubmVjdGlvbk5vZGUgaW5zdGFuY2VvZiBBcnJheU5vZGVEZWZpbml0aW9uKTsKCiAgICAgICAgJHRoaXMtPmNvbmZpZ3VyZURiYWxEcml2ZXJOb2RlKCRjb25uZWN0aW9uTm9kZSk7CgogICAgICAgICRjb2xsYXRpb25LZXkgPSBkZWZpbmVkKCdEb2N0cmluZVxEQkFMXENvbm5lY3Rpb246OlBBUkFNX0FTQ0lJX1NUUl9BUlJBWScpCiAgICAgICAgICAgID8gJ2NvbGxhdGUnCiAgICAgICAgICAgIDogJ2NvbGxhdGlvbic7CgogICAgICAgICRjb25uZWN0aW9uTm9kZQogICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnb3B0aW9uJykKICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ21hcHBpbmdfdHlwZScpCiAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdzbGF2ZScpCiAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdyZXBsaWNhJykKICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ2RlZmF1bHRfdGFibGVfb3B0aW9uJykKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2RyaXZlcicpLT5kZWZhdWx0VmFsdWUoJ3Bkb19teXNxbCcpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdwbGF0Zm9ybV9zZXJ2aWNlJykKICAgICAgICAgICAgICAgICAgICAtPnNldERlcHJlY2F0ZWQoCiAgICAgICAgICAgICAgICAgICAgICAgICdkb2N0cmluZS9kb2N0cmluZS1idW5kbGUnLAogICAgICAgICAgICAgICAgICAgICAgICAnMi45JywKICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZSAicGxhdGZvcm1fc2VydmljZSIgY29uZmlndXJhdGlvbiBrZXkgaXMgZGVwcmVjYXRlZCBzaW5jZSBkb2N0cmluZS1idW5kbGUgMi45LiBEQkFMIDQgd2lsbCBub3Qgc3VwcG9ydCBzZXR0aW5nIGEgY3VzdG9tIHBsYXRmb3JtIHZpYSBjb25uZWN0aW9uIHBhcmFtcyBhbnltb3JlLicsCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnYXV0b19jb21taXQnKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnc2NoZW1hX2ZpbHRlcicpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnbG9nZ2luZycpLT5kZWZhdWx0VmFsdWUoJHRoaXMtPmRlYnVnKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ3Byb2ZpbGluZycpLT5kZWZhdWx0VmFsdWUoJHRoaXMtPmRlYnVnKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ3Byb2ZpbGluZ19jb2xsZWN0X2JhY2t0cmFjZScpCiAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdFbmFibGVzIGNvbGxlY3RpbmcgYmFja3RyYWNlcyB3aGVuIHByb2ZpbGluZyBpcyBlbmFibGVkJykKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ3Byb2ZpbGluZ19jb2xsZWN0X3NjaGVtYV9lcnJvcnMnKQogICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFZhbHVlKHRydWUpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdFbmFibGVzIGNvbGxlY3Rpbmcgc2NoZW1hIGVycm9ycyB3aGVuIHByb2ZpbGluZyBpcyBlbmFibGVkJykKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ2Rpc2FibGVfdHlwZV9jb21tZW50cycpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzZXJ2ZXJfdmVyc2lvbicpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdkcml2ZXJfY2xhc3MnKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnd3JhcHBlcl9jbGFzcycpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgna2VlcF9zbGF2ZScpCiAgICAgICAgICAgICAgICAgICAgLT5zZXREZXByZWNhdGVkKAogICAgICAgICAgICAgICAgICAgICAgICAnZG9jdHJpbmUvZG9jdHJpbmUtYnVuZGxlJywKICAgICAgICAgICAgICAgICAgICAgICAgJzIuMicsCiAgICAgICAgICAgICAgICAgICAgICAgICdUaGUgImtlZXBfc2xhdmUiIGNvbmZpZ3VyYXRpb24ga2V5IGlzIGRlcHJlY2F0ZWQgc2luY2UgZG9jdHJpbmUtYnVuZGxlIDIuMi4gVXNlIHRoZSAia2VlcF9yZXBsaWNhIiBjb25maWd1cmF0aW9uIGtleSBpbnN0ZWFkLicsCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgna2VlcF9yZXBsaWNhJyktPmVuZCgpCiAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnb3B0aW9ucycpCiAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgna2V5JykKICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgndmFyaWFibGUnKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdtYXBwaW5nX3R5cGVzJykKICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnc2NhbGFyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnZGVmYXVsdF90YWJsZV9vcHRpb25zJykKICAgICAgICAgICAgICAgIC0+aW5mbyhzcHJpbnRmKAogICAgICAgICAgICAgICAgICAgICJUaGlzIG9wdGlvbiBpcyB1c2VkIGJ5IHRoZSBzY2hlbWEtdG9vbCBhbmQgYWZmZWN0cyBnZW5lcmF0ZWQgU1FMLiBQb3NzaWJsZSBrZXlzIGluY2x1ZGUgJ2NoYXJzZXQnLCclcycsIGFuZCAnZW5naW5lJy4iLAogICAgICAgICAgICAgICAgICAgICRjb2xsYXRpb25LZXksCiAgICAgICAgICAgICAgICApKQogICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnc2NoZW1hX21hbmFnZXJfZmFjdG9yeScpCiAgICAgICAgICAgICAgICAgICAgLT5jYW5ub3RCZUVtcHR5KCkKICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZSgkdGhpcy0+Z2V0RGVmYXVsdFNjaGVtYU1hbmFnZXJGYWN0b3J5KCkpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3Jlc3VsdF9jYWNoZScpLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpOwoKICAgICAgICAvLyBkYmFsIDwgMi4xMQogICAgICAgICRzbGF2ZU5vZGUgPSAkY29ubmVjdGlvbk5vZGUKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnc2xhdmVzJykKICAgICAgICAgICAgICAgICAgICAtPnNldERlcHJlY2F0ZWQoCiAgICAgICAgICAgICAgICAgICAgICAgICdkb2N0cmluZS9kb2N0cmluZS1idW5kbGUnLAogICAgICAgICAgICAgICAgICAgICAgICAnMi4yJywKICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZSAic2xhdmVzIiBjb25maWd1cmF0aW9uIGtleSB3aWxsIGJlIHJlbmFtZWQgdG8gInJlcGxpY2FzIiBpbiBkb2N0cmluZS1idW5kbGUgMy4wLiAic2xhdmVzIiBpcyBkZXByZWNhdGVkIHNpbmNlIGRvY3RyaW5lLWJ1bmRsZSAyLjIuJywKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnbmFtZScpCiAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ2FycmF5Jyk7CiAgICAgICAgJHRoaXMtPmNvbmZpZ3VyZURiYWxEcml2ZXJOb2RlKCRzbGF2ZU5vZGUpOwoKICAgICAgICAvLyBkYmFsID49IDIuMTEKICAgICAgICAkcmVwbGljYU5vZGUgPSAkY29ubmVjdGlvbk5vZGUKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgncmVwbGljYXMnKQogICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdhcnJheScpOwogICAgICAgICR0aGlzLT5jb25maWd1cmVEYmFsRHJpdmVyTm9kZSgkcmVwbGljYU5vZGUpOwoKICAgICAgICByZXR1cm4gJG5vZGU7CiAgICB9CgogICAgLyoqCiAgICAgKiBBZGRzIGNvbmZpZyBrZXlzIHJlbGF0ZWQgdG8gcGFyYW1zIHByb2Nlc3NlZCBieSB0aGUgREJBTCBkcml2ZXJzCiAgICAgKgogICAgICogVGhlc2Uga2V5cyBhcmUgYXZhaWxhYmxlIGZvciByZXBsaWNhIGNvbmZpZ3VyYXRpb25zIHRvby4KICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiBjb25maWd1cmVEYmFsRHJpdmVyTm9kZShBcnJheU5vZGVEZWZpbml0aW9uICRub2RlKTogdm9pZAogICAgewogICAgICAgICRub2RlCiAgICAgICAgICAgIC0+dmFsaWRhdGUoKQogICAgICAgICAgICAtPmFsd2F5cyhzdGF0aWMgZnVuY3Rpb24gKGFycmF5ICR2YWx1ZXMpIHsKICAgICAgICAgICAgICAgIGlmICghIGlzc2V0KCR2YWx1ZXNbJ3VybCddKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkdmFsdWVzOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICR1cmxDb25mbGljdGluZ09wdGlvbnMgPSBbJ2hvc3QnID0+IHRydWUsICdwb3J0JyA9PiB0cnVlLCAndXNlcicgPT4gdHJ1ZSwgJ3Bhc3N3b3JkJyA9PiB0cnVlLCAncGF0aCcgPT4gdHJ1ZSwgJ2RibmFtZScgPT4gdHJ1ZSwgJ3VuaXhfc29ja2V0JyA9PiB0cnVlLCAnbWVtb3J5JyA9PiB0cnVlXTsKICAgICAgICAgICAgICAgICR1cmxDb25mbGljdGluZ1ZhbHVlcyAgPSBhcnJheV9rZXlzKGFycmF5X2ludGVyc2VjdF9rZXkoJHZhbHVlcywgJHVybENvbmZsaWN0aW5nT3B0aW9ucykpOwoKICAgICAgICAgICAgICAgIGlmICgkdXJsQ29uZmxpY3RpbmdWYWx1ZXMpIHsKICAgICAgICAgICAgICAgICAgICAkdGFpbCA9IGNvdW50KCR1cmxDb25mbGljdGluZ1ZhbHVlcykgPiAxID8gc3ByaW50Zignb3IgIiVzIiBvcHRpb25zJywgYXJyYXlfcG9wKCR1cmxDb25mbGljdGluZ1ZhbHVlcykpIDogJ29wdGlvbic7CiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcl9kZXByZWNhdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgJ2RvY3RyaW5lL2RvY3RyaW5lLWJ1bmRsZScsCiAgICAgICAgICAgICAgICAgICAgICAgICcyLjQnLAogICAgICAgICAgICAgICAgICAgICAgICAnU2V0dGluZyB0aGUgImRvY3RyaW5lLmRiYWwuJXMiICVzIHdoaWxlIHRoZSAidXJsIiBvbmUgaXMgZGVmaW5lZCBpcyBkZXByZWNhdGVkJywKICAgICAgICAgICAgICAgICAgICAgICAgaW1wbG9kZSgnIiwgIicsICR1cmxDb25mbGljdGluZ1ZhbHVlcyksCiAgICAgICAgICAgICAgICAgICAgICAgICR0YWlsLAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuICR2YWx1ZXM7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3VybCcpLT5pbmZvKCdBIFVSTCB3aXRoIGNvbm5lY3Rpb24gaW5mb3JtYXRpb247IGFueSBwYXJhbWV0ZXIgdmFsdWUgcGFyc2VkIGZyb20gdGhpcyBzdHJpbmcgd2lsbCBvdmVycmlkZSBleHBsaWNpdGx5IHNldCBwYXJhbWV0ZXJzJyktPmVuZCgpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2RibmFtZScpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdob3N0JyktPmluZm8oJ0RlZmF1bHRzIHRvICJsb2NhbGhvc3QiIGF0IHJ1bnRpbWUuJyktPmVuZCgpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3BvcnQnKS0+aW5mbygnRGVmYXVsdHMgdG8gbnVsbCBhdCBydW50aW1lLicpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCd1c2VyJyktPmluZm8oJ0RlZmF1bHRzIHRvICJyb290IiBhdCBydW50aW1lLicpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdwYXNzd29yZCcpLT5pbmZvKCdEZWZhdWx0cyB0byBudWxsIGF0IHJ1bnRpbWUuJyktPmVuZCgpCiAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdvdmVycmlkZV91cmwnKS0+c2V0RGVwcmVjYXRlZCgKICAgICAgICAgICAgICAgICAgICAnZG9jdHJpbmUvZG9jdHJpbmUtYnVuZGxlJywKICAgICAgICAgICAgICAgICAgICAnMi40JywKICAgICAgICAgICAgICAgICAgICAnVGhlICJkb2N0cmluZS5kYmFsLm92ZXJyaWRlX3VybCIgY29uZmlndXJhdGlvbiBrZXkgaXMgZGVwcmVjYXRlZC4nLAogICAgICAgICAgICAgICAgKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZGJuYW1lX3N1ZmZpeCcpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdhcHBsaWNhdGlvbl9uYW1lJyktPmVuZCgpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2NoYXJzZXQnKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgncGF0aCcpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnbWVtb3J5JyktPmVuZCgpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3VuaXhfc29ja2V0JyktPmluZm8oJ1RoZSB1bml4IHNvY2tldCB0byB1c2UgZm9yIE15U1FMJyktPmVuZCgpCiAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdwZXJzaXN0ZW50JyktPmluZm8oJ1RydWUgdG8gdXNlIGFzIHBlcnNpc3RlbnQgY29ubmVjdGlvbiBmb3IgdGhlIGlibV9kYjIgZHJpdmVyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3Byb3RvY29sJyktPmluZm8oJ1RoZSBwcm90b2NvbCB0byB1c2UgZm9yIHRoZSBpYm1fZGIyIGRyaXZlciAoZGVmYXVsdCB0byBUQ1BJUCBpZiBvbWl0dGVkKScpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnc2VydmljZScpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdUcnVlIHRvIHVzZSBTRVJWSUNFX05BTUUgYXMgY29ubmVjdGlvbiBwYXJhbWV0ZXIgaW5zdGVhZCBvZiBTSUQgZm9yIE9yYWNsZScpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3NlcnZpY2VuYW1lJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oCiAgICAgICAgICAgICAgICAgICAgICAgICdPdmVycnVsZXMgZGJuYW1lIHBhcmFtZXRlciBpZiBnaXZlbiBhbmQgdXNlZCBhcyBTRVJWSUNFX05BTUUgb3IgU0lEIGNvbm5lY3Rpb24gcGFyYW1ldGVyICcgLgogICAgICAgICAgICAgICAgICAgICAgICAnZm9yIE9yYWNsZSBkZXBlbmRpbmcgb24gdGhlIHNlcnZpY2UgcGFyYW1ldGVyLicsCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzZXNzaW9uTW9kZScpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdUaGUgc2Vzc2lvbiBtb2RlIHRvIHVzZSBmb3IgdGhlIG9jaTggZHJpdmVyJykKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnc2VydmVyJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1RoZSBuYW1lIG9mIGEgcnVubmluZyBkYXRhYmFzZSBzZXJ2ZXIgdG8gY29ubmVjdCB0byBmb3IgU1FMIEFueXdoZXJlLicpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2RlZmF1bHRfZGJuYW1lJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oCiAgICAgICAgICAgICAgICAgICAgICAgICdPdmVycmlkZSB0aGUgZGVmYXVsdCBkYXRhYmFzZSAocG9zdGdyZXMpIHRvIGNvbm5lY3QgdG8gZm9yIFBvc3RncmVTUUwgY29ubmV4aW9uLicsCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzc2xtb2RlJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oCiAgICAgICAgICAgICAgICAgICAgICAgICdEZXRlcm1pbmVzIHdoZXRoZXIgb3Igd2l0aCB3aGF0IHByaW9yaXR5IGEgU1NMIFRDUC9JUCBjb25uZWN0aW9uIHdpbGwgYmUgbmVnb3RpYXRlZCB3aXRoICcgLgogICAgICAgICAgICAgICAgICAgICAgICAndGhlIHNlcnZlciBmb3IgUG9zdGdyZVNRTC4nLAogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnc3Nscm9vdGNlcnQnKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygKICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZSBuYW1lIG9mIGEgZmlsZSBjb250YWluaW5nIFNTTCBjZXJ0aWZpY2F0ZSBhdXRob3JpdHkgKENBKSBjZXJ0aWZpY2F0ZShzKS4gJyAuCiAgICAgICAgICAgICAgICAgICAgICAgICdJZiB0aGUgZmlsZSBleGlzdHMsIHRoZSBzZXJ2ZXJcJ3MgY2VydGlmaWNhdGUgd2lsbCBiZSB2ZXJpZmllZCB0byBiZSBzaWduZWQgYnkgb25lIG9mIHRoZXNlIGF1dGhvcml0aWVzLicsCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzc2xjZXJ0JykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oCiAgICAgICAgICAgICAgICAgICAgICAgICdUaGUgcGF0aCB0byB0aGUgU1NMIGNsaWVudCBjZXJ0aWZpY2F0ZSBmaWxlIGZvciBQb3N0Z3JlU1FMLicsCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzc2xrZXknKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygKICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZSBwYXRoIHRvIHRoZSBTU0wgY2xpZW50IGtleSBmaWxlIGZvciBQb3N0Z3JlU1FMLicsCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzc2xjcmwnKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygKICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZSBmaWxlIG5hbWUgb2YgdGhlIFNTTCBjZXJ0aWZpY2F0ZSByZXZvY2F0aW9uIGxpc3QgZm9yIFBvc3RncmVTUUwuJywKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdwb29sZWQnKS0+aW5mbygnVHJ1ZSB0byB1c2UgYSBwb29sZWQgc2VydmVyIHdpdGggdGhlIG9jaTgvcGRvX29yYWNsZSBkcml2ZXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ011bHRpcGxlQWN0aXZlUmVzdWx0U2V0cycpLT5pbmZvKCdDb25maWd1cmluZyBNdWx0aXBsZUFjdGl2ZVJlc3VsdFNldHMgZm9yIHRoZSBwZG9fc3Fsc3J2IGRyaXZlcicpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgndXNlX3NhdmVwb2ludHMnKS0+aW5mbygnVXNlIHNhdmVwb2ludHMgZm9yIG5lc3RlZCB0cmFuc2FjdGlvbnMnKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnaW5zdGFuY2VuYW1lJykKICAgICAgICAgICAgICAgIC0+aW5mbygKICAgICAgICAgICAgICAgICAgICAnT3B0aW9uYWwgcGFyYW1ldGVyLCBjb21wbGV0ZSB3aGV0aGVyIHRvIGFkZCB0aGUgSU5TVEFOQ0VfTkFNRSBwYXJhbWV0ZXIgaW4gdGhlIGNvbm5lY3Rpb24uJyAuCiAgICAgICAgICAgICAgICAgICAgJyBJdCBpcyBnZW5lcmFsbHkgdXNlZCB0byBjb25uZWN0IHRvIGFuIE9yYWNsZSBSQUMgc2VydmVyIHRvIHNlbGVjdCB0aGUgbmFtZScgLgogICAgICAgICAgICAgICAgICAgICcgb2YgYSBwYXJ0aWN1bGFyIGluc3RhbmNlLicsCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2Nvbm5lY3RzdHJpbmcnKQogICAgICAgICAgICAgICAgLT5pbmZvKAogICAgICAgICAgICAgICAgICAgICdDb21wbGV0ZSBFYXN5IENvbm5lY3QgY29ubmVjdGlvbiBkZXNjcmlwdG9yLCBzZWUgaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZGF0YWJhc2UvMTIxL05FVEFHL25hbWluZy5odG0uJyAuCiAgICAgICAgICAgICAgICAgICAgJ1doZW4gdXNpbmcgdGhpcyBvcHRpb24sIHlvdSB3aWxsIHN0aWxsIG5lZWQgdG8gcHJvdmlkZSB0aGUgdXNlciBhbmQgcGFzc3dvcmQgcGFyYW1ldGVycywgYnV0IHRoZSBvdGhlciAnIC4KICAgICAgICAgICAgICAgICAgICAncGFyYW1ldGVycyB3aWxsIG5vIGxvbmdlciBiZSB1c2VkLiBOb3RlIHRoYXQgd2hlbiB1c2luZyB0aGlzIHBhcmFtZXRlciwgdGhlIGdldEhvc3QgYW5kIGdldFBvcnQgbWV0aG9kcycgLgogICAgICAgICAgICAgICAgICAgICcgZnJvbSBEb2N0cmluZVxEQkFMXENvbm5lY3Rpb24gd2lsbCBubyBsb25nZXIgZnVuY3Rpb24gYXMgZXhwZWN0ZWQuJywKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgLT5pZlRydWUoc3RhdGljIGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhIGlzc2V0KCR2WydzZXNzaW9uTW9kZSddKSAmJiBpc3NldCgkdlsnc2Vzc2lvbl9tb2RlJ10pOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+dGhlbihzdGF0aWMgZnVuY3Rpb24gKCR2KSB7CiAgICAgICAgICAgICAgICAgICAgJHZbJ3Nlc3Npb25Nb2RlJ10gPSAkdlsnc2Vzc2lvbl9tb2RlJ107CiAgICAgICAgICAgICAgICAgICAgdW5zZXQoJHZbJ3Nlc3Npb25fbW9kZSddKTsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR2OwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgLT5pZlRydWUoc3RhdGljIGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhIGlzc2V0KCR2WydNdWx0aXBsZUFjdGl2ZVJlc3VsdFNldHMnXSkgJiYgaXNzZXQoJHZbJ211bHRpcGxlX2FjdGl2ZV9yZXN1bHRfc2V0cyddKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAtPnRoZW4oc3RhdGljIGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgICR2WydNdWx0aXBsZUFjdGl2ZVJlc3VsdFNldHMnXSA9ICR2WydtdWx0aXBsZV9hY3RpdmVfcmVzdWx0X3NldHMnXTsKICAgICAgICAgICAgICAgICAgICB1bnNldCgkdlsnbXVsdGlwbGVfYWN0aXZlX3Jlc3VsdF9zZXRzJ10pOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHY7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAtPmVuZCgpOwogICAgfQoKICAgIC8qKgogICAgICogQWRkIHRoZSBPUk0gc2VjdGlvbiB0byBjb25maWd1cmF0aW9uIHRyZWUKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiBhZGRPcm1TZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJG5vZGUpOiB2b2lkCiAgICB7CiAgICAgICAgLy8gS2V5IHRoYXQgc2hvdWxkIG5vdCBiZSByZXdyaXR0ZW4gdG8gdGhlIGVudGl0eS1tYW5hZ2VyIGNvbmZpZwogICAgICAgICRleGNsdWRlZEtleXMgPSBbCiAgICAgICAgICAgICdkZWZhdWx0X2VudGl0eV9tYW5hZ2VyJyA9PiB0cnVlLAogICAgICAgICAgICAnYXV0b19nZW5lcmF0ZV9wcm94eV9jbGFzc2VzJyA9PiB0cnVlLAogICAgICAgICAgICAnZW5hYmxlX2xhenlfZ2hvc3Rfb2JqZWN0cycgPT4gdHJ1ZSwKICAgICAgICAgICAgJ3Byb3h5X2RpcicgPT4gdHJ1ZSwKICAgICAgICAgICAgJ3Byb3h5X25hbWVzcGFjZScgPT4gdHJ1ZSwKICAgICAgICAgICAgJ3Jlc29sdmVfdGFyZ2V0X2VudGl0aWVzJyA9PiB0cnVlLAogICAgICAgICAgICAncmVzb2x2ZV90YXJnZXRfZW50aXR5JyA9PiB0cnVlLAogICAgICAgICAgICAnY29udHJvbGxlcl9yZXNvbHZlcicgPT4gdHJ1ZSwKICAgICAgICBdOwoKICAgICAgICAkbm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdvcm0nKQogICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZUcnVlKHN0YXRpYyBmdW5jdGlvbiAoJHYpIHVzZSAoJGV4Y2x1ZGVkS2V5cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEgZW1wdHkoJHYpICYmICEgY2xhc3NfZXhpc3RzKEVudGl0eU1hbmFnZXI6OmNsYXNzKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBMb2dpY0V4Y2VwdGlvbignVGhlIGRvY3RyaW5lL29ybSBwYWNrYWdlIGlzIHJlcXVpcmVkIHdoZW4gdGhlIGRvY3RyaW5lLm9ybSBjb25maWcgaXMgc2V0LicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIGlzX2FycmF5KCR2KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyYXlfa2V5X2V4aXN0cygnZW50aXR5X21hbmFnZXJzJywgJHYpIHx8IGFycmF5X2tleV9leGlzdHMoJ2VudGl0eV9tYW5hZ2VyJywgJHYpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElzIHRoZXJlIGFjdHVhbGx5IGFueXRoaW5nIHRvIHVzZSBvbmNlIGV4Y2x1ZGVkIGtleXMgYXJlIGNvbnNpZGVyZWQ/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGJvb2wpIGFycmF5X2RpZmZfa2V5KCR2LCAkZXhjbHVkZWRLZXlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKHN0YXRpYyBmdW5jdGlvbiAoJHYpIHVzZSAoJGV4Y2x1ZGVkS2V5cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVudGl0eU1hbmFnZXIgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR2IGFzICRrZXkgPT4gJHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRleGNsdWRlZEtleXNbJGtleV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVudGl0eU1hbmFnZXJbJGtleV0gPSAkdlska2V5XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNldCgkdlska2V5XSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZbJ2VudGl0eV9tYW5hZ2VycyddID0gWygkdlsnZGVmYXVsdF9lbnRpdHlfbWFuYWdlciddID8/ICdkZWZhdWx0JykgPT4gJGVudGl0eU1hbmFnZXJdOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkdjsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZGVmYXVsdF9lbnRpdHlfbWFuYWdlcicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2F1dG9fZ2VuZXJhdGVfcHJveHlfY2xhc3NlcycpLT5kZWZhdWx0VmFsdWUoZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0F1dG8gZ2VuZXJhdGUgbW9kZSBwb3NzaWJsZSB2YWx1ZXMgYXJlOiAiTkVWRVIiLCAiQUxXQVlTIiwgIkZJTEVfTk9UX0VYSVNUUyIsICJFVkFMIiwgIkZJTEVfTk9UX0VYSVNUU19PUl9DSEFOR0VEIicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnZhbGlkYXRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShmdW5jdGlvbiAoJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdlbmVyYXRpb25Nb2RlcyA9ICR0aGlzLT5nZXRBdXRvR2VuZXJhdGVNb2RlcygpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzX2ludCgkdikgJiYgaW5fYXJyYXkoJHYsICRnZW5lcmF0aW9uTW9kZXNbJ3ZhbHVlcyddLyphcnJheSgwLCAxLCAyLCAzKSovKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNfYm9vbCgkdikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzX3N0cmluZygkdikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbl9hcnJheShzdHJ0b3VwcGVyKCR2KSwgJGdlbmVyYXRpb25Nb2Rlc1snbmFtZXMnXS8qYXJyYXkoJ05FVkVSJywgJ0FMV0FZUycsICdGSUxFX05PVF9FWElTVFMnLCAnRVZBTCcsICdGSUxFX05PVF9FWElTVFNfT1JfQ0hBTkdFRCcpKi8pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbkludmFsaWQoJ0ludmFsaWQgYXV0byBnZW5lcmF0ZSBtb2RlIHZhbHVlICVzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFsaWRhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZTdHJpbmcoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbihzdGF0aWMgZnVuY3Rpb24gKCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudCgnRG9jdHJpbmVcT1JNXFByb3h5XFByb3h5RmFjdG9yeTo6QVVUT0dFTkVSQVRFXycgLiBzdHJ0b3VwcGVyKCR2KSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdlbmFibGVfbGF6eV9naG9zdF9vYmplY3RzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFZhbHVlKCEgbWV0aG9kX2V4aXN0cyhQcm94eUZhY3Rvcnk6OmNsYXNzLCAncmVzZXRVbmluaXRpYWxpemVkUHJveHknKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnRW5hYmxlcyB0aGUgbmV3IGltcGxlbWVudGF0aW9uIG9mIHByb3hpZXMgYmFzZWQgb24gbGF6eSBnaG9zdHMgaW5zdGVhZCBvZiB1c2luZyB0aGUgbGVnYWN5IGltcGxlbWVudGF0aW9uJykKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3Byb3h5X2RpcicpLT5kZWZhdWx0VmFsdWUoJyVrZXJuZWwuY2FjaGVfZGlyJS9kb2N0cmluZS9vcm0vUHJveGllcycpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3Byb3h5X25hbWVzcGFjZScpLT5kZWZhdWx0VmFsdWUoJ1Byb3hpZXMnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2NvbnRyb2xsZXJfcmVzb2x2ZXInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jYW5CZURpc2FibGVkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ2F1dG9fbWFwcGluZycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdE51bGwoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1NldCB0byBmYWxzZSB0byBkaXNhYmxlIHVzaW5nIHJvdXRlIHBsYWNlaG9sZGVycyBhcyBsb29rdXAgY3JpdGVyaWEgd2hlbiB0aGUgcHJpbWFyeSBrZXkgZG9lc25cJ3QgbWF0Y2ggdGhlIGFyZ3VtZW50IG5hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdldmljdF9jYWNoZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnU2V0IHRvIHRydWUgdG8gZmV0Y2ggdGhlIGVudGl0eSBmcm9tIHRoZSBkYXRhYmFzZSBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBjYWNoZSwgaWYgYW55JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0RmFsc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnZW50aXR5X21hbmFnZXInKQogICAgICAgICAgICAgICAgICAgIC0+YXBwZW5kKCR0aGlzLT5nZXRPcm1FbnRpdHlNYW5hZ2Vyc05vZGUoKSkKICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygncmVzb2x2ZV90YXJnZXRfZW50aXR5JywgJ3Jlc29sdmVfdGFyZ2V0X2VudGl0aWVzJykKICAgICAgICAgICAgICAgICAgICAtPmFwcGVuZCgkdGhpcy0+Z2V0T3JtVGFyZ2V0RW50aXR5UmVzb2x2ZXJOb2RlKCkpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgIC0+ZW5kKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gT1JNIHRhcmdldCBlbnRpdHkgcmVzb2x2ZXIgbm9kZQogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIGdldE9ybVRhcmdldEVudGl0eVJlc29sdmVyTm9kZSgpOiBOb2RlRGVmaW5pdGlvbgogICAgewogICAgICAgICR0cmVlQnVpbGRlciA9IG5ldyBUcmVlQnVpbGRlcigncmVzb2x2ZV90YXJnZXRfZW50aXRpZXMnKTsKICAgICAgICAkbm9kZSAgICAgICAgPSAkdHJlZUJ1aWxkZXItPmdldFJvb3ROb2RlKCk7CgogICAgICAgICRub2RlCiAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ2ludGVyZmFjZScpCiAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKQogICAgICAgICAgICAgICAgLT5jYW5ub3RCZUVtcHR5KCkKICAgICAgICAgICAgLT5lbmQoKTsKCiAgICAgICAgcmV0dXJuICRub2RlOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIE9STSBlbnRpdHkgbGlzdGVuZXIgbm9kZQogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIGdldE9ybUVudGl0eUxpc3RlbmVyc05vZGUoKTogTm9kZURlZmluaXRpb24KICAgIHsKICAgICAgICAkdHJlZUJ1aWxkZXIgPSBuZXcgVHJlZUJ1aWxkZXIoJ2VudGl0eV9saXN0ZW5lcnMnKTsKICAgICAgICAkbm9kZSAgICAgICAgPSAkdHJlZUJ1aWxkZXItPmdldFJvb3ROb2RlKCk7CgogICAgICAgICRub3JtYWxpemVyID0gc3RhdGljIGZ1bmN0aW9uICgkbWFwcGluZ3MpIHsKICAgICAgICAgICAgJGVudGl0aWVzID0gW107CgogICAgICAgICAgICBmb3JlYWNoICgkbWFwcGluZ3MgYXMgJGVudGl0eUNsYXNzID0+ICRtYXBwaW5nKSB7CiAgICAgICAgICAgICAgICAkbGlzdGVuZXJzID0gW107CgogICAgICAgICAgICAgICAgZm9yZWFjaCAoJG1hcHBpbmcgYXMgJGxpc3RlbmVyQ2xhc3MgPT4gJGxpc3RlbmVyRXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAkZXZlbnRzID0gW107CgogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRsaXN0ZW5lckV2ZW50IGFzICRldmVudFR5cGUgPT4gJGV2ZW50TWFwcGluZykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50TWFwcGluZyA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50TWFwcGluZyA9IFtudWxsXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGV2ZW50TWFwcGluZyBhcyAkbWV0aG9kKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnRzW10gPSBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnID0+ICRldmVudFR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21ldGhvZCcgPT4gJG1ldGhvZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRsaXN0ZW5lcnNbXSA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJyA9PiAkbGlzdGVuZXJDbGFzcywKICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50JyA9PiAkZXZlbnRzLAogICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJGVudGl0aWVzW10gPSBbCiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJyA9PiAkZW50aXR5Q2xhc3MsCiAgICAgICAgICAgICAgICAgICAgJ2xpc3RlbmVyJyA9PiAkbGlzdGVuZXJzLAogICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIFsnZW50aXRpZXMnID0+ICRlbnRpdGllc107CiAgICAgICAgfTsKCiAgICAgICAgJG5vZGUKICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgIC8vIFlhbWwgbm9ybWFsaXphdGlvbgogICAgICAgICAgICAgICAgLT5pZlRydWUoc3RhdGljIGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpc19hcnJheShyZXNldCgkdikpICYmIGlzX3N0cmluZyhrZXkocmVzZXQoJHYpKSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT50aGVuKCRub3JtYWxpemVyKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdlbnRpdHknLCAnZW50aXRpZXMnKQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdlbnRpdGllcycpCiAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnY2xhc3MnKQogICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdhcnJheScpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdsaXN0ZW5lcicpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2xpc3RlbmVycycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnY2xhc3MnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdhcnJheScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdldmVudCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2V2ZW50cycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ2FycmF5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3R5cGUnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnbWV0aG9kJyktPmRlZmF1bHROdWxsKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgIC0+ZW5kKCk7CgogICAgICAgIHJldHVybiAkbm9kZTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiBPUk0gZW50aXR5IG1hbmFnZXIgbm9kZQogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIGdldE9ybUVudGl0eU1hbmFnZXJzTm9kZSgpOiBBcnJheU5vZGVEZWZpbml0aW9uCiAgICB7CiAgICAgICAgJHRyZWVCdWlsZGVyID0gbmV3IFRyZWVCdWlsZGVyKCdlbnRpdHlfbWFuYWdlcnMnKTsKICAgICAgICAkbm9kZSAgICAgICAgPSAkdHJlZUJ1aWxkZXItPmdldFJvb3ROb2RlKCk7CgogICAgICAgICRub2RlCiAgICAgICAgICAgIC0+cmVxdWlyZXNBdExlYXN0T25lRWxlbWVudCgpCiAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAtPnByb3RvdHlwZSgnYXJyYXknKQogICAgICAgICAgICAgICAgLT5hZGREZWZhdWx0c0lmTm90U2V0KCkKICAgICAgICAgICAgICAgIC0+YXBwZW5kKCR0aGlzLT5nZXRPcm1DYWNoZURyaXZlck5vZGUoJ3F1ZXJ5X2NhY2hlX2RyaXZlcicpKQogICAgICAgICAgICAgICAgLT5hcHBlbmQoJHRoaXMtPmdldE9ybUNhY2hlRHJpdmVyTm9kZSgnbWV0YWRhdGFfY2FjaGVfZHJpdmVyJykpCiAgICAgICAgICAgICAgICAtPmFwcGVuZCgkdGhpcy0+Z2V0T3JtQ2FjaGVEcml2ZXJOb2RlKCdyZXN1bHRfY2FjaGVfZHJpdmVyJykpCiAgICAgICAgICAgICAgICAtPmFwcGVuZCgkdGhpcy0+Z2V0T3JtRW50aXR5TGlzdGVuZXJzTm9kZSgpKQogICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ3NjaGVtYV9pZ25vcmVfY2xhc3MnLCAnc2NoZW1hX2lnbm9yZV9jbGFzc2VzJykKICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnY29ubmVjdGlvbicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnY2xhc3NfbWV0YWRhdGFfZmFjdG9yeV9uYW1lJyktPmRlZmF1bHRWYWx1ZShDbGFzc01ldGFkYXRhRmFjdG9yeTo6Y2xhc3MpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZGVmYXVsdF9yZXBvc2l0b3J5X2NsYXNzJyktPmRlZmF1bHRWYWx1ZShFbnRpdHlSZXBvc2l0b3J5OjpjbGFzcyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdhdXRvX21hcHBpbmcnKS0+ZGVmYXVsdEZhbHNlKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCduYW1pbmdfc3RyYXRlZ3knKS0+ZGVmYXVsdFZhbHVlKCdkb2N0cmluZS5vcm0ubmFtaW5nX3N0cmF0ZWd5LmRlZmF1bHQnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3F1b3RlX3N0cmF0ZWd5JyktPmRlZmF1bHRWYWx1ZSgnZG9jdHJpbmUub3JtLnF1b3RlX3N0cmF0ZWd5LmRlZmF1bHQnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2VudGl0eV9saXN0ZW5lcl9yZXNvbHZlcicpLT5kZWZhdWx0TnVsbCgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgncmVwb3NpdG9yeV9mYWN0b3J5JyktPmRlZmF1bHRWYWx1ZSgnZG9jdHJpbmUub3JtLmNvbnRhaW5lcl9yZXBvc2l0b3J5X2ZhY3RvcnknKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnc2NoZW1hX2lnbm9yZV9jbGFzc2VzJykKICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3NjYWxhcicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdyZXBvcnRfZmllbGRzX3doZXJlX2RlY2xhcmVkJykKICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoISBjbGFzc19leGlzdHMoQW5ub3RhdGlvbkRyaXZlcjo6Y2xhc3MpKQogICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1NldCB0byAidHJ1ZSIgdG8gb3B0LWluIHRvIHRoZSBuZXcgbWFwcGluZyBkcml2ZXIgbW9kZSB0aGF0IHdhcyBhZGRlZCBpbiBEb2N0cmluZSBPUk0gMi4xNiBhbmQgd2lsbCBiZSBtYW5kYXRvcnkgaW4gT1JNIDMuMC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kb2N0cmluZS9vcm0vcHVsbC8xMDQ1NS4nKQogICAgICAgICAgICAgICAgICAgICAgICAtPnZhbGlkYXRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZUcnVlKHN0YXRpYyBmbiAoYm9vbCAkdik6IGJvb2wgPT4gISBjbGFzc19leGlzdHMoQW5ub3RhdGlvbkRyaXZlcjo6Y2xhc3MpICYmICEgJHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW5JbnZhbGlkKCdUaGUgc2V0dGluZyAicmVwb3J0X2ZpZWxkc193aGVyZV9kZWNsYXJlZCIgY2Fubm90IGJlIGRpc2FibGVkIGZvciBPUk0gMy4nKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ3ZhbGlkYXRlX3htbF9tYXBwaW5nJyktPmRlZmF1bHRGYWxzZSgpLT5pbmZvKCdTZXQgdG8gInRydWUiIHRvIG9wdC1pbiB0byB0aGUgbmV3IG1hcHBpbmcgZHJpdmVyIG1vZGUgdGhhdCB3YXMgYWRkZWQgaW4gRG9jdHJpbmUgT1JNIDIuMTQgYW5kIHdpbGwgYmUgbWFuZGF0b3J5IGluIE9STSAzLjAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZG9jdHJpbmUvb3JtL3B1bGwvNjcyOC4nKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdzZWNvbmRfbGV2ZWxfY2FjaGUnKQogICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXBwZW5kKCR0aGlzLT5nZXRPcm1DYWNoZURyaXZlck5vZGUoJ3JlZ2lvbl9jYWNoZV9kcml2ZXInKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgncmVnaW9uX2xvY2tfbGlmZXRpbWUnKS0+ZGVmYXVsdFZhbHVlKDYwKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ2xvZ19lbmFibGVkJyktPmRlZmF1bHRWYWx1ZSgkdGhpcy0+ZGVidWcpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdyZWdpb25fbGlmZXRpbWUnKS0+ZGVmYXVsdFZhbHVlKDM2MDApLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnZW5hYmxlZCcpLT5kZWZhdWx0VmFsdWUodHJ1ZSktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2ZhY3RvcnknKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygncmVnaW9uJykKICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgncmVnaW9ucycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnbmFtZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ2FycmF5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFwcGVuZCgkdGhpcy0+Z2V0T3JtQ2FjaGVEcml2ZXJOb2RlKCdjYWNoZV9kcml2ZXInKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnbG9ja19wYXRoJyktPmRlZmF1bHRWYWx1ZSgnJWtlcm5lbC5jYWNoZV9kaXIlL2RvY3RyaW5lL29ybS9zbGMvZmlsZWxvY2snKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnbG9ja19saWZldGltZScpLT5kZWZhdWx0VmFsdWUoNjApLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCd0eXBlJyktPmRlZmF1bHRWYWx1ZSgnZGVmYXVsdCcpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdsaWZldGltZScpLT5kZWZhdWx0VmFsdWUoMCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3NlcnZpY2UnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnbmFtZScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdsb2dnZXInKQogICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdsb2dnZXJzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnYXJyYXknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnbmFtZScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzZXJ2aWNlJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnaHlkcmF0b3InKQogICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2h5ZHJhdG9ycycpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnc2NhbGFyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ21hcHBpbmcnKQogICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ21hcHBpbmdzJykKICAgICAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnbmFtZScpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdhcnJheScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZTdHJpbmcoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbihzdGF0aWMgZnVuY3Rpb24gKCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbJ3R5cGUnID0+ICR2XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50cmVhdE51bGxMaWtlKFtdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50cmVhdEZhbHNlTGlrZShbJ21hcHBpbmcnID0+IGZhbHNlXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cGVyZm9ybU5vRGVlcE1lcmdpbmcoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdtYXBwaW5nJyktPmRlZmF1bHRWYWx1ZSh0cnVlKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3R5cGUnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2RpcicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnYWxpYXMnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3ByZWZpeCcpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ2lzX2J1bmRsZScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdkcWwnKQogICAgICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnc3RyaW5nX2Z1bmN0aW9uJykKICAgICAgICAgICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ251bWVyaWNfZnVuY3Rpb24nKQogICAgICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnZGF0ZXRpbWVfZnVuY3Rpb24nKQogICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdzdHJpbmdfZnVuY3Rpb25zJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnc2NhbGFyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnbnVtZXJpY19mdW5jdGlvbnMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdkYXRldGltZV9mdW5jdGlvbnMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdmaWx0ZXInKQogICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2ZpbHRlcnMnKQogICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1JlZ2lzdGVyIFNRTCBGaWx0ZXJzIGluIHRoZSBlbnRpdHkgbWFuYWdlcicpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnYXJyYXknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW4oc3RhdGljIGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWydjbGFzcycgPT4gJHZdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjb250ZW50IG9mIHRoZSBYTUwgbm9kZSBpcyByZXR1cm5lZCBhcyB0aGUgInZhbHVlIiBrZXkgc28gd2UgbmVlZCB0byByZW5hbWUgaXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShzdGF0aWMgZnVuY3Rpb24gKCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc19hcnJheSgkdikgJiYgaXNzZXQoJHZbJ3ZhbHVlJ10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKHN0YXRpYyBmdW5jdGlvbiAoJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZbJ2NsYXNzJ10gPSAkdlsndmFsdWUnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZXQoJHZbJ3ZhbHVlJ10pOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR2OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygncGFyYW1ldGVyJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnY2xhc3MnKS0+aXNSZXF1aXJlZCgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ2VuYWJsZWQnKS0+ZGVmYXVsdEZhbHNlKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3BhcmFtZXRlcnMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3ZhcmlhYmxlJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpOwoKICAgICAgICByZXR1cm4gJG5vZGU7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gYSBPUk0gY2FjaGUgZHJpdmVyIG5vZGUgZm9yIGFuIGdpdmVuIGVudGl0eSBtYW5hZ2VyCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gZ2V0T3JtQ2FjaGVEcml2ZXJOb2RlKHN0cmluZyAkbmFtZSk6IEFycmF5Tm9kZURlZmluaXRpb24KICAgIHsKICAgICAgICAkdHJlZUJ1aWxkZXIgPSBuZXcgVHJlZUJ1aWxkZXIoJG5hbWUpOwogICAgICAgICRub2RlICAgICAgICA9ICR0cmVlQnVpbGRlci0+Z2V0Um9vdE5vZGUoKTsKCiAgICAgICAgJG5vZGUKICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgIC0+aWZTdHJpbmcoKQogICAgICAgICAgICAgICAgLT50aGVuKHN0YXRpYyBmdW5jdGlvbiAoJHYpOiBhcnJheSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsndHlwZScgPT4gJHZdOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgndHlwZScpLT5kZWZhdWx0TnVsbCgpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdpZCcpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdwb29sJyktPmVuZCgpCiAgICAgICAgICAgIC0+ZW5kKCk7CgogICAgICAgIGlmICgkbmFtZSAhPT0gJ21ldGFkYXRhX2NhY2hlX2RyaXZlcicpIHsKICAgICAgICAgICAgJG5vZGUtPmFkZERlZmF1bHRzSWZOb3RTZXQoKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkbm9kZTsKICAgIH0KCiAgICAvKioKICAgICAqIEZpbmQgcHJveHkgYXV0byBnZW5lcmF0ZSBtb2RlcyBmb3IgdGhlaXIgbmFtZXMgYW5kIGludCB2YWx1ZXMKICAgICAqCiAgICAgKiBAcmV0dXJuIGFycmF5e25hbWVzOiBsaXN0PHN0cmluZz4sIHZhbHVlczogbGlzdDxpbnQ+fQogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIGdldEF1dG9HZW5lcmF0ZU1vZGVzKCk6IGFycmF5CiAgICB7CiAgICAgICAgJGNvbnN0UHJlZml4ID0gJ0FVVE9HRU5FUkFURV8nOwogICAgICAgICRwcmVmaXhMZW4gICA9IHN0cmxlbigkY29uc3RQcmVmaXgpOwogICAgICAgICRyZWZDbGFzcyAgICA9IG5ldyBSZWZsZWN0aW9uQ2xhc3MoUHJveHlGYWN0b3J5OjpjbGFzcyk7CiAgICAgICAgJGNvbnN0c0FycmF5ID0gJHJlZkNsYXNzLT5nZXRDb25zdGFudHMoKTsKICAgICAgICAkbmFtZXNBcnJheSAgPSBbXTsKICAgICAgICAkdmFsdWVzQXJyYXkgPSBbXTsKCiAgICAgICAgZm9yZWFjaCAoJGNvbnN0c0FycmF5IGFzICRrZXkgPT4gJHZhbHVlKSB7CiAgICAgICAgICAgIGlmIChzdHJwb3MoJGtleSwgJGNvbnN0UHJlZml4KSAhPT0gMCkgewogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRuYW1lc0FycmF5W10gID0gc3Vic3RyKCRrZXksICRwcmVmaXhMZW4pOwogICAgICAgICAgICAkdmFsdWVzQXJyYXlbXSA9IChpbnQpICR2YWx1ZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICduYW1lcycgPT4gJG5hbWVzQXJyYXksCiAgICAgICAgICAgICd2YWx1ZXMnID0+ICR2YWx1ZXNBcnJheSwKICAgICAgICBdOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gZ2V0RGVmYXVsdFNjaGVtYU1hbmFnZXJGYWN0b3J5KCk6IHN0cmluZwogICAgewogICAgICAgIGlmIChjbGFzc19leGlzdHMoTGVnYWN5U2NoZW1hTWFuYWdlckZhY3Rvcnk6OmNsYXNzKSkgewogICAgICAgICAgICByZXR1cm4gJ2RvY3RyaW5lLmRiYWwubGVnYWN5X3NjaGVtYV9tYW5hZ2VyX2ZhY3RvcnknOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICdkb2N0cmluZS5kYmFsLmRlZmF1bHRfc2NoZW1hX21hbmFnZXJfZmFjdG9yeSc7CiAgICB9Cn0KIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MTp7czo1MToiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NTE6IlxEb2N0cmluZVxCdW5kbGVcRG9jdHJpbmVCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJEZXBlbmRlbmN5SW5qZWN0aW9uIjt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjE6e3M6NjU6IlxEb2N0cmluZVxCdW5kbGVcRG9jdHJpbmVCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXyI6MTQ6e3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY1OiJcRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEzOiJDb25maWd1cmF0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGRvY0Jsb2NrIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2siOjc6e3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAc3VtbWFyeSI7czo2NDoiVGhpcyBjbGFzcyBjb250YWlucyB0aGUgY29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGJ1bmRsZSI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czoxMTE6IlRoaXMgaW5mb3JtYXRpb24gaXMgc29sZWx5IHJlc3BvbnNpYmxlIGZvciBob3cgdGhlIGRpZmZlcmVudCBjb25maWd1cmF0aW9uCnNlY3Rpb25zIGFyZSBub3JtYWxpemVkLCBhbmQgbWVyZ2VkLiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjE6e2k6MDtPOjQ2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xHZW5lcmljIjoyOntzOjc6IgAqAG5hbWUiO3M6NToiZmluYWwiO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjk6InNpbmNlIDIuOSI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjUwOiJEb2N0cmluZVxCdW5kbGVcRG9jdHJpbmVCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvbiI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MTM6e3M6MjY6IkxlZ2FjeVNjaGVtYU1hbmFnZXJGYWN0b3J5IjtzOjQ3OiJEb2N0cmluZVxEQkFMXFNjaGVtYVxMZWdhY3lTY2hlbWFNYW5hZ2VyRmFjdG9yeSI7czoxMzoiRW50aXR5TWFuYWdlciI7czoyNjoiRG9jdHJpbmVcT1JNXEVudGl0eU1hbmFnZXIiO3M6MTY6IkVudGl0eVJlcG9zaXRvcnkiO3M6Mjk6IkRvY3RyaW5lXE9STVxFbnRpdHlSZXBvc2l0b3J5IjtzOjIwOiJDbGFzc01ldGFkYXRhRmFjdG9yeSI7czo0MToiRG9jdHJpbmVcT1JNXE1hcHBpbmdcQ2xhc3NNZXRhZGF0YUZhY3RvcnkiO3M6MTY6IkFubm90YXRpb25Ecml2ZXIiO3M6NDQ6IkRvY3RyaW5lXE9STVxNYXBwaW5nXERyaXZlclxBbm5vdGF0aW9uRHJpdmVyIjtzOjEyOiJQcm94eUZhY3RvcnkiO3M6MzE6IkRvY3RyaW5lXE9STVxQcm94eVxQcm94eUZhY3RvcnkiO3M6MjQ6IkludmFsaWRBcmd1bWVudEV4Y2VwdGlvbiI7czoyNDoiSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uIjtzOjE1OiJSZWZsZWN0aW9uQ2xhc3MiO3M6MTU6IlJlZmxlY3Rpb25DbGFzcyI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7czo2MzoiU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjE0OiJOb2RlRGVmaW5pdGlvbiI7czo1ODoiU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxOb2RlRGVmaW5pdGlvbiI7czoxMToiVHJlZUJ1aWxkZXIiO3M6NTU6IlN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcVHJlZUJ1aWxkZXIiO3M6MjI6IkNvbmZpZ3VyYXRpb25JbnRlcmZhY2UiO3M6NTg6IlN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXENvbmZpZ3VyYXRpb25JbnRlcmZhY2UiO3M6MTQ6IkxvZ2ljRXhjZXB0aW9uIjtzOjYyOiJTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXEV4Y2VwdGlvblxMb2dpY0V4Y2VwdGlvbiI7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwByZWFkT25seSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBwYXJlbnQiO047czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGltcGxlbWVudHMiO2E6MTp7czo1OToiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXENvbmZpZ3VyYXRpb25JbnRlcmZhY2UiO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo1OToiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXENvbmZpZ3VyYXRpb25JbnRlcmZhY2UiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoyMjoiQ29uZmlndXJhdGlvbkludGVyZmFjZSI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AY29uc3RhbnRzIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcHJvcGVydGllcyI7YToxOntzOjczOiJcRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6JGRlYnVnIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5IjoxMTp7czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo3MzoiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OiRkZWJ1ZyI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjU6ImRlYnVnIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZG9jQmxvY2siO047czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZXMiO2E6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGRlZmF1bHQiO047czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAc3RhdGljIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo1NTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NTU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEJvb2xlYW4iOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQByZWFkT25seSI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AG1ldGFkYXRhIjthOjA6e319fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRob2RzIjthOjEyOntzOjgwOiJcRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6X19jb25zdHJ1Y3QoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjA6IiI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czowOiIiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YToxOntpOjA7Tzo0NDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0iOjY6e3M6NzoiACoAbmFtZSI7czo1OiJwYXJhbSI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6Mjk6IldoZXRoZXIgdG8gdXNlIHRoZSBkZWJ1ZyBtb2RlIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjc6IgAqAHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xCb29sZWFuIjowOnt9czo1ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAHZhcmlhYmxlTmFtZSI7czo1OiJkZWJ1ZyI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAGlzVmFyaWFkaWMiO2I6MDtzOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0AaXNSZWZlcmVuY2UiO2I6MDt9fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7cjozMDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjgwOiJcRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6X19jb25zdHJ1Y3QoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJfX2NvbnN0cnVjdCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo1OiJkZWJ1ZyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEJvb2xlYW4iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo1ODtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aToxNjcwO31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjYxO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjE3NTI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAG1ldGFkYXRhIjthOjA6e319czo4OToiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmdldENvbmZpZ1RyZWVCdWlsZGVyKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg5OiJcRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6Z2V0Q29uZmlnVHJlZUJ1aWxkZXIoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjIwOiJnZXRDb25maWdUcmVlQnVpbGRlciI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo2MztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aToxNzU5O31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjcyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjIwMzk7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NTY6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXFRyZWVCdWlsZGVyIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTE6IlRyZWVCdWlsZGVyIjt9fXM6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9fXM6ODM6IlxEb2N0cmluZVxCdW5kbGVcRG9jdHJpbmVCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGREYmFsU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6Mzg6IkFkZCBEQkFMIHNlY3Rpb24gdG8gY29uZmlndXJhdGlvbiB0cmVlIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6MzA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo4MzoiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZERiYWxTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNDoiYWRkRGJhbFNlY3Rpb24iO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjQ6Im5vZGUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjc3O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjIxMDg7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTczO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjY3ODg7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcVm9pZF8iOjA6e31zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX1zOjkxOiJcRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6Z2V0RGJhbENvbm5lY3Rpb25zTm9kZSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MzI6IlJldHVybiB0aGUgZGJhbCBjb25uZWN0aW9ucyBub2RlIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6MzA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5MToiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmdldERiYWxDb25uZWN0aW9uc05vZGUoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjIyOiJnZXREYmFsQ29ubmVjdGlvbnNOb2RlIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxNzg7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6Njg1MTt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyNzk7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MTEzNTg7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX1zOjkyOiJcRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6Y29uZmlndXJlRGJhbERyaXZlck5vZGUoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjY0OiJBZGRzIGNvbmZpZyBrZXlzIHJlbGF0ZWQgdG8gcGFyYW1zIHByb2Nlc3NlZCBieSB0aGUgREJBTCBkcml2ZXJzIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjU2OiJUaGVzZSBrZXlzIGFyZSBhdmFpbGFibGUgZm9yIHJlcGxpY2EgY29uZmlndXJhdGlvbnMgdG9vLiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6MzA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5MjoiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmNvbmZpZ3VyZURiYWxEcml2ZXJOb2RlKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoyMzoiY29uZmlndXJlRGJhbERyaXZlck5vZGUiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjQ6Im5vZGUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI4NjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aToxMTUyNDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo0MjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MTg2Mjg7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcVm9pZF8iOjA6e31zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX1zOjgyOiJcRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkT3JtU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NDE6IkFkZCB0aGUgT1JNIHNlY3Rpb24gdG8gY29uZmlndXJhdGlvbiB0cmVlIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6MzA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo4MjoiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZE9ybVNlY3Rpb24oKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEzOiJhZGRPcm1TZWN0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo0OiJub2RlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo0MjU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MTg3MDA7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NTM0O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjI0NDY1O31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFZvaWRfIjowOnt9czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAG1ldGFkYXRhIjthOjA6e319czo5OToiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmdldE9ybVRhcmdldEVudGl0eVJlc29sdmVyTm9kZSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6Mzg6IlJldHVybiBPUk0gdGFyZ2V0IGVudGl0eSByZXNvbHZlciBub2RlIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6MzA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5OToiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmdldE9ybVRhcmdldEVudGl0eVJlc29sdmVyTm9kZSgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MzA6ImdldE9ybVRhcmdldEVudGl0eVJlc29sdmVyTm9kZSI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NTM5O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjI0NTM0O31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjU1MTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aToyNDkwMTt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo1OToiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcTm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNDoiTm9kZURlZmluaXRpb24iO319czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAG1ldGFkYXRhIjthOjA6e319czo5NDoiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmdldE9ybUVudGl0eUxpc3RlbmVyc05vZGUoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjMxOiJSZXR1cm4gT1JNIGVudGl0eSBsaXN0ZW5lciBub2RlIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6MzA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5NDoiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmdldE9ybUVudGl0eUxpc3RlbmVyc05vZGUoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjI1OiJnZXRPcm1FbnRpdHlMaXN0ZW5lcnNOb2RlIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo1NTY7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MjQ5NjM7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NjM1O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjI3OTQ3O31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjU5OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE0OiJOb2RlRGVmaW5pdGlvbiI7fX1zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX1zOjkzOiJcRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6Z2V0T3JtRW50aXR5TWFuYWdlcnNOb2RlKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2siOjc6e3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAc3VtbWFyeSI7czozMDoiUmV0dXJuIE9STSBlbnRpdHkgbWFuYWdlciBub2RlIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6MzA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5MzoiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmdldE9ybUVudGl0eU1hbmFnZXJzTm9kZSgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MjQ6ImdldE9ybUVudGl0eU1hbmFnZXJzTm9kZSI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NjQwO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjI4MDA4O31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjgwODtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTozNzM3MTt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9fXM6OTA6IlxEb2N0cmluZVxCdW5kbGVcRG9jdHJpbmVCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjpnZXRPcm1DYWNoZURyaXZlck5vZGUoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjU4OiJSZXR1cm4gYSBPUk0gY2FjaGUgZHJpdmVyIG5vZGUgZm9yIGFuIGdpdmVuIGVudGl0eSBtYW5hZ2VyIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6MzA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5MDoiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmdldE9ybUNhY2hlRHJpdmVyTm9kZSgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MjE6ImdldE9ybUNhY2hlRHJpdmVyTm9kZSI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NDoibmFtZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo4MTM7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6Mzc0NjA7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6ODM2O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjM4MTc0O31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO319czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAG1ldGFkYXRhIjthOjA6e319czo4OToiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmdldEF1dG9HZW5lcmF0ZU1vZGVzKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2siOjc6e3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAc3VtbWFyeSI7czo2MToiRmluZCBwcm94eSBhdXRvIGdlbmVyYXRlIG1vZGVzIGZvciB0aGVpciBuYW1lcyBhbmQgaW50IHZhbHVlcyI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czowOiIiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YToxOntpOjA7Tzo0NjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUmV0dXJuXyI6Mzp7czo3OiIAKgBuYW1lIjtzOjY6InJldHVybiI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjc6IgAqAHR5cGUiO086NDc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQc2V1ZG9UeXBlc1xBcnJheVNoYXBlIjoxOntzOjU0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBzZXVkb1R5cGVzXEFycmF5U2hhcGUAaXRlbXMiO2E6Mjp7aTowO086NTE6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQc2V1ZG9UeXBlc1xBcnJheVNoYXBlSXRlbSI6Mzp7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQc2V1ZG9UeXBlc1xBcnJheVNoYXBlSXRlbQBrZXkiO3M6NToibmFtZXMiO3M6NTg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUHNldWRvVHlwZXNcQXJyYXlTaGFwZUl0ZW0AdmFsdWUiO086NDI6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQc2V1ZG9UeXBlc1xMaXN0XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NjE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUHNldWRvVHlwZXNcQXJyYXlTaGFwZUl0ZW0Ab3B0aW9uYWwiO2I6MDt9aToxO086NTE6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQc2V1ZG9UeXBlc1xBcnJheVNoYXBlSXRlbSI6Mzp7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQc2V1ZG9UeXBlc1xBcnJheVNoYXBlSXRlbQBrZXkiO3M6NjoidmFsdWVzIjtzOjU4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBzZXVkb1R5cGVzXEFycmF5U2hhcGVJdGVtAHZhbHVlIjtPOjQyOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUHNldWRvVHlwZXNcTGlzdF8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fXM6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjYxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBzZXVkb1R5cGVzXEFycmF5U2hhcGVJdGVtAG9wdGlvbmFsIjtiOjA7fX19fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6MzA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo4OToiXERvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmdldEF1dG9HZW5lcmF0ZU1vZGVzKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoyMDoiZ2V0QXV0b0dlbmVyYXRlTW9kZXMiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjg0MztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTozODMzNDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo4NjU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MzkwMDE7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX1zOjk5OiJcRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6Z2V0RGVmYXVsdFNjaGVtYU1hbmFnZXJGYWN0b3J5KCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk5OiJcRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6Z2V0RGVmYXVsdFNjaGVtYU1hbmFnZXJGYWN0b3J5KCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czozMDoiZ2V0RGVmYXVsdFNjaGVtYU1hbmFnZXJGYWN0b3J5Ijt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo4Njc7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MzkwMDg7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6ODc0O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjM5Mjc5O31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX19czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHVzZWRUcmFpdHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NTM7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo4NzU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAG1ldGFkYXRhIjthOjA6e319fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";