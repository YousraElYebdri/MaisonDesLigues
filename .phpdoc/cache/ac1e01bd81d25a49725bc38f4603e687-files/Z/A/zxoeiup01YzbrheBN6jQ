1717368421
ac1e01bd81d25a49725bc38f4603e687-phpdoc%3A3998b1cca4f9ed339c911b2f72793fc7-664c18c8e0d64b9fa530deedb7e210fd
s:146568:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjY2NGMxOGM4ZTBkNjRiOWZhNTMwZGVlZGI3ZTIxMGZkIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MzY6Ijg0NTgwNDJiY2ZlNzJjZTUwMWJjMTMyMjc4OTJhNWZmLnBocCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjU4OiJ2YXIvY2FjaGUvZGV2L3R3aWcvODQvODQ1ODA0MmJjZmU3MmNlNTAxYmMxMzIyNzg5MmE1ZmYucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czo5MDMyMToiPD9waHAKCnVzZSBUd2lnXEVudmlyb25tZW50Owp1c2UgVHdpZ1xFcnJvclxMb2FkZXJFcnJvcjsKdXNlIFR3aWdcRXJyb3JcUnVudGltZUVycm9yOwp1c2UgVHdpZ1xFeHRlbnNpb25cQ29yZUV4dGVuc2lvbjsKdXNlIFR3aWdcRXh0ZW5zaW9uXFNhbmRib3hFeHRlbnNpb247CnVzZSBUd2lnXE1hcmt1cDsKdXNlIFR3aWdcU2FuZGJveFxTZWN1cml0eUVycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZFRhZ0Vycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZEZpbHRlckVycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZEZ1bmN0aW9uRXJyb3I7CnVzZSBUd2lnXFNvdXJjZTsKdXNlIFR3aWdcVGVtcGxhdGU7CgovKiBAV2ViUHJvZmlsZXIvUHJvZmlsZXIvYmFzZV9qcy5odG1sLnR3aWcgKi8KY2xhc3MgX19Ud2lnVGVtcGxhdGVfZTY4OTFlNWI3NmFlNDBmMTBkNjI0YWFiMDUyOGM5OGMgZXh0ZW5kcyBUZW1wbGF0ZQp7CiAgICBwcml2YXRlICRzb3VyY2U7CiAgICBwcml2YXRlICRtYWNyb3MgPSBbXTsKCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoRW52aXJvbm1lbnQgJGVudikKICAgIHsKICAgICAgICBwYXJlbnQ6Ol9fY29uc3RydWN0KCRlbnYpOwoKICAgICAgICAkdGhpcy0+c291cmNlID0gJHRoaXMtPmdldFNvdXJjZUNvbnRleHQoKTsKCiAgICAgICAgJHRoaXMtPnBhcmVudCA9IGZhbHNlOwoKICAgICAgICAkdGhpcy0+YmxvY2tzID0gWwogICAgICAgIF07CiAgICB9CgogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIGRvRGlzcGxheShhcnJheSAkY29udGV4dCwgYXJyYXkgJGJsb2NrcyA9IFtdKQogICAgewogICAgICAgICRtYWNyb3MgPSAkdGhpcy0+bWFjcm9zOwogICAgICAgICRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJ1bmRsZVxcV2ViUHJvZmlsZXJCdW5kbGVcXFR3aWdcXFdlYlByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDItPmVudGVyKCRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJ0ZW1wbGF0ZSIsICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvYmFzZV9qcy5odG1sLnR3aWciKSk7CgogICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJyaWRnZVxcVHdpZ1xcRXh0ZW5zaW9uXFxQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmLT5lbnRlcigkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zl9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAidGVtcGxhdGUiLCAiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2Jhc2VfanMuaHRtbC50d2lnIikpOwoKICAgICAgICAvLyBsaW5lIDMKICAgICAgICB5aWVsZCAiPHNjcmlwdCI7CiAgICAgICAgaWYgKChhcnJheV9rZXlfZXhpc3RzKCJjc3Bfc2NyaXB0X25vbmNlIiwgJGNvbnRleHQpICYmIChpc3NldCgkY29udGV4dFsiY3NwX3NjcmlwdF9ub25jZSJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjc3Bfc2NyaXB0X25vbmNlIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNzcF9zY3JpcHRfbm9uY2UiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjc3Bfc2NyaXB0X25vbmNlIiBkb2VzIG5vdCBleGlzdC4nLCAzLCAkdGhpcy0+c291cmNlKTsgfSkoKSkpKSB7CiAgICAgICAgICAgIHlpZWxkICIgbm9uY2U9XCIiOwogICAgICAgICAgICB5aWVsZCBUd2lnXEV4dGVuc2lvblxFc2NhcGVyRXh0ZW5zaW9uOjplc2NhcGUoJHRoaXMtPmVudiwgKGlzc2V0KCRjb250ZXh0WyJjc3Bfc2NyaXB0X25vbmNlIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNzcF9zY3JpcHRfbm9uY2UiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY3NwX3NjcmlwdF9ub25jZSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNzcF9zY3JpcHRfbm9uY2UiIGRvZXMgbm90IGV4aXN0LicsIDMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgeWllbGQgIlwiIjsKICAgICAgICB9CiAgICAgICAgeWllbGQgIj4vKjwhW0NEQVRBWyovCiAgICAiOwogICAgICAgIC8vIGxpbmUgNwogICAgICAgIHlpZWxkICIKaWYgKHR5cGVvZiBTZmpzID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgU2Zqcy5sb2FkVG9vbGJhciA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgIFNmanMgPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7CgogICAgICAgIGlmICgnY2xhc3NMaXN0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHsKICAgICAgICAgICAgdmFyIGhhc0NsYXNzID0gZnVuY3Rpb24gKGVsLCBjc3NDbGFzcykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNzc0NsYXNzKTsgfTsKICAgICAgICAgICAgdmFyIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24oZWwsIGNzc0NsYXNzKSB7IGVsLmNsYXNzTGlzdC5yZW1vdmUoY3NzQ2xhc3MpOyB9OwogICAgICAgICAgICB2YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbihlbCwgY3NzQ2xhc3MpIHsgZWwuY2xhc3NMaXN0LmFkZChjc3NDbGFzcyk7IH07CiAgICAgICAgICAgIHZhciB0b2dnbGVDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjc3NDbGFzcykgeyBlbC5jbGFzc0xpc3QudG9nZ2xlKGNzc0NsYXNzKTsgfTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgaGFzQ2xhc3MgPSBmdW5jdGlvbiAoZWwsIGNzc0NsYXNzKSB7IHJldHVybiBlbC5jbGFzc05hbWUubWF0Y2gobmV3IFJlZ0V4cCgnXFxcXGInICsgY3NzQ2xhc3MgKyAnXFxcXGInKSk7IH07CiAgICAgICAgICAgIHZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjc3NDbGFzcykgeyBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcYicgKyBjc3NDbGFzcyArICdcXFxcYicpLCAnICcpOyB9OwogICAgICAgICAgICB2YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbihlbCwgY3NzQ2xhc3MpIHsgaWYgKCFoYXNDbGFzcyhlbCwgY3NzQ2xhc3MpKSB7IGVsLmNsYXNzTmFtZSArPSBcIiBcIiArIGNzc0NsYXNzOyB9IH07CiAgICAgICAgICAgIHZhciB0b2dnbGVDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjc3NDbGFzcykgeyBoYXNDbGFzcyhlbCwgY3NzQ2xhc3MpID8gcmVtb3ZlQ2xhc3MoZWwsIGNzc0NsYXNzKSA6IGFkZENsYXNzKGVsLCBjc3NDbGFzcyk7IH07CiAgICAgICAgfQoKICAgICAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307CgogICAgICAgIHZhciBwcm9maWxlclN0b3JhZ2VLZXkgPSAnc3ltZm9ueS9wcm9maWxlci8nOwoKICAgICAgICB2YXIgYWRkRXZlbnRMaXN0ZW5lcjsKCiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgaWYgKCEoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGVsKSkgewogICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgY2FsbGJhY2spOwogICAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnROYW1lLCBjYWxsYmFjaykgewogICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGZhbHNlKTsKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIGlmIChuYXZpZ2F0b3IuY2xpcGJvYXJkKSB7CiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNsaXBib2FyZC10ZXh0XScpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgJ2hpZGRlbicpOwogICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNsaXBib2FyZC10ZXh0JykpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgcmVxdWVzdCA9IGZ1bmN0aW9uKHVybCwgb25TdWNjZXNzLCBvbkVycm9yLCBwYXlsb2FkLCBvcHRpb25zLCB0cmllcykgewogICAgICAgICAgICB2YXIgeGhyID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0ID8gbmV3IFhNTEh0dHBSZXF1ZXN0KCkgOiBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTEhUVFAnKTsKICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgICAgIG9wdGlvbnMucmV0cnkgPSBvcHRpb25zLnJldHJ5IHx8IGZhbHNlOwogICAgICAgICAgICB0cmllcyA9IHRyaWVzIHx8IDE7CiAgICAgICAgICAgIC8qIHRoaXMgZGVsYXlzIGZvciAxMjUsIDM3NSwgNjI1LCA4NzUsIGFuZCAxMDAwLCAuLi4gKi8KICAgICAgICAgICAgdmFyIGRlbGF5ID0gdHJpZXMgPCA1ID8gKHRyaWVzIC0gMC41KSAqIDI1MCA6IDEwMDA7CgogICAgICAgICAgICB4aHIub3BlbihvcHRpb25zLm1ldGhvZCB8fCAnR0VUJywgdXJsLCB0cnVlKTsKICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtUmVxdWVzdGVkLVdpdGgnLCAnWE1MSHR0cFJlcXVlc3QnKTsKICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKHN0YXRlKSB7CiAgICAgICAgICAgICAgICBpZiAoNCAhPT0geGhyLnJlYWR5U3RhdGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSA0MDQgJiYgb3B0aW9ucy5yZXRyeSAmJiAhb3B0aW9ucy5zdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RvcCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QodXJsLCBvblN1Y2Nlc3MsIG9uRXJyb3IsIHBheWxvYWQsIG9wdGlvbnMsIHRyaWVzICsgMSk7CiAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXkpOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoMjAwID09PSB4aHIuc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgKG9uU3VjY2VzcyB8fCBub29wKSh4aHIpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAob25FcnJvciB8fCBub29wKSh4aHIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgaWYgKG9wdGlvbnMub25TZW5kKSB7CiAgICAgICAgICAgICAgICBvcHRpb25zLm9uU2VuZCh0cmllcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHhoci5zZW5kKHBheWxvYWQgfHwgJycpOwogICAgICAgIH07CgogICAgICAgIHZhciBnZXRQcmVmZXJlbmNlID0gZnVuY3Rpb24obmFtZSkgewogICAgICAgICAgICBpZiAoIXdpbmRvdy5sb2NhbFN0b3JhZ2UpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvZmlsZXJTdG9yYWdlS2V5ICsgbmFtZSk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHNldFByZWZlcmVuY2UgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICBpZiAoIXdpbmRvdy5sb2NhbFN0b3JhZ2UpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShwcm9maWxlclN0b3JhZ2VLZXkgKyBuYW1lLCB2YWx1ZSk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHJlcXVlc3RTdGFjayA9IFtdOwoKICAgICAgICB2YXIgZXh0cmFjdEhlYWRlcnMgPSBmdW5jdGlvbih4aHIsIHN0YWNrRWxlbWVudCkgewogICAgICAgICAgICAvKiBIZXJlIHdlIGF2b2lkIHRvIGNhbGwgeGhyLmdldFJlc3BvbnNlSGVhZGVyIGluIG9yZGVyIHRvICovCiAgICAgICAgICAgIC8qIHByZXZlbnQgcG9sbHV0aW5nIHRoZSBjb25zb2xlIHdpdGggQ09SUyBzZWN1cml0eSBlcnJvcnMgKi8KICAgICAgICAgICAgdmFyIGFsbEhlYWRlcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCk7CiAgICAgICAgICAgIHZhciByZXQ7CgogICAgICAgICAgICBpZiAocmV0ID0gYWxsSGVhZGVycy5tYXRjaCgvXngtZGVidWctdG9rZW46XFxzKyguKilcJC9pbSkpIHsKICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5wcm9maWxlID0gcmV0WzFdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyZXQgPSBhbGxIZWFkZXJzLm1hdGNoKC9eeC1kZWJ1Zy10b2tlbi1saW5rOlxccysoLiopXCQvaW0pKSB7CiAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQucHJvZmlsZXJVcmwgPSByZXRbMV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJldCA9IGFsbEhlYWRlcnMubWF0Y2goL15TeW1mb255LURlYnVnLVRvb2xiYXItUmVwbGFjZTpcXHMrKC4qKVwkL2ltKSkgewogICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnRvb2xiYXJSZXBsYWNlRmluaXNoZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC50b29sYmFyUmVwbGFjZSA9ICcxJyA9PT0gcmV0WzFdOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHN1Y2Nlc3NTdHJlYWsgPSA0OwogICAgICAgIHZhciBwZW5kaW5nUmVxdWVzdHMgPSAwOwogICAgICAgIHZhciByZW5kZXJBamF4UmVxdWVzdHMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIHJlcXVlc3RDb3VudGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYWpheC1yZXF1ZXN0LWNvdW50ZXInKTsKICAgICAgICAgICAgaWYgKCFyZXF1ZXN0Q291bnRlcikgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlcXVlc3RDb3VudGVyLnRleHRDb250ZW50ID0gcmVxdWVzdFN0YWNrLmxlbmd0aDsKCiAgICAgICAgICAgIHZhciBpbmZvU3BhbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2YtdG9vbGJhci1hamF4LWluZm9cIik7CiAgICAgICAgICAgIGlmIChpbmZvU3BhbikgewogICAgICAgICAgICAgICAgaW5mb1NwYW4udGV4dENvbnRlbnQgPSByZXF1ZXN0U3RhY2subGVuZ3RoICsgJyBBSkFYIHJlcXVlc3QnICsgKHJlcXVlc3RTdGFjay5sZW5ndGggIT09IDEgPyAncycgOiAnJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBhamF4VG9vbGJhclBhbmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYmxvY2stYWpheCcpOwogICAgICAgICAgICBpZiAocmVxdWVzdFN0YWNrLmxlbmd0aCkgewogICAgICAgICAgICAgICAgYWpheFRvb2xiYXJQYW5lbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGFqYXhUb29sYmFyUGFuZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocGVuZGluZ1JlcXVlc3RzID4gMCkgewogICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWpheFRvb2xiYXJQYW5lbCwgJ3NmLWFqYXgtcmVxdWVzdC1sb2FkaW5nJyk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3VjY2Vzc1N0cmVhayA8IDQpIHsKICAgICAgICAgICAgICAgIGFkZENsYXNzKGFqYXhUb29sYmFyUGFuZWwsICdzZi10b29sYmFyLXN0YXR1cy1yZWQnKTsKICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGFqYXhUb29sYmFyUGFuZWwsICdzZi1hamF4LXJlcXVlc3QtbG9hZGluZycpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoYWpheFRvb2xiYXJQYW5lbCwgJ3NmLWFqYXgtcmVxdWVzdC1sb2FkaW5nJyk7CiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhhamF4VG9vbGJhclBhbmVsLCAnc2YtdG9vbGJhci1zdGF0dXMtcmVkJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB2YXIgc3RhcnRBamF4UmVxdWVzdCA9IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgICAgIHZhciB0Ym9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWFqYXgtcmVxdWVzdC1saXN0Jyk7CiAgICAgICAgICAgIGlmICghdGJvZHkpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIG5iT2ZBamF4UmVxdWVzdCA9IHRib2R5LnJvd3MubGVuZ3RoOwogICAgICAgICAgICBpZiAobmJPZkFqYXhSZXF1ZXN0ID49IDEwMCkgewogICAgICAgICAgICAgICAgdGJvZHkuZGVsZXRlUm93KDApOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcmVxdWVzdCA9IHJlcXVlc3RTdGFja1tpbmRleF07CiAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0cysrOwogICAgICAgICAgICB2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTsKICAgICAgICAgICAgcmVxdWVzdC5ET01Ob2RlID0gcm93OwoKICAgICAgICAgICAgdmFyIHJlcXVlc3ROdW1iZXJDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTsKICAgICAgICAgICAgcmVxdWVzdE51bWJlckNlbGwudGV4dENvbnRlbnQgPSBpbmRleCArIDE7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChyZXF1ZXN0TnVtYmVyQ2VsbCk7CgogICAgICAgICAgICB2YXIgcHJvZmlsZXJDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTsKICAgICAgICAgICAgcHJvZmlsZXJDZWxsLnRleHRDb250ZW50ID0gJ24vYSc7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChwcm9maWxlckNlbGwpOwoKICAgICAgICAgICAgdmFyIG1ldGhvZENlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICBtZXRob2RDZWxsLnRleHRDb250ZW50ID0gcmVxdWVzdC5tZXRob2Q7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChtZXRob2RDZWxsKTsKCiAgICAgICAgICAgIHZhciB0eXBlQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7CiAgICAgICAgICAgIHR5cGVDZWxsLnRleHRDb250ZW50ID0gcmVxdWVzdC50eXBlOwogICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQodHlwZUNlbGwpOwoKICAgICAgICAgICAgdmFyIHN0YXR1c0NvZGVDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTsKICAgICAgICAgICAgdmFyIHN0YXR1c0NvZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgICAgIHN0YXR1c0NvZGUudGV4dENvbnRlbnQgPSAnbi9hJzsKICAgICAgICAgICAgc3RhdHVzQ29kZUNlbGwuYXBwZW5kQ2hpbGQoc3RhdHVzQ29kZSk7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChzdGF0dXNDb2RlQ2VsbCk7CgogICAgICAgICAgICB2YXIgcGF0aENlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICBwYXRoQ2VsbC5jbGFzc05hbWUgPSAnc2YtYWpheC1yZXF1ZXN0LXVybCc7CiAgICAgICAgICAgIGlmICgnR0VUJyA9PT0gcmVxdWVzdC5tZXRob2QpIHsKICAgICAgICAgICAgICAgIHZhciBwYXRoTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgICAgIHBhdGhMaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIHJlcXVlc3QudXJsKTsKICAgICAgICAgICAgICAgIHBhdGhMaW5rLnRleHRDb250ZW50ID0gcmVxdWVzdC51cmw7CiAgICAgICAgICAgICAgICBwYXRoQ2VsbC5hcHBlbmRDaGlsZChwYXRoTGluayk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwYXRoQ2VsbC50ZXh0Q29udGVudCA9IHJlcXVlc3QudXJsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhdGhDZWxsLnNldEF0dHJpYnV0ZSgndGl0bGUnLCByZXF1ZXN0LnVybCk7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChwYXRoQ2VsbCk7CgogICAgICAgICAgICB2YXIgZHVyYXRpb25DZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTsKICAgICAgICAgICAgZHVyYXRpb25DZWxsLmNsYXNzTmFtZSA9ICdzZi1hamF4LXJlcXVlc3QtZHVyYXRpb24nOwogICAgICAgICAgICBkdXJhdGlvbkNlbGwudGV4dENvbnRlbnQgPSAnbi9hJzsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGR1cmF0aW9uQ2VsbCk7CgogICAgICAgICAgICByZXF1ZXN0LmxpdmVEdXJhdGlvbkhhbmRsZSA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgZHVyYXRpb25DZWxsLnRleHRDb250ZW50ID0gKG5ldyBEYXRlKCkgLSByZXF1ZXN0LnN0YXJ0KSArICcgbXMnOwogICAgICAgICAgICB9LCAxMDApOwoKICAgICAgICAgICAgcm93LmNsYXNzTmFtZSA9ICdzZi1hamF4LXJlcXVlc3Qgc2YtYWpheC1yZXF1ZXN0LWxvYWRpbmcnOwogICAgICAgICAgICB0Ym9keS5pbnNlcnRCZWZvcmUocm93LCBudWxsKTsKCiAgICAgICAgICAgIHZhciB0b29sYmFySW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWJsb2NrLWFqYXggLnNmLXRvb2xiYXItaW5mbycpOwogICAgICAgICAgICB0b29sYmFySW5mby5zY3JvbGxUb3AgPSB0b29sYmFySW5mby5zY3JvbGxIZWlnaHQ7CgogICAgICAgICAgICByZW5kZXJBamF4UmVxdWVzdHMoKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgZmluaXNoQWpheFJlcXVlc3QgPSBmdW5jdGlvbihpbmRleCkgewogICAgICAgICAgICB2YXIgcmVxdWVzdCA9IHJlcXVlc3RTdGFja1tpbmRleF07CiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocmVxdWVzdC5saXZlRHVyYXRpb25IYW5kbGUpOwoKICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LkRPTU5vZGUpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHJlcXVlc3QudG9vbGJhclJlcGxhY2UgJiYgIXJlcXVlc3QudG9vbGJhclJlcGxhY2VGaW5pc2hlZCAmJiByZXF1ZXN0LnByb2ZpbGUpIHsKICAgICAgICAgICAgICAgIC8qIEZsYWcgYXMgY29tcGxldGUgYmVjYXVzZSBmaW5pc2hBamF4UmVxdWVzdCBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLiAqLwogICAgICAgICAgICAgICAgcmVxdWVzdC50b29sYmFyUmVwbGFjZUZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIC8qIFNlYXJjaCB1cCB0aHJvdWdoIHRoZSBET00gdG8gZmluZCB0aGUgdG9vbGJhcidzIGNvbnRhaW5lciBJRC4gKi8KICAgICAgICAgICAgICAgIGZvciAodmFyIGVsZW0gPSByZXF1ZXN0LkRPTU5vZGU7IGVsZW0gJiYgZWxlbSAhPT0gZG9jdW1lbnQ7IGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pZC5tYXRjaCgvXnNmd2R0LykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgU2Zqcy5sb2FkVG9vbGJhcihlbGVtLmlkLnJlcGxhY2UoL15zZndkdC8sICcnKSwgcmVxdWVzdC5wcm9maWxlKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBwZW5kaW5nUmVxdWVzdHMtLTsKICAgICAgICAgICAgdmFyIHJvdyA9IHJlcXVlc3QuRE9NTm9kZTsKICAgICAgICAgICAgLyogVW5wYWNrIHRoZSBjaGlsZHJlbiBmcm9tIHRoZSByb3cgKi8KICAgICAgICAgICAgdmFyIHByb2ZpbGVyQ2VsbCA9IHJvdy5jaGlsZHJlblsxXTsKICAgICAgICAgICAgdmFyIG1ldGhvZENlbGwgPSByb3cuY2hpbGRyZW5bMl07CiAgICAgICAgICAgIHZhciBzdGF0dXNDb2RlQ2VsbCA9IHJvdy5jaGlsZHJlbls0XTsKICAgICAgICAgICAgdmFyIHN0YXR1c0NvZGVFbGVtID0gc3RhdHVzQ29kZUNlbGwuY2hpbGRyZW5bMF07CiAgICAgICAgICAgIHZhciBkdXJhdGlvbkNlbGwgPSByb3cuY2hpbGRyZW5bNl07CgogICAgICAgICAgICBpZiAocmVxdWVzdC5lcnJvcikgewogICAgICAgICAgICAgICAgcm93LmNsYXNzTmFtZSA9ICdzZi1hamF4LXJlcXVlc3Qgc2YtYWpheC1yZXF1ZXN0LWVycm9yJzsKICAgICAgICAgICAgICAgIG1ldGhvZENlbGwuY2xhc3NOYW1lID0gJ3NmLWFqYXgtcmVxdWVzdC1lcnJvcic7CiAgICAgICAgICAgICAgICBzdWNjZXNzU3RyZWFrID0gMDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJvdy5jbGFzc05hbWUgPSAnc2YtYWpheC1yZXF1ZXN0IHNmLWFqYXgtcmVxdWVzdC1vayc7CiAgICAgICAgICAgICAgICBzdWNjZXNzU3RyZWFrKys7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1c0NvZGUpIHsKICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1c0NvZGUgPCAzMDApIHsKICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlRWxlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3NmLXRvb2xiYXItc3RhdHVzJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzQ29kZSA8IDQwMCkgewogICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVFbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2YtdG9vbGJhci1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMteWVsbG93Jyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVFbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2YtdG9vbGJhci1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMtcmVkJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlRWxlbS50ZXh0Q29udGVudCA9IHJlcXVlc3Quc3RhdHVzQ29kZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVFbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2YtdG9vbGJhci1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMtcmVkJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmR1cmF0aW9uKSB7CiAgICAgICAgICAgICAgICBkdXJhdGlvbkNlbGwudGV4dENvbnRlbnQgPSByZXF1ZXN0LmR1cmF0aW9uICsgJyBtcyc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnByb2ZpbGVyVXJsKSB7CiAgICAgICAgICAgICAgICBwcm9maWxlckNlbGwudGV4dENvbnRlbnQgPSAnJzsKICAgICAgICAgICAgICAgIHZhciBwcm9maWxlckxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICAgICAgICAgICAgICBwcm9maWxlckxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgcmVxdWVzdC5wcm9maWxlclVybCk7CiAgICAgICAgICAgICAgICBwcm9maWxlckxpbmsudGV4dENvbnRlbnQgPSByZXF1ZXN0LnByb2ZpbGU7CiAgICAgICAgICAgICAgICBwcm9maWxlckNlbGwuYXBwZW5kQ2hpbGQocHJvZmlsZXJMaW5rKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmVuZGVyQWpheFJlcXVlc3RzKCk7CiAgICAgICAgfTsKCiAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDI5MgogICAgICAgIGlmIChhcnJheV9rZXlfZXhpc3RzKCJleGNsdWRlZF9hamF4X3BhdGhzIiwgJGNvbnRleHQpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMjkzCiAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICBpZiAod2luZG93LmZldGNoICYmIHdpbmRvdy5mZXRjaC5wb2x5ZmlsbCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICB2YXIgb2xkRmV0Y2ggPSB3aW5kb3cuZmV0Y2g7CiAgICAgICAgICAgICAgICB3aW5kb3cuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSBvbGRGZXRjaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBhcmd1bWVudHNbMF07CiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50c1sxXTsKICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1UeXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50c1swXSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtVHlwZSA9PT0gJ1tvYmplY3QgUmVxdWVzdF0nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IGFyZ3VtZW50c1swXS51cmw7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogYXJndW1lbnRzWzBdLm1ldGhvZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBhcmd1bWVudHNbMF0uY3JlZGVudGlhbHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBhcmd1bWVudHNbMF0uaGVhZGVycywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IGFyZ3VtZW50c1swXS5tb2RlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3Q6IGFyZ3VtZW50c1swXS5yZWRpcmVjdAogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IFN0cmluZyh1cmwpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoIXVybC5tYXRjaChuZXcgUmVnRXhwKCI7CiAgICAgICAgICAgIC8vIGxpbmUgMzEyCiAgICAgICAgICAgIHlpZWxkIGpzb25fZW5jb2RlKChpc3NldCgkY29udGV4dFsiZXhjbHVkZWRfYWpheF9wYXRocyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJleGNsdWRlZF9hamF4X3BhdGhzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImV4Y2x1ZGVkX2FqYXhfcGF0aHMiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJleGNsdWRlZF9hamF4X3BhdGhzIiBkb2VzIG5vdCBleGlzdC4nLCAzMTIsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSk7CiAgICAgICAgICAgIHlpZWxkICIpKSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gJ0dFVCc7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLm1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBwYXJhbXMubWV0aG9kOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhY2tFbGVtZW50ID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmZXRjaCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbmV3IERhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IHJlcXVlc3RTdGFjay5wdXNoKHN0YWNrRWxlbWVudCkgLSAxOwogICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5kdXJhdGlvbiA9IG5ldyBEYXRlKCkgLSBzdGFja0VsZW1lbnQuc3RhcnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuZXJyb3IgPSByLnN0YXR1cyA8IDIwMCB8fCByLnN0YXR1cyA+PSA0MDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuc3RhdHVzQ29kZSA9IHIuc3RhdHVzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnByb2ZpbGUgPSByLmhlYWRlcnMuZ2V0KCd4LWRlYnVnLXRva2VuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQucHJvZmlsZXJVcmwgPSByLmhlYWRlcnMuZ2V0KCd4LWRlYnVnLXRva2VuLWxpbmsnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC50b29sYmFyUmVwbGFjZUZpbmlzaGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQudG9vbGJhclJlcGxhY2UgPSAnMScgPT09IHIuaGVhZGVycy5nZXQoJ1N5bWZvbnktRGVidWctVG9vbGJhci1SZXBsYWNlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hBamF4UmVxdWVzdChpZHgpOwogICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuZXJyb3IgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoQWpheFJlcXVlc3QoaWR4KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QWpheFJlcXVlc3QoaWR4KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAod2luZG93LlhNTEh0dHBSZXF1ZXN0ICYmIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyKSB7CiAgICAgICAgICAgICAgICB2YXIgcHJveGllZCA9IFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuOwoKICAgICAgICAgICAgICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24obWV0aG9kLCB1cmwsIGFzeW5jLCB1c2VyLCBwYXNzKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgICAgICAgICAgICAgICAvKiBwcmV2ZW50IGxvZ2dpbmcgQUpBWCBjYWxscyB0byBzdGF0aWMgYW5kIGlubGluZSBmaWxlcywgbGlrZSB0ZW1wbGF0ZXMgKi8KICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IHVybDsKICAgICAgICAgICAgICAgICAgICBpZiAodXJsLnNsaWNlKDAsIDEpID09PSAnLycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHVybC5pbmRleE9mKCciOwogICAgICAgICAgICAvLyBsaW5lIDM1NQogICAgICAgICAgICB5aWVsZCBUd2lnXEV4dGVuc2lvblxFc2NhcGVyRXh0ZW5zaW9uOjplc2NhcGUoJHRoaXMtPmVudiwgVHdpZ1xFeHRlbnNpb25cRXNjYXBlckV4dGVuc2lvbjo6ZXNjYXBlKCR0aGlzLT5lbnYsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbInJlcXVlc3QiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicmVxdWVzdCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJyZXF1ZXN0Il0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicmVxdWVzdCIgZG9lcyBub3QgZXhpc3QuJywgMzU1LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJiYXNlUGF0aCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzU1KSwgImpzIiksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIHlpZWxkICInKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHVybC5zbGljZSgiOwogICAgICAgICAgICAvLyBsaW5lIDM1NgogICAgICAgICAgICB5aWVsZCBUd2lnXEV4dGVuc2lvblxFc2NhcGVyRXh0ZW5zaW9uOjplc2NhcGUoJHRoaXMtPmVudiwgVHdpZ1xFeHRlbnNpb25cQ29yZUV4dGVuc2lvbjo6bGVuZ3RoRmlsdGVyKCR0aGlzLT5lbnYsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbInJlcXVlc3QiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicmVxdWVzdCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJyZXF1ZXN0Il0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicmVxdWVzdCIgZG9lcyBub3QgZXhpc3QuJywgMzU2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJiYXNlUGF0aCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzU2KSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIHlpZWxkICIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKDAgPT09IHVybC5pbmRleE9mKCciOwogICAgICAgICAgICAvLyBsaW5lIDM1OQogICAgICAgICAgICB5aWVsZCBUd2lnXEV4dGVuc2lvblxFc2NhcGVyRXh0ZW5zaW9uOjplc2NhcGUoJHRoaXMtPmVudiwgVHdpZ1xFeHRlbnNpb25cRXNjYXBlckV4dGVuc2lvbjo6ZXNjYXBlKCR0aGlzLT5lbnYsIChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJyZXF1ZXN0Il0pIHx8IGFycmF5X2tleV9leGlzdHMoInJlcXVlc3QiLCAkY29udGV4dCkgPyAkY29udGV4dFsicmVxdWVzdCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInJlcXVlc3QiIGRvZXMgbm90IGV4aXN0LicsIDM1OSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAic2NoZW1lQW5kSHR0cEhvc3QiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM1OSkgLiBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJyZXF1ZXN0Il0pIHx8IGFycmF5X2tleV9leGlzdHMoInJlcXVlc3QiLCAkY29udGV4dCkgPyAkY29udGV4dFsicmVxdWVzdCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInJlcXVlc3QiIGRvZXMgbm90IGV4aXN0LicsIDM1OSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiYmFzZVBhdGgiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM1OSkpLCAianMiKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgeWllbGQgIicpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSB1cmwuc2xpY2UoIjsKICAgICAgICAgICAgLy8gbGluZSAzNjAKICAgICAgICAgICAgeWllbGQgVHdpZ1xFeHRlbnNpb25cRXNjYXBlckV4dGVuc2lvbjo6ZXNjYXBlKCR0aGlzLT5lbnYsIFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246Omxlbmd0aEZpbHRlcigkdGhpcy0+ZW52LCAoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsicmVxdWVzdCJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJyZXF1ZXN0IiwgJGNvbnRleHQpID8gJGNvbnRleHRbInJlcXVlc3QiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJyZXF1ZXN0IiBkb2VzIG5vdCBleGlzdC4nLCAzNjAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInNjaGVtZUFuZEh0dHBIb3N0IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNjApIC4gQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsicmVxdWVzdCJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJyZXF1ZXN0IiwgJGNvbnRleHQpID8gJGNvbnRleHRbInJlcXVlc3QiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJyZXF1ZXN0IiBkb2VzIG5vdCBleGlzdC4nLCAzNjAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImJhc2VQYXRoIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNjApKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIHlpZWxkICIpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXRoLm1hdGNoKG5ldyBSZWdFeHAoIjsKICAgICAgICAgICAgLy8gbGluZSAzNjMKICAgICAgICAgICAgeWllbGQganNvbl9lbmNvZGUoKGlzc2V0KCRjb250ZXh0WyJleGNsdWRlZF9hamF4X3BhdGhzIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImV4Y2x1ZGVkX2FqYXhfcGF0aHMiLCAkY29udGV4dCkgPyAkY29udGV4dFsiZXhjbHVkZWRfYWpheF9wYXRocyJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImV4Y2x1ZGVkX2FqYXhfcGF0aHMiIGRvZXMgbm90IGV4aXN0LicsIDM2MywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKTsKICAgICAgICAgICAgeWllbGQgIikpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFja0VsZW1lbnQgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3hocicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbmV3IERhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IHJlcXVlc3RTdGFjay5wdXNoKHN0YWNrRWxlbWVudCkgLSAxOwoKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZWFkeVN0YXRlID09IDQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuZHVyYXRpb24gPSBuZXcgRGF0ZSgpIC0gc3RhY2tFbGVtZW50LnN0YXJ0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5lcnJvciA9IHNlbGYuc3RhdHVzIDwgMjAwIHx8IHNlbGYuc3RhdHVzID49IDQwMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuc3RhdHVzQ29kZSA9IHNlbGYuc3RhdHVzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RIZWFkZXJzKHNlbGYsIHN0YWNrRWxlbWVudCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaEFqYXhSZXF1ZXN0KGlkeCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZhbHNlKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QWpheFJlcXVlc3QoaWR4KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHByb3hpZWQuYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAzOTIKICAgICAgICB5aWVsZCAiCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgaGFzQ2xhc3M6IGhhc0NsYXNzLAoKICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLAoKICAgICAgICAgICAgYWRkQ2xhc3M6IGFkZENsYXNzLAoKICAgICAgICAgICAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLAoKICAgICAgICAgICAgZ2V0UHJlZmVyZW5jZTogZ2V0UHJlZmVyZW5jZSwKCiAgICAgICAgICAgIHNldFByZWZlcmVuY2U6IHNldFByZWZlcmVuY2UsCgogICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBhZGRFdmVudExpc3RlbmVyLAoKICAgICAgICAgICAgcmVxdWVzdDogcmVxdWVzdCwKCiAgICAgICAgICAgIHJlbmRlckFqYXhSZXF1ZXN0czogcmVuZGVyQWpheFJlcXVlc3RzLAoKICAgICAgICAgICAgZ2V0U2Z3ZHQ6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2Z3ZHQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNmd2R0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nmd2R0JyArIHRva2VuKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZndkdDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKHNlbGVjdG9yLCB1cmwsIG9uU3VjY2Vzcywgb25FcnJvciwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IpOwoKICAgICAgICAgICAgICAgIGlmIChlbCAmJiBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Z1cmwnKSAhPT0gdXJsKSB7CiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCgKICAgICAgICAgICAgICAgICAgICAgICAgdXJsLAogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih4aHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IHhoci5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2Z1cmwnLCB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZWwsICdsb2FkaW5nJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGVuZGluZyA9IHBlbmRpbmdSZXF1ZXN0czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVxdWVzdFN0YWNrLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRBamF4UmVxdWVzdChpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdFN0YWNrW2ldLmR1cmF0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaEFqYXhSZXF1ZXN0KGkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJldmVydCB0aGUgcGVuZGluZyBzdGF0ZSBpbiBjYXNlIHRoZXJlIHdhcyBhIHN0YXJ0IGNhbGxlZCB3aXRob3V0IGEgZmluaXNoIGFib3ZlLiAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1JlcXVlc3RzID0gcGVuZGluZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvblN1Y2Nlc3MgfHwgbm9vcCkoeGhyLCBlbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHhocikgeyAob25FcnJvciB8fCBub29wKSh4aHIsIGVsKTsgfSwKICAgICAgICAgICAgICAgICAgICAgICAgJycsCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2hvd1Rvb2xiYXI6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICAgICAgICAgICAgICB2YXIgc2Z3ZHQgPSB0aGlzLmdldFNmd2R0KHRva2VuKTsKICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNmd2R0LCAnc2YtZGlzcGxheS1ub25lJyk7CgogICAgICAgICAgICAgICAgaWYgKGdldFByZWZlcmVuY2UoJ3Rvb2xiYXIvZGlzcGxheVN0YXRlJykgPT0gJ25vbmUnKSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhck1haW5Db250ZW50LScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFyQ2xlYXJlci0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmTWluaVRvb2xiYXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhck1haW5Db250ZW50LScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhckNsZWFyZXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZNaW5pVG9vbGJhci0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBoaWRlVG9vbGJhcjogZnVuY3Rpb24odG9rZW4pIHsKICAgICAgICAgICAgICAgIHZhciBzZndkdCA9IHRoaXMuZ2V0U2Z3ZHQodG9rZW4pOwogICAgICAgICAgICAgICAgYWRkQ2xhc3Moc2Z3ZHQsICdzZi1kaXNwbGF5LW5vbmUnKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluaXRUb29sYmFyOiBmdW5jdGlvbih0b2tlbikgewogICAgICAgICAgICAgICAgdGhpcy5zaG93VG9vbGJhcih0b2tlbik7CgogICAgICAgICAgICAgICAgdmFyIGhpZGVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFySGlkZUJ1dHRvbi0nICsgdG9rZW4pOwogICAgICAgICAgICAgICAgdmFyIGhpZGVCdXR0b25TdmcgPSBoaWRlQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpOwogICAgICAgICAgICAgICAgaGlkZUJ1dHRvblN2Zy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIGhpZGVCdXR0b25Tdmcuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLCAnZmFsc2UnKTsKICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoaGlkZUJ1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgcC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgIChwLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgfHwgcC5wcmV2aW91c1NpYmxpbmcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmTWluaVRvb2xiYXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICBzZXRQcmVmZXJlbmNlKCd0b29sYmFyL2Rpc3BsYXlTdGF0ZScsICdub25lJyk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB2YXIgc2hvd0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJNaW5pVG9nZ2xlci0nICsgdG9rZW4pOwogICAgICAgICAgICAgICAgdmFyIHNob3dCdXR0b25TdmcgPSBzaG93QnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpOwogICAgICAgICAgICAgICAgc2hvd0J1dHRvblN2Zy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIHNob3dCdXR0b25Tdmcuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLCAnZmFsc2UnKTsKICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoc2hvd0J1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW0gPSB0aGlzLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uc3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhck1haW5Db250ZW50LScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhckNsZWFyZXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJNYWluQ29udGVudC0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFyQ2xlYXJlci0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHNldFByZWZlcmVuY2UoJ3Rvb2xiYXIvZGlzcGxheVN0YXRlJywgJ2Jsb2NrJyk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGxvYWRUb29sYmFyOiBmdW5jdGlvbih0b2tlbiwgbmV3VG9rZW4pIHsKICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpczsKICAgICAgICAgICAgICAgIHZhciB0cmllc0NvdW50ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZMb2FkQ291bnRlci0nICsgdG9rZW4pOwoKICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gewogICAgICAgICAgICAgICAgICAgIHJldHJ5OiB0cnVlLAogICAgICAgICAgICAgICAgICAgIG9uU2VuZDogZnVuY3Rpb24gKGNvdW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5pbml0VG9vbGJhcih0b2tlbik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmllc0NvdW50ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWVzQ291bnRlci50ZXh0Q29udGVudCA9IGNvdW50OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmFyIGNhbmNlbEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZkxvYWRDYW5jZWwtJyArIHRva2VuKTsKICAgICAgICAgICAgICAgIGlmIChjYW5jZWxCdXR0b24pIHsKICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGNhbmNlbEJ1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnN0b3AgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmhpZGVUb29sYmFyKHRva2VuKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBuZXdUb2tlbiA9IChuZXdUb2tlbiB8fCB0b2tlbik7CgogICAgICAgICAgICAgICAgdGhpcy5sb2FkKAogICAgICAgICAgICAgICAgICAgICdzZndkdCcgKyB0b2tlbiwKICAgICAgICAgICAgICAgICAgICAnIjsKICAgICAgICAvLyBsaW5lIDU0MAogICAgICAgIHlpZWxkIFR3aWdcRXh0ZW5zaW9uXEVzY2FwZXJFeHRlbnNpb246OmVzY2FwZSgkdGhpcy0+ZW52LCBUd2lnXEV4dGVuc2lvblxFc2NhcGVyRXh0ZW5zaW9uOjplc2NhcGUoJHRoaXMtPmVudiwgJHRoaXMtPmV4dGVuc2lvbnNbJ1N5bWZvbnlcQnJpZGdlXFR3aWdcRXh0ZW5zaW9uXFJvdXRpbmdFeHRlbnNpb24nXS0+Z2V0VXJsKCJfd2R0IiwgWyJ0b2tlbiIgPT4gInh4eHh4eCJdKSwgImpzIiksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgeWllbGQgIicucmVwbGFjZSgveHh4eHh4LywgbmV3VG9rZW4pLAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHhociwgZWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLyogRG8gbm90aGluZyBpbiB0aGUgZWRnZSBjYXNlIHdoZXJlIHRoZSB0b29sYmFyIGhhcyBhbHJlYWR5IGJlZW4gcmVwbGFjZWQgd2l0aCBhIG5ldyBvbmUgKi8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFyTWFpbkNvbnRlbnQtJyArIG5ld1Rva2VuKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAvKiBFdmFsdWF0ZSBpbiBnbG9iYWwgc2NvcGUgc2NyaXB0cyBlbWJlZGRlZCBpbnNpZGUgdGhlIHRvb2xiYXIgKi8KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGksIHNjcmlwdHMgPSBbXS5zbGljZS5jYWxsKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY3JpcHRzW2ldLmZpcnN0Q2hpbGQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsLmNhbGwoe30sIHNjcmlwdHNbaV0uZmlyc3RDaGlsZC5ub2RlVmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gLTEgIT09IHhoci5yZXNwb25zZVRleHQuaW5kZXhPZignc2YtdG9vbGJhcnJlc2V0JykgPyAnYmxvY2snIDogJ25vbmUnOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuaW5pdFRvb2xiYXIobmV3VG9rZW4pOwoKICAgICAgICAgICAgICAgICAgICAgICAgLyogSGFuZGxlIHRvb2xiYXItaW5mbyBwb3NpdGlvbiAqLwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9vbGJhckJsb2NrcyA9IFtdLnNsaWNlLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnLnNmLXRvb2xiYXItYmxvY2snKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b29sYmFyQmxvY2tzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFyQmxvY2tzW2ldLm9ubW91c2VvdmVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b29sYmFySW5mbyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnLnNmLXRvb2xiYXItaW5mbycpWzBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWdlV2lkdGggPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50V2lkdGggPSB0b29sYmFySW5mby5vZmZzZXRXaWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdFZhbHVlID0gKGVsZW1lbnRXaWR0aCArIHRoaXMub2Zmc2V0TGVmdCkgLSBwYWdlV2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJpZ2h0VmFsdWUgPSAoZWxlbWVudFdpZHRoICsgKHBhZ2VXaWR0aCAtIHRoaXMub2Zmc2V0TGVmdCkpIC0gcGFnZVdpZHRoOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBSZXNldCByaWdodCBhbmQgbGVmdCB2YWx1ZSwgdXNlZnVsIG9uIHdpbmRvdyByZXNpemUgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySW5mby5zdHlsZS5yaWdodCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXJJbmZvLnN0eWxlLmxlZnQgPSAnJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRXaWR0aCA+IHBhZ2VXaWR0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySW5mby5zdHlsZS5sZWZ0ID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobGVmdFZhbHVlID4gMCAmJiByaWdodFZhbHVlID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySW5mby5zdHlsZS5yaWdodCA9IChyaWdodFZhbHVlICogLTEpICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxlZnRWYWx1ZSA8IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhckluZm8uc3R5bGUubGVmdCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhckluZm8uc3R5bGUucmlnaHQgPSAnMHB4JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJBamF4UmVxdWVzdHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1hamF4LWNsZWFyJyksICdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFN0YWNrID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJBamF4UmVxdWVzdHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NTdHJlYWsgPSA0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYWpheC1yZXF1ZXN0LWxpc3QnKS5pbm5lckhUTUwgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYmxvY2stYWpheCcpLCAnbW91c2VlbnRlcicsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1ibG9jay1hamF4IC5zZi10b29sYmFyLWluZm8nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uc2Nyb2xsVG9wID0gZWxlbS5zY3JvbGxIZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWJsb2NrLWFqYXggPiAuc2YtdG9vbGJhci1pY29uJyksICdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLnBhcmVudE5vZGUsICdob3ZlcicpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdW1wSW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWJsb2NrLWR1bXAgLnNmLXRvb2xiYXItaW5mbycpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gZHVtcEluZm8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZHVtcEluZm8sICdzZmJlZm9yZWR1bXBjb2xsYXBzZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdW1wSW5mby5zdHlsZS5taW5IZWlnaHQgPSBkdW1wSW5mby5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQrJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihkdW1wSW5mbywgJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVtcEluZm8uc3R5bGUubWluSGVpZ2h0ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oeGhyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAwICYmICFvcHRpb25zLnN0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZndkdCA9IHRoYXQuZ2V0U2Z3ZHQodG9rZW4pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Z3ZHQuaW5uZXJIVE1MID0gJ1xcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXJyZXNldFwiPlxcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWljb25cIj48c3ZnIHdpZHRoPVwiMjZcIiBoZWlnaHQ9XCIyOFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2ZXJzaW9uPVwiMS4xXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDI2IDI4XCIgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDI2IDI4XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48cGF0aCBmaWxsPVwiI0ZGRkZGRlwiIGQ9XCJNMTMgMEM1LjggMCAwIDUuOCAwIDEzYzAgNy4yIDUuOCAxMyAxMyAxM2M3LjIgMCAxMy01LjggMTMtMTNDMjYgNS44IDIwLjIgMCAxMyAweiBNMjAgNy41IGMtMC42IDAtMS0wLjMtMS0wLjljMC0wLjIgMC0wLjQgMC4yLTAuNmMwLjEtMC4zIDAuMi0wLjMgMC4yLTAuNGMwLTAuMy0wLjUtMC40LTAuNy0wLjRjLTIgMC4xLTIuNSAyLjctMi45IDQuOGwtMC4yIDEuMSBjMS4xIDAuMiAxLjkgMCAyLjQtMC4zYzAuNi0wLjQtMC4yLTAuOC0wLjEtMS4zQzE4IDkuMiAxOC40IDkgMTguNyA4LjljMC41IDAgMC44IDAuNSAwLjggMWMwIDAuOC0xLjEgMi0zLjMgMS45IGMtMC4zIDAtMC41IDAtMC43LTAuMUwxNSAxNC4xYy0wLjQgMS43LTAuOSA0LjEtMi42IDYuMmMtMS41IDEuOC0zLjEgMi4xLTMuOCAyLjFjLTEuMyAwLTIuMS0wLjYtMi4yLTEuNmMwLTAuOSAwLjgtMS40IDEuMy0xLjQgYzAuNyAwIDEuMiAwLjUgMS4yIDEuMWMwIDAuNS0wLjIgMC42LTAuNCAwLjdjLTAuMSAwLjEtMC4zIDAuMi0wLjMgMC40YzAgMC4xIDAuMSAwLjMgMC40IDAuM2MwLjUgMCAwLjktMC4zIDEuMi0wLjUgYzEuMy0xIDEuNy0yLjkgMi40LTYuMmwwLjEtMC44YzAuMi0xLjEgMC41LTIuMyAwLjgtMy41Yy0wLjktMC43LTEuNC0xLjUtMi42LTEuOGMtMC44LTAuMi0xLjMgMC0xLjcgMC40QzguNCAxMCA4LjYgMTAuNyA5IDExLjEgbDAuNyAwLjdjMC44IDAuOSAxLjMgMS43IDEuMSAyLjdjLTAuMyAxLjYtMi4xIDIuOC00LjMgMi4xYy0xLjktMC42LTIuMi0xLjktMi0yLjdjMC4yLTAuNiAwLjctMC44IDEuMi0wLjYgYzAuNSAwLjIgMC43IDAuOCAwLjYgMS4zYzAgMC4xIDAgMC4xLTAuMSAwLjNDNiAxNSA1LjkgMTUuMiA1LjkgMTUuM2MtMC4xIDAuNCAwLjQgMC43IDAuOCAwLjhjMC44IDAuMyAxLjctMC4yIDEuOS0wLjkgYzAuMi0wLjYtMC4yLTEuMS0wLjQtMS4ybC0wLjgtMC45Yy0wLjQtMC40LTEuMi0xLjUtMC44LTIuOGMwLjItMC41IDAuNS0xIDAuOS0xLjRjMS0wLjcgMi0wLjggMy0wLjZjMS4zIDAuNCAxLjkgMS4yIDIuOCAxLjkgYzAuNS0xLjMgMS4xLTIuNiAyLTMuOGMwLjktMSAyLTEuNyAzLjMtMS44QzIwIDQuOCAyMSA1LjQgMjEgNi4zQzIxIDYuNyAyMC44IDcuNSAyMCA3LjV6XCIvPjwvc3ZnPjwvZGl2PlxcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGxvYWRpbmcgdGhlIHdlYiBkZWJ1ZyB0b29sYmFyLiA8YSBocmVmPVwiIjsKICAgICAgICAvLyBsaW5lIDYyMwogICAgICAgIHlpZWxkIFR3aWdcRXh0ZW5zaW9uXEVzY2FwZXJFeHRlbnNpb246OmVzY2FwZSgkdGhpcy0+ZW52LCBUd2lnXEV4dGVuc2lvblxFc2NhcGVyRXh0ZW5zaW9uOjplc2NhcGUoJHRoaXMtPmVudiwgJHRoaXMtPmV4dGVuc2lvbnNbJ1N5bWZvbnlcQnJpZGdlXFR3aWdcRXh0ZW5zaW9uXFJvdXRpbmdFeHRlbnNpb24nXS0+Z2V0VXJsKCJfcHJvZmlsZXJfaG9tZSIpLCAianMiKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICB5aWVsZCAiJyArIG5ld1Rva2VuICsgJ1wiPk9wZW4gdGhlIHdlYiBwcm9maWxlci48L2E+XFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNmd2R0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2YtdG9vbGJhciBzZi1lcnJvci10b29sYmFyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKHNlbGVjdG9yLCBlbE9uLCBlbE9mZikgewogICAgICAgICAgICAgICAgdmFyIHRtcCA9IGVsT24uc3R5bGUuZGlzcGxheSwKICAgICAgICAgICAgICAgICAgICBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdG9yKTsKCiAgICAgICAgICAgICAgICBlbE9uLnN0eWxlLmRpc3BsYXkgPSBlbE9mZi5zdHlsZS5kaXNwbGF5OwogICAgICAgICAgICAgICAgZWxPZmYuc3R5bGUuZGlzcGxheSA9IHRtcDsKCiAgICAgICAgICAgICAgICBpZiAoZWwpIHsKICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnID09PSB0bXAgPyAnbm9uZScgOiAnYmxvY2snOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY3JlYXRlVGFiczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgdGFiR3JvdXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNmLXRhYnM6bm90KFtkYXRhLXByb2Nlc3NlZD10cnVlXSknKTsKCiAgICAgICAgICAgICAgICAvKiBjcmVhdGUgdGhlIHRhYiBuYXZpZ2F0aW9uIGZvciBlYWNoIGdyb3VwIG9mIHRhYnMgKi8KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFiR3JvdXBzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYnMgPSB0YWJHcm91cHNbaV0ucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gLnRhYicpOwogICAgICAgICAgICAgICAgICAgIHZhciB0YWJOYXZpZ2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTsKICAgICAgICAgICAgICAgICAgICB0YWJOYXZpZ2F0aW9uLmNsYXNzTmFtZSA9ICd0YWItbmF2aWdhdGlvbic7CgogICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZFRhYklkID0gJ3RhYi0nICsgaSArICctMCc7IC8qIHNlbGVjdCB0aGUgZmlyc3QgdGFiIGJ5IGRlZmF1bHQgKi8KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRhYnMubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYklkID0gJ3RhYi0nICsgaSArICctJyArIGo7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJUaXRsZSA9IHRhYnNbal0ucXVlcnlTZWxlY3RvcignLnRhYi10aXRsZScpLmlubmVySFRNTDsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJOYXZpZ2F0aW9uSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhYk5hdmlnYXRpb25JdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS10YWItaWQnLCB0YWJJZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyh0YWJzW2pdLCAnYWN0aXZlJykpIHsgc2VsZWN0ZWRUYWJJZCA9IHRhYklkOyB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyh0YWJzW2pdLCAnZGlzYWJsZWQnKSkgeyBhZGRDbGFzcyh0YWJOYXZpZ2F0aW9uSXRlbSwgJ2Rpc2FibGVkJyk7IH0KICAgICAgICAgICAgICAgICAgICAgICAgdGFiTmF2aWdhdGlvbkl0ZW0uaW5uZXJIVE1MID0gdGFiVGl0bGU7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhYk5hdmlnYXRpb24uYXBwZW5kQ2hpbGQodGFiTmF2aWdhdGlvbkl0ZW0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYkNvbnRlbnQgPSB0YWJzW2pdLnF1ZXJ5U2VsZWN0b3IoJy50YWItY29udGVudCcpOwogICAgICAgICAgICAgICAgICAgICAgICB0YWJDb250ZW50LnBhcmVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIHRhYklkKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHRhYkdyb3Vwc1tpXS5pbnNlcnRCZWZvcmUodGFiTmF2aWdhdGlvbiwgdGFiR3JvdXBzW2ldLmZpcnN0Q2hpbGQpOwogICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRhYi1pZD1cIicgKyBzZWxlY3RlZFRhYklkICsgJ1wiXScpLCAnYWN0aXZlJyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLyogZGlzcGxheSB0aGUgYWN0aXZlIHRhYiBhbmQgYWRkIHRoZSAnY2xpY2snIGV2ZW50IGxpc3RlbmVycyAqLwogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRhYkdyb3Vwcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHRhYk5hdmlnYXRpb24gPSB0YWJHcm91cHNbaV0ucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gLnRhYi1uYXZpZ2F0aW9uIGxpJyk7CgogICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB0YWJOYXZpZ2F0aW9uLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhYklkID0gdGFiTmF2aWdhdGlvbltqXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFiLWlkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYklkKS5xdWVyeVNlbGVjdG9yKCcudGFiLXRpdGxlJykuY2xhc3NOYW1lID0gJ2hpZGRlbic7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzQ2xhc3ModGFiTmF2aWdhdGlvbltqXSwgJ2FjdGl2ZScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWJJZCkuY2xhc3NOYW1lID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYklkKS5jbGFzc05hbWUgPSAnaGlkZGVuJzsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdGFiTmF2aWdhdGlvbltqXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmVUYWIgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbmVlZGVkIGJlY2F1c2Ugd2hlbiB0aGUgdGFiIGNvbnRhaW5zIEhUTUwgY29udGVudHMsIHVzZXIgY2FuIGNsaWNrICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBvbiBhbnkgb2YgdGhvc2UgZWxlbWVudHMgaW5zdGVhZCBvZiB0aGVpciBwYXJlbnQgJzxsaT4nIGVsZW1lbnQgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChhY3RpdmVUYWIudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnbGknKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlVGFiID0gYWN0aXZlVGFiLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZ2V0IHRoZSBmdWxsIGxpc3Qgb2YgdGFicyB0aHJvdWdoIHRoZSBwYXJlbnQgb2YgdGhlIGFjdGl2ZSB0YWIgZWxlbWVudCAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYk5hdmlnYXRpb24gPSBhY3RpdmVUYWIucGFyZW50Tm9kZS5jaGlsZHJlbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGFiTmF2aWdhdGlvbi5sZW5ndGg7IGsrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJJZCA9IHRhYk5hdmlnYXRpb25ba10uZ2V0QXR0cmlidXRlKCdkYXRhLXRhYi1pZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYklkKS5jbGFzc05hbWUgPSAnaGlkZGVuJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0YWJOYXZpZ2F0aW9uW2tdLCAnYWN0aXZlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWN0aXZlVGFiLCAnYWN0aXZlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlVGFiSWQgPSBhY3RpdmVUYWIuZ2V0QXR0cmlidXRlKCdkYXRhLXRhYi1pZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYWN0aXZlVGFiSWQpLmNsYXNzTmFtZSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdGFiR3JvdXBzW2ldLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9jZXNzZWQnLCAndHJ1ZScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY3JlYXRlVG9nZ2xlczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZi10b2dnbGU6bm90KFtkYXRhLXByb2Nlc3NlZD10cnVlXSknKTsKCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvZ2dsZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFNlbGVjdG9yID0gdG9nZ2xlc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLXNlbGVjdG9yJyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnRTZWxlY3Rvcik7CgogICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsICdzZi10b2dnbGUtY29udGVudCcpOwoKICAgICAgICAgICAgICAgICAgICBpZiAodG9nZ2xlc1tpXS5oYXNBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLWluaXRpYWwnKSAmJiB0b2dnbGVzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS10b2dnbGUtaW5pdGlhbCcpID09ICdkaXNwbGF5JykgewogICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyh0b2dnbGVzW2ldLCAnc2YtdG9nZ2xlLW9uJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsICdzZi10b2dnbGUtdmlzaWJsZScpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHRvZ2dsZXNbaV0sICdzZi10b2dnbGUtb2ZmJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsICdzZi10b2dnbGUtaGlkZGVuJyk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKHRvZ2dsZXNbaV0sICdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCcnICE9PSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogRG9uJ3QgZG8gYW55dGhpbmcgb24gdGV4dCBzZWxlY3Rpb24gKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIG5lZWRlZCBiZWNhdXNlIHdoZW4gdGhlIHRvZ2dsZSBjb250YWlucyBIVE1MIGNvbnRlbnRzLCB1c2VyIGNhbiBjbGljayAqLwogICAgICAgICAgICAgICAgICAgICAgICAvKiBvbiBhbnkgb2YgdGhvc2UgZWxlbWVudHMgaW5zdGVhZCBvZiB0aGVpciBwYXJlbnQgJy5zZi10b2dnbGUnIGVsZW1lbnQgKi8KICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCFoYXNDbGFzcyh0b2dnbGUsICdzZi10b2dnbGUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlID0gdG9nZ2xlLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0b2dnbGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1zZWxlY3RvcicpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRvZ2dsZSwgJ3NmLXRvZ2dsZS1vbicpOwogICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0b2dnbGUsICdzZi10b2dnbGUtb2ZmJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsZW1lbnQsICdzZi10b2dnbGUtaGlkZGVuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsZW1lbnQsICdzZi10b2dnbGUtdmlzaWJsZScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLyogdGhlIHRvZ2dsZSBkb2Vzbid0IGNoYW5nZSBpdHMgY29udGVudHMgd2hlbiBjbGlja2luZyBvbiBpdCAqLwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRvZ2dsZS5oYXNBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLWFsdC1jb250ZW50JykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0b2dnbGUuaGFzQXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1vcmlnaW5hbC1jb250ZW50JykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLW9yaWdpbmFsLWNvbnRlbnQnLCB0b2dnbGUuaW5uZXJIVE1MKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRDb250ZW50ID0gdG9nZ2xlLmlubmVySFRNTDsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsQ29udGVudCA9IHRvZ2dsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLW9yaWdpbmFsLWNvbnRlbnQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdENvbnRlbnQgPSB0b2dnbGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1hbHQtY29udGVudCcpOwogICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUuaW5uZXJIVE1MID0gY3VycmVudENvbnRlbnQgIT09IGFsdENvbnRlbnQgPyBhbHRDb250ZW50IDogb3JpZ2luYWxDb250ZW50OwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAvKiBQcmV2ZW50cyBmcm9tIGRpc2FsbG93aW5nIGNsaWNrcyBvbiBsaW5rcyBpbnNpZGUgdG9nZ2xlcyAqLwogICAgICAgICAgICAgICAgICAgIHZhciB0b2dnbGVMaW5rcyA9IHRvZ2dsZXNbaV0ucXVlcnlTZWxlY3RvckFsbCgnYScpOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdG9nZ2xlTGlua3MubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcih0b2dnbGVMaW5rc1tqXSwgJ2NsaWNrJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvKiBQcmV2ZW50cyBmcm9tIGRpc2FsbG93aW5nIGNsaWNrcyBvbiBcImNvcHkgdG8gY2xpcGJvYXJkXCIgZWxlbWVudHMgaW5zaWRlIHRvZ2dsZXMgKi8KICAgICAgICAgICAgICAgICAgICB2YXIgY29weVRvQ2xpcGJvYXJkRWxlbWVudHMgPSB0b2dnbGVzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW5bZGF0YS1jbGlwYm9hcmQtdGV4dF0nKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGNvcHlUb0NsaXBib2FyZEVsZW1lbnRzLmxlbmd0aDsgaysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoY29weVRvQ2xpcGJvYXJkRWxlbWVudHNba10sICdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlc1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvY2Vzc2VkJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluaXRpYWxpemVMb2dzVGFibGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgU2Zqcy51cGRhdGVMb2dzVGFibGUoKTsKCiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubG9nLWZpbHRlciBpbnB1dCcpLmZvckVhY2goKGlucHV0KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4geyBTZmpzLnVwZGF0ZUxvZ3NUYWJsZSgpOyB9KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5maWx0ZXItc2VsZWN0LWFsbC1vci1ub25lIGJ1dHRvbicpLmZvckVhY2goKGxpbmspID0+IHsKICAgICAgICAgICAgICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RBbGwgPSBsaW5rLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0LWFsbCcpOwogICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmNsb3Nlc3QoJy5sb2ctZmlsdGVyLWNvbnRlbnQnKS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpLmZvckVhY2goKGlucHV0KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gc2VsZWN0QWxsOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIFNmanMudXBkYXRlTG9nc1RhYmxlKCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZGV0YWlscy5sb2ctZmlsdGVyJykuZm9yRWFjaCgoZmlsdGVyRWxlbWVudCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbHRlckVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiBmaWx0ZXJFbGVtZW50Lm9wZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckVsZW1lbnQub3BlbiA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHVwZGF0ZUxvZ3NUYWJsZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZFR5cGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG9nLWZpbHRlci10eXBlIGlucHV0OmNoZWNrZWQnKS52YWx1ZTsKICAgICAgICAgICAgICAgIGNvbnN0IHByaW9yaXRpZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjbG9nLWZpbHRlci1wcmlvcml0eSBpbnB1dCcpOwogICAgICAgICAgICAgICAgY29uc3QgYWxsUHJpb3JpdGllcyA9IEFycmF5LmZyb20ocHJpb3JpdGllcykubWFwKChpbnB1dCkgPT4gaW5wdXQudmFsdWUpOwogICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRQcmlvcml0aWVzID0gQXJyYXkuZnJvbShwcmlvcml0aWVzKS5maWx0ZXIoKGlucHV0KSA9PiBpbnB1dC5jaGVja2VkKS5tYXAoKGlucHV0KSA9PiBpbnB1dC52YWx1ZSk7CiAgICAgICAgICAgICAgICBjb25zdCBjaGFubmVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNsb2ctZmlsdGVyLWNoYW5uZWwgaW5wdXQnKTsKICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ2hhbm5lbHMgPSBBcnJheS5mcm9tKGNoYW5uZWxzKS5maWx0ZXIoKGlucHV0KSA9PiBpbnB1dC5jaGVja2VkKS5tYXAoKGlucHV0KSA9PiBpbnB1dC52YWx1ZSk7CgogICAgICAgICAgICAgICAgY29uc3QgbG9ncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlLmxvZ3MnKTsKICAgICAgICAgICAgICAgIGlmIChudWxsID09PSBsb2dzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8qIGhpZGUgcm93cyB0aGF0IGRvbid0IG1hdGNoIHRoZSBjdXJyZW50IGZpbHRlcnMgKi8KICAgICAgICAgICAgICAgIGxldCBudW1WaXNpYmxlUm93cyA9IDA7CiAgICAgICAgICAgICAgICBsb2dzLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5IHRyJykuZm9yRWFjaCgocm93KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCdhbGwnICE9PSBzZWxlY3RlZFR5cGUgJiYgc2VsZWN0ZWRUeXBlICE9PSByb3cuZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICByb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpb3JpdHkgPSByb3cuZ2V0QXR0cmlidXRlKCdkYXRhLXByaW9yaXR5Jyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGZhbHNlID09PSBzZWxlY3RlZFByaW9yaXRpZXMuaW5jbHVkZXMocHJpb3JpdHkpICYmIHRydWUgPT09IGFsbFByaW9yaXRpZXMuaW5jbHVkZXMocHJpb3JpdHkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoJycgIT09IHJvdy5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2hhbm5lbCcpICYmIGZhbHNlID09PSBzZWxlY3RlZENoYW5uZWxzLmluY2x1ZGVzKHJvdy5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2hhbm5lbCcpKSkgewogICAgICAgICAgICAgICAgICAgICAgICByb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcm93LnN0eWxlLmRpc3BsYXkgPSAndGFibGUtcm93JzsKICAgICAgICAgICAgICAgICAgICBudW1WaXNpYmxlUm93cysrOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGFibGUubG9ncycpLnN0eWxlLmRpc3BsYXkgPSAwID09PSBudW1WaXNpYmxlUm93cyA/ICdub25lJyA6ICd0YWJsZSc7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubm8tbG9ncy1tZXNzYWdlJykuc3R5bGUuZGlzcGxheSA9IDAgPT09IG51bVZpc2libGVSb3dzID8gJ2Jsb2NrJyA6ICdub25lJzsKCiAgICAgICAgICAgICAgICAvKiB1cGRhdGUgdGhlIHNlbGVjdGVkIHRvdGFscyBvZiBhbGwgZmlsdGVycyAqLwogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xvZy1maWx0ZXItcHJpb3JpdHkgLmZpbHRlci1hY3RpdmUtbnVtJykuaW5uZXJUZXh0ID0gKHByaW9yaXRpZXMubGVuZ3RoID09PSBzZWxlY3RlZFByaW9yaXRpZXMubGVuZ3RoKSA/ICdBbGwnIDogc2VsZWN0ZWRQcmlvcml0aWVzLmxlbmd0aDsKICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsb2ctZmlsdGVyLWNoYW5uZWwgLmZpbHRlci1hY3RpdmUtbnVtJykuaW5uZXJUZXh0ID0gKGNoYW5uZWxzLmxlbmd0aCA9PT0gc2VsZWN0ZWRDaGFubmVscy5sZW5ndGgpID8gJ0FsbCcgOiBzZWxlY3RlZENoYW5uZWxzLmxlbmd0aDsKCiAgICAgICAgICAgICAgICAvKiB1cGRhdGUgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBcImxvZyB0eXBlXCIgdGFiICovCiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjbG9nLWZpbHRlci10eXBlIGxpJykuZm9yRWFjaCgodGFiKSA9PiB0YWIuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJykpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2xvZy1maWx0ZXItdHlwZSBpbnB1dFt2YWx1ZT1cIlwke3NlbGVjdGVkVHlwZX1cIl1gKS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpOwogICAgICAgICAgICB9LAogICAgICAgIH07CiAgICB9KSgpOwoKICAgIFNmanMuYWRkRXZlbnRMaXN0ZW5lcihkb2N1bWVudCwgJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICBTZmpzLmNyZWF0ZVRhYnMoKTsKICAgICAgICBTZmpzLmNyZWF0ZVRvZ2dsZXMoKTsKICAgIH0pOwp9Ci8qXV0+Ki88L3NjcmlwdD4KIjsKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF81YTI3YThiYTIxY2E3OWI2MTkzMjM3NmIyZmE5MjJkMi0+bGVhdmUoJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDJfcHJvZik7CgogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmLT5sZWF2ZSgkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zl9wcm9mKTsKCiAgICAgICAgcmV0dXJuOyB5aWVsZCAnJzsKICAgIH0KCiAgICAvKioKICAgICAqIEBjb2RlQ292ZXJhZ2VJZ25vcmUKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldFRlbXBsYXRlTmFtZSgpCiAgICB7CiAgICAgICAgcmV0dXJuICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvYmFzZV9qcy5odG1sLnR3aWciOwogICAgfQoKICAgIC8qKgogICAgICogQGNvZGVDb3ZlcmFnZUlnbm9yZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gaXNUcmFpdGFibGUoKQogICAgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBjb2RlQ292ZXJhZ2VJZ25vcmUKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldERlYnVnSW5mbygpCiAgICB7CiAgICAgICAgcmV0dXJuIGFycmF5ICggIDY5NyA9PiA2MjMsICA2MTEgPT4gNTQwLCAgNDYxID0+IDM5MiwgIDQyOSA9PiAzNjMsICA0MjMgPT4gMzYwLCAgNDE5ID0+IDM1OSwgIDQxMyA9PiAzNTYsICA0MDkgPT4gMzU1LCAgMzYzID0+IDMxMiwgIDM0MiA9PiAyOTMsICAzNDAgPT4gMjkyLCAgNTMgPT4gNywgIDQ0ID0+IDMsKTsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0U291cmNlQ29udGV4dCgpCiAgICB7CiAgICAgICAgcmV0dXJuIG5ldyBTb3VyY2UoInsjIFRoaXMgZmlsZSBpcyBwYXJ0aWFsbHkgZHVwbGljYXRlZCBpbiBzcmMvU3ltZm9ueS9Db21wb25lbnQvRXJyb3JIYW5kbGVyL1Jlc291cmNlcy9hc3NldHMvanMvZXhjZXB0aW9uLmpzLgogICBJZiB5b3UgbWFrZSBhbnkgY2hhbmdlIGluIHRoaXMgZmlsZSwgdmVyaWZ5IHRoZSBzYW1lIGNoYW5nZSBpcyBuZWVkZWQgaW4gdGhlIG90aGVyIGZpbGUuICN9CjxzY3JpcHR7JSBpZiBjc3Bfc2NyaXB0X25vbmNlIGlzIGRlZmluZWQgYW5kIGNzcF9zY3JpcHRfbm9uY2UgJX0gbm9uY2U9XCJ7eyBjc3Bfc2NyaXB0X25vbmNlIH19XCJ7JSBlbmRpZiAlfT4vKjwhW0NEQVRBWyovCiAgICB7IyBDYXV0aW9uOiB0aGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBwcm9jZXNzZWQgYnkgVHdpZyBiZWZvcmUgbG9hZGluZwogICAgICAgICAgICAgICAgdGhlbSBhcyBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlLiBBbHdheXMgdXNlICcvKicgY29tbWVudHMgaW5zdGVhZAogICAgICAgICAgICAgICAgb2YgJy8vJyBjb21tZW50cyB0byBhdm9pZCBpbXBvc3NpYmxlLXRvLWRlYnVnIHNpZGUtZWZmZWN0cyAjfQoKaWYgKHR5cGVvZiBTZmpzID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgU2Zqcy5sb2FkVG9vbGJhciA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgIFNmanMgPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7CgogICAgICAgIGlmICgnY2xhc3NMaXN0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHsKICAgICAgICAgICAgdmFyIGhhc0NsYXNzID0gZnVuY3Rpb24gKGVsLCBjc3NDbGFzcykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNzc0NsYXNzKTsgfTsKICAgICAgICAgICAgdmFyIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24oZWwsIGNzc0NsYXNzKSB7IGVsLmNsYXNzTGlzdC5yZW1vdmUoY3NzQ2xhc3MpOyB9OwogICAgICAgICAgICB2YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbihlbCwgY3NzQ2xhc3MpIHsgZWwuY2xhc3NMaXN0LmFkZChjc3NDbGFzcyk7IH07CiAgICAgICAgICAgIHZhciB0b2dnbGVDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjc3NDbGFzcykgeyBlbC5jbGFzc0xpc3QudG9nZ2xlKGNzc0NsYXNzKTsgfTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgaGFzQ2xhc3MgPSBmdW5jdGlvbiAoZWwsIGNzc0NsYXNzKSB7IHJldHVybiBlbC5jbGFzc05hbWUubWF0Y2gobmV3IFJlZ0V4cCgnXFxcXGInICsgY3NzQ2xhc3MgKyAnXFxcXGInKSk7IH07CiAgICAgICAgICAgIHZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjc3NDbGFzcykgeyBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcYicgKyBjc3NDbGFzcyArICdcXFxcYicpLCAnICcpOyB9OwogICAgICAgICAgICB2YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbihlbCwgY3NzQ2xhc3MpIHsgaWYgKCFoYXNDbGFzcyhlbCwgY3NzQ2xhc3MpKSB7IGVsLmNsYXNzTmFtZSArPSBcIiBcIiArIGNzc0NsYXNzOyB9IH07CiAgICAgICAgICAgIHZhciB0b2dnbGVDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjc3NDbGFzcykgeyBoYXNDbGFzcyhlbCwgY3NzQ2xhc3MpID8gcmVtb3ZlQ2xhc3MoZWwsIGNzc0NsYXNzKSA6IGFkZENsYXNzKGVsLCBjc3NDbGFzcyk7IH07CiAgICAgICAgfQoKICAgICAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307CgogICAgICAgIHZhciBwcm9maWxlclN0b3JhZ2VLZXkgPSAnc3ltZm9ueS9wcm9maWxlci8nOwoKICAgICAgICB2YXIgYWRkRXZlbnRMaXN0ZW5lcjsKCiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgaWYgKCEoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGVsKSkgewogICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgY2FsbGJhY2spOwogICAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnROYW1lLCBjYWxsYmFjaykgewogICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGZhbHNlKTsKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIGlmIChuYXZpZ2F0b3IuY2xpcGJvYXJkKSB7CiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNsaXBib2FyZC10ZXh0XScpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgJ2hpZGRlbicpOwogICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNsaXBib2FyZC10ZXh0JykpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgcmVxdWVzdCA9IGZ1bmN0aW9uKHVybCwgb25TdWNjZXNzLCBvbkVycm9yLCBwYXlsb2FkLCBvcHRpb25zLCB0cmllcykgewogICAgICAgICAgICB2YXIgeGhyID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0ID8gbmV3IFhNTEh0dHBSZXF1ZXN0KCkgOiBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTEhUVFAnKTsKICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgICAgIG9wdGlvbnMucmV0cnkgPSBvcHRpb25zLnJldHJ5IHx8IGZhbHNlOwogICAgICAgICAgICB0cmllcyA9IHRyaWVzIHx8IDE7CiAgICAgICAgICAgIC8qIHRoaXMgZGVsYXlzIGZvciAxMjUsIDM3NSwgNjI1LCA4NzUsIGFuZCAxMDAwLCAuLi4gKi8KICAgICAgICAgICAgdmFyIGRlbGF5ID0gdHJpZXMgPCA1ID8gKHRyaWVzIC0gMC41KSAqIDI1MCA6IDEwMDA7CgogICAgICAgICAgICB4aHIub3BlbihvcHRpb25zLm1ldGhvZCB8fCAnR0VUJywgdXJsLCB0cnVlKTsKICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtUmVxdWVzdGVkLVdpdGgnLCAnWE1MSHR0cFJlcXVlc3QnKTsKICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKHN0YXRlKSB7CiAgICAgICAgICAgICAgICBpZiAoNCAhPT0geGhyLnJlYWR5U3RhdGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSA0MDQgJiYgb3B0aW9ucy5yZXRyeSAmJiAhb3B0aW9ucy5zdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RvcCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QodXJsLCBvblN1Y2Nlc3MsIG9uRXJyb3IsIHBheWxvYWQsIG9wdGlvbnMsIHRyaWVzICsgMSk7CiAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXkpOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoMjAwID09PSB4aHIuc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgKG9uU3VjY2VzcyB8fCBub29wKSh4aHIpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAob25FcnJvciB8fCBub29wKSh4aHIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgaWYgKG9wdGlvbnMub25TZW5kKSB7CiAgICAgICAgICAgICAgICBvcHRpb25zLm9uU2VuZCh0cmllcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHhoci5zZW5kKHBheWxvYWQgfHwgJycpOwogICAgICAgIH07CgogICAgICAgIHZhciBnZXRQcmVmZXJlbmNlID0gZnVuY3Rpb24obmFtZSkgewogICAgICAgICAgICBpZiAoIXdpbmRvdy5sb2NhbFN0b3JhZ2UpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvZmlsZXJTdG9yYWdlS2V5ICsgbmFtZSk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHNldFByZWZlcmVuY2UgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICBpZiAoIXdpbmRvdy5sb2NhbFN0b3JhZ2UpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShwcm9maWxlclN0b3JhZ2VLZXkgKyBuYW1lLCB2YWx1ZSk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHJlcXVlc3RTdGFjayA9IFtdOwoKICAgICAgICB2YXIgZXh0cmFjdEhlYWRlcnMgPSBmdW5jdGlvbih4aHIsIHN0YWNrRWxlbWVudCkgewogICAgICAgICAgICAvKiBIZXJlIHdlIGF2b2lkIHRvIGNhbGwgeGhyLmdldFJlc3BvbnNlSGVhZGVyIGluIG9yZGVyIHRvICovCiAgICAgICAgICAgIC8qIHByZXZlbnQgcG9sbHV0aW5nIHRoZSBjb25zb2xlIHdpdGggQ09SUyBzZWN1cml0eSBlcnJvcnMgKi8KICAgICAgICAgICAgdmFyIGFsbEhlYWRlcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCk7CiAgICAgICAgICAgIHZhciByZXQ7CgogICAgICAgICAgICBpZiAocmV0ID0gYWxsSGVhZGVycy5tYXRjaCgvXngtZGVidWctdG9rZW46XFxzKyguKilcJC9pbSkpIHsKICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5wcm9maWxlID0gcmV0WzFdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyZXQgPSBhbGxIZWFkZXJzLm1hdGNoKC9eeC1kZWJ1Zy10b2tlbi1saW5rOlxccysoLiopXCQvaW0pKSB7CiAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQucHJvZmlsZXJVcmwgPSByZXRbMV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJldCA9IGFsbEhlYWRlcnMubWF0Y2goL15TeW1mb255LURlYnVnLVRvb2xiYXItUmVwbGFjZTpcXHMrKC4qKVwkL2ltKSkgewogICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnRvb2xiYXJSZXBsYWNlRmluaXNoZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC50b29sYmFyUmVwbGFjZSA9ICcxJyA9PT0gcmV0WzFdOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHN1Y2Nlc3NTdHJlYWsgPSA0OwogICAgICAgIHZhciBwZW5kaW5nUmVxdWVzdHMgPSAwOwogICAgICAgIHZhciByZW5kZXJBamF4UmVxdWVzdHMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIHJlcXVlc3RDb3VudGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYWpheC1yZXF1ZXN0LWNvdW50ZXInKTsKICAgICAgICAgICAgaWYgKCFyZXF1ZXN0Q291bnRlcikgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlcXVlc3RDb3VudGVyLnRleHRDb250ZW50ID0gcmVxdWVzdFN0YWNrLmxlbmd0aDsKCiAgICAgICAgICAgIHZhciBpbmZvU3BhbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2YtdG9vbGJhci1hamF4LWluZm9cIik7CiAgICAgICAgICAgIGlmIChpbmZvU3BhbikgewogICAgICAgICAgICAgICAgaW5mb1NwYW4udGV4dENvbnRlbnQgPSByZXF1ZXN0U3RhY2subGVuZ3RoICsgJyBBSkFYIHJlcXVlc3QnICsgKHJlcXVlc3RTdGFjay5sZW5ndGggIT09IDEgPyAncycgOiAnJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBhamF4VG9vbGJhclBhbmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYmxvY2stYWpheCcpOwogICAgICAgICAgICBpZiAocmVxdWVzdFN0YWNrLmxlbmd0aCkgewogICAgICAgICAgICAgICAgYWpheFRvb2xiYXJQYW5lbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGFqYXhUb29sYmFyUGFuZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocGVuZGluZ1JlcXVlc3RzID4gMCkgewogICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWpheFRvb2xiYXJQYW5lbCwgJ3NmLWFqYXgtcmVxdWVzdC1sb2FkaW5nJyk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3VjY2Vzc1N0cmVhayA8IDQpIHsKICAgICAgICAgICAgICAgIGFkZENsYXNzKGFqYXhUb29sYmFyUGFuZWwsICdzZi10b29sYmFyLXN0YXR1cy1yZWQnKTsKICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGFqYXhUb29sYmFyUGFuZWwsICdzZi1hamF4LXJlcXVlc3QtbG9hZGluZycpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoYWpheFRvb2xiYXJQYW5lbCwgJ3NmLWFqYXgtcmVxdWVzdC1sb2FkaW5nJyk7CiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhhamF4VG9vbGJhclBhbmVsLCAnc2YtdG9vbGJhci1zdGF0dXMtcmVkJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB2YXIgc3RhcnRBamF4UmVxdWVzdCA9IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgICAgIHZhciB0Ym9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWFqYXgtcmVxdWVzdC1saXN0Jyk7CiAgICAgICAgICAgIGlmICghdGJvZHkpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIG5iT2ZBamF4UmVxdWVzdCA9IHRib2R5LnJvd3MubGVuZ3RoOwogICAgICAgICAgICBpZiAobmJPZkFqYXhSZXF1ZXN0ID49IDEwMCkgewogICAgICAgICAgICAgICAgdGJvZHkuZGVsZXRlUm93KDApOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcmVxdWVzdCA9IHJlcXVlc3RTdGFja1tpbmRleF07CiAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0cysrOwogICAgICAgICAgICB2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTsKICAgICAgICAgICAgcmVxdWVzdC5ET01Ob2RlID0gcm93OwoKICAgICAgICAgICAgdmFyIHJlcXVlc3ROdW1iZXJDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTsKICAgICAgICAgICAgcmVxdWVzdE51bWJlckNlbGwudGV4dENvbnRlbnQgPSBpbmRleCArIDE7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChyZXF1ZXN0TnVtYmVyQ2VsbCk7CgogICAgICAgICAgICB2YXIgcHJvZmlsZXJDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTsKICAgICAgICAgICAgcHJvZmlsZXJDZWxsLnRleHRDb250ZW50ID0gJ24vYSc7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChwcm9maWxlckNlbGwpOwoKICAgICAgICAgICAgdmFyIG1ldGhvZENlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICBtZXRob2RDZWxsLnRleHRDb250ZW50ID0gcmVxdWVzdC5tZXRob2Q7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChtZXRob2RDZWxsKTsKCiAgICAgICAgICAgIHZhciB0eXBlQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7CiAgICAgICAgICAgIHR5cGVDZWxsLnRleHRDb250ZW50ID0gcmVxdWVzdC50eXBlOwogICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQodHlwZUNlbGwpOwoKICAgICAgICAgICAgdmFyIHN0YXR1c0NvZGVDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTsKICAgICAgICAgICAgdmFyIHN0YXR1c0NvZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgICAgIHN0YXR1c0NvZGUudGV4dENvbnRlbnQgPSAnbi9hJzsKICAgICAgICAgICAgc3RhdHVzQ29kZUNlbGwuYXBwZW5kQ2hpbGQoc3RhdHVzQ29kZSk7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChzdGF0dXNDb2RlQ2VsbCk7CgogICAgICAgICAgICB2YXIgcGF0aENlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICBwYXRoQ2VsbC5jbGFzc05hbWUgPSAnc2YtYWpheC1yZXF1ZXN0LXVybCc7CiAgICAgICAgICAgIGlmICgnR0VUJyA9PT0gcmVxdWVzdC5tZXRob2QpIHsKICAgICAgICAgICAgICAgIHZhciBwYXRoTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgICAgIHBhdGhMaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIHJlcXVlc3QudXJsKTsKICAgICAgICAgICAgICAgIHBhdGhMaW5rLnRleHRDb250ZW50ID0gcmVxdWVzdC51cmw7CiAgICAgICAgICAgICAgICBwYXRoQ2VsbC5hcHBlbmRDaGlsZChwYXRoTGluayk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwYXRoQ2VsbC50ZXh0Q29udGVudCA9IHJlcXVlc3QudXJsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhdGhDZWxsLnNldEF0dHJpYnV0ZSgndGl0bGUnLCByZXF1ZXN0LnVybCk7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChwYXRoQ2VsbCk7CgogICAgICAgICAgICB2YXIgZHVyYXRpb25DZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTsKICAgICAgICAgICAgZHVyYXRpb25DZWxsLmNsYXNzTmFtZSA9ICdzZi1hamF4LXJlcXVlc3QtZHVyYXRpb24nOwogICAgICAgICAgICBkdXJhdGlvbkNlbGwudGV4dENvbnRlbnQgPSAnbi9hJzsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGR1cmF0aW9uQ2VsbCk7CgogICAgICAgICAgICByZXF1ZXN0LmxpdmVEdXJhdGlvbkhhbmRsZSA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgZHVyYXRpb25DZWxsLnRleHRDb250ZW50ID0gKG5ldyBEYXRlKCkgLSByZXF1ZXN0LnN0YXJ0KSArICcgbXMnOwogICAgICAgICAgICB9LCAxMDApOwoKICAgICAgICAgICAgcm93LmNsYXNzTmFtZSA9ICdzZi1hamF4LXJlcXVlc3Qgc2YtYWpheC1yZXF1ZXN0LWxvYWRpbmcnOwogICAgICAgICAgICB0Ym9keS5pbnNlcnRCZWZvcmUocm93LCBudWxsKTsKCiAgICAgICAgICAgIHZhciB0b29sYmFySW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWJsb2NrLWFqYXggLnNmLXRvb2xiYXItaW5mbycpOwogICAgICAgICAgICB0b29sYmFySW5mby5zY3JvbGxUb3AgPSB0b29sYmFySW5mby5zY3JvbGxIZWlnaHQ7CgogICAgICAgICAgICByZW5kZXJBamF4UmVxdWVzdHMoKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgZmluaXNoQWpheFJlcXVlc3QgPSBmdW5jdGlvbihpbmRleCkgewogICAgICAgICAgICB2YXIgcmVxdWVzdCA9IHJlcXVlc3RTdGFja1tpbmRleF07CiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocmVxdWVzdC5saXZlRHVyYXRpb25IYW5kbGUpOwoKICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LkRPTU5vZGUpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHJlcXVlc3QudG9vbGJhclJlcGxhY2UgJiYgIXJlcXVlc3QudG9vbGJhclJlcGxhY2VGaW5pc2hlZCAmJiByZXF1ZXN0LnByb2ZpbGUpIHsKICAgICAgICAgICAgICAgIC8qIEZsYWcgYXMgY29tcGxldGUgYmVjYXVzZSBmaW5pc2hBamF4UmVxdWVzdCBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLiAqLwogICAgICAgICAgICAgICAgcmVxdWVzdC50b29sYmFyUmVwbGFjZUZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIC8qIFNlYXJjaCB1cCB0aHJvdWdoIHRoZSBET00gdG8gZmluZCB0aGUgdG9vbGJhcidzIGNvbnRhaW5lciBJRC4gKi8KICAgICAgICAgICAgICAgIGZvciAodmFyIGVsZW0gPSByZXF1ZXN0LkRPTU5vZGU7IGVsZW0gJiYgZWxlbSAhPT0gZG9jdW1lbnQ7IGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pZC5tYXRjaCgvXnNmd2R0LykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgU2Zqcy5sb2FkVG9vbGJhcihlbGVtLmlkLnJlcGxhY2UoL15zZndkdC8sICcnKSwgcmVxdWVzdC5wcm9maWxlKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBwZW5kaW5nUmVxdWVzdHMtLTsKICAgICAgICAgICAgdmFyIHJvdyA9IHJlcXVlc3QuRE9NTm9kZTsKICAgICAgICAgICAgLyogVW5wYWNrIHRoZSBjaGlsZHJlbiBmcm9tIHRoZSByb3cgKi8KICAgICAgICAgICAgdmFyIHByb2ZpbGVyQ2VsbCA9IHJvdy5jaGlsZHJlblsxXTsKICAgICAgICAgICAgdmFyIG1ldGhvZENlbGwgPSByb3cuY2hpbGRyZW5bMl07CiAgICAgICAgICAgIHZhciBzdGF0dXNDb2RlQ2VsbCA9IHJvdy5jaGlsZHJlbls0XTsKICAgICAgICAgICAgdmFyIHN0YXR1c0NvZGVFbGVtID0gc3RhdHVzQ29kZUNlbGwuY2hpbGRyZW5bMF07CiAgICAgICAgICAgIHZhciBkdXJhdGlvbkNlbGwgPSByb3cuY2hpbGRyZW5bNl07CgogICAgICAgICAgICBpZiAocmVxdWVzdC5lcnJvcikgewogICAgICAgICAgICAgICAgcm93LmNsYXNzTmFtZSA9ICdzZi1hamF4LXJlcXVlc3Qgc2YtYWpheC1yZXF1ZXN0LWVycm9yJzsKICAgICAgICAgICAgICAgIG1ldGhvZENlbGwuY2xhc3NOYW1lID0gJ3NmLWFqYXgtcmVxdWVzdC1lcnJvcic7CiAgICAgICAgICAgICAgICBzdWNjZXNzU3RyZWFrID0gMDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJvdy5jbGFzc05hbWUgPSAnc2YtYWpheC1yZXF1ZXN0IHNmLWFqYXgtcmVxdWVzdC1vayc7CiAgICAgICAgICAgICAgICBzdWNjZXNzU3RyZWFrKys7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1c0NvZGUpIHsKICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1c0NvZGUgPCAzMDApIHsKICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlRWxlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3NmLXRvb2xiYXItc3RhdHVzJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzQ29kZSA8IDQwMCkgewogICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVFbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2YtdG9vbGJhci1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMteWVsbG93Jyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVFbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2YtdG9vbGJhci1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMtcmVkJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlRWxlbS50ZXh0Q29udGVudCA9IHJlcXVlc3Quc3RhdHVzQ29kZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVFbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2YtdG9vbGJhci1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMtcmVkJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmR1cmF0aW9uKSB7CiAgICAgICAgICAgICAgICBkdXJhdGlvbkNlbGwudGV4dENvbnRlbnQgPSByZXF1ZXN0LmR1cmF0aW9uICsgJyBtcyc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnByb2ZpbGVyVXJsKSB7CiAgICAgICAgICAgICAgICBwcm9maWxlckNlbGwudGV4dENvbnRlbnQgPSAnJzsKICAgICAgICAgICAgICAgIHZhciBwcm9maWxlckxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICAgICAgICAgICAgICBwcm9maWxlckxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgcmVxdWVzdC5wcm9maWxlclVybCk7CiAgICAgICAgICAgICAgICBwcm9maWxlckxpbmsudGV4dENvbnRlbnQgPSByZXF1ZXN0LnByb2ZpbGU7CiAgICAgICAgICAgICAgICBwcm9maWxlckNlbGwuYXBwZW5kQ2hpbGQocHJvZmlsZXJMaW5rKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmVuZGVyQWpheFJlcXVlc3RzKCk7CiAgICAgICAgfTsKCiAgICAgICAgeyUgaWYgZXhjbHVkZWRfYWpheF9wYXRocyBpcyBkZWZpbmVkICV9CiAgICAgICAgICAgIGlmICh3aW5kb3cuZmV0Y2ggJiYgd2luZG93LmZldGNoLnBvbHlmaWxsID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHZhciBvbGRGZXRjaCA9IHdpbmRvdy5mZXRjaDsKICAgICAgICAgICAgICAgIHdpbmRvdy5mZXRjaCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG9sZEZldGNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IGFyZ3VtZW50c1swXTsKICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzWzFdOwogICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbVR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzWzBdKTsKICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1UeXBlID09PSAnW29iamVjdCBSZXF1ZXN0XScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gYXJndW1lbnRzWzBdLnVybDsKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBhcmd1bWVudHNbMF0ubWV0aG9kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IGFyZ3VtZW50c1swXS5jcmVkZW50aWFscywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGFyZ3VtZW50c1swXS5oZWFkZXJzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogYXJndW1lbnRzWzBdLm1vZGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdDogYXJndW1lbnRzWzBdLnJlZGlyZWN0CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gU3RyaW5nKHVybCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICghdXJsLm1hdGNoKG5ldyBSZWdFeHAoe3sgZXhjbHVkZWRfYWpheF9wYXRoc3xqc29uX2VuY29kZXxyYXcgfX0pKSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gJ0dFVCc7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLm1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBwYXJhbXMubWV0aG9kOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhY2tFbGVtZW50ID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmZXRjaCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbmV3IERhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IHJlcXVlc3RTdGFjay5wdXNoKHN0YWNrRWxlbWVudCkgLSAxOwogICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5kdXJhdGlvbiA9IG5ldyBEYXRlKCkgLSBzdGFja0VsZW1lbnQuc3RhcnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuZXJyb3IgPSByLnN0YXR1cyA8IDIwMCB8fCByLnN0YXR1cyA+PSA0MDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuc3RhdHVzQ29kZSA9IHIuc3RhdHVzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnByb2ZpbGUgPSByLmhlYWRlcnMuZ2V0KCd4LWRlYnVnLXRva2VuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQucHJvZmlsZXJVcmwgPSByLmhlYWRlcnMuZ2V0KCd4LWRlYnVnLXRva2VuLWxpbmsnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC50b29sYmFyUmVwbGFjZUZpbmlzaGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQudG9vbGJhclJlcGxhY2UgPSAnMScgPT09IHIuaGVhZGVycy5nZXQoJ1N5bWZvbnktRGVidWctVG9vbGJhci1SZXBsYWNlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hBamF4UmVxdWVzdChpZHgpOwogICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuZXJyb3IgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoQWpheFJlcXVlc3QoaWR4KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QWpheFJlcXVlc3QoaWR4KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAod2luZG93LlhNTEh0dHBSZXF1ZXN0ICYmIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyKSB7CiAgICAgICAgICAgICAgICB2YXIgcHJveGllZCA9IFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuOwoKICAgICAgICAgICAgICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24obWV0aG9kLCB1cmwsIGFzeW5jLCB1c2VyLCBwYXNzKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgICAgICAgICAgICAgICAvKiBwcmV2ZW50IGxvZ2dpbmcgQUpBWCBjYWxscyB0byBzdGF0aWMgYW5kIGlubGluZSBmaWxlcywgbGlrZSB0ZW1wbGF0ZXMgKi8KICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IHVybDsKICAgICAgICAgICAgICAgICAgICBpZiAodXJsLnNsaWNlKDAsIDEpID09PSAnLycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHVybC5pbmRleE9mKCd7eyByZXF1ZXN0LmJhc2VQYXRofGUoJ2pzJykgfX0nKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHVybC5zbGljZSh7eyByZXF1ZXN0LmJhc2VQYXRofGxlbmd0aCB9fSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoMCA9PT0gdXJsLmluZGV4T2YoJ3t7IChyZXF1ZXN0LnNjaGVtZUFuZEh0dHBIb3N0IH4gcmVxdWVzdC5iYXNlUGF0aCl8ZSgnanMnKSB9fScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSB1cmwuc2xpY2Uoe3sgKHJlcXVlc3Quc2NoZW1lQW5kSHR0cEhvc3QgfiByZXF1ZXN0LmJhc2VQYXRoKXxsZW5ndGggfX0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXRoLm1hdGNoKG5ldyBSZWdFeHAoe3sgZXhjbHVkZWRfYWpheF9wYXRoc3xqc29uX2VuY29kZXxyYXcgfX0pKSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhY2tFbGVtZW50ID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd4aHInLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG5ldyBEYXRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZHggPSByZXF1ZXN0U3RhY2sucHVzaChzdGFja0VsZW1lbnQpIC0gMTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucmVhZHlTdGF0ZSA9PSA0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LmR1cmF0aW9uID0gbmV3IERhdGUoKSAtIHN0YWNrRWxlbWVudC5zdGFydDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuZXJyb3IgPSBzZWxmLnN0YXR1cyA8IDIwMCB8fCBzZWxmLnN0YXR1cyA+PSA0MDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnN0YXR1c0NvZGUgPSBzZWxmLnN0YXR1czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0SGVhZGVycyhzZWxmLCBzdGFja0VsZW1lbnQpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hBamF4UmVxdWVzdChpZHgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7CgogICAgICAgICAgICAgICAgICAgICAgICBzdGFydEFqYXhSZXF1ZXN0KGlkeCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBwcm94aWVkLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIHslIGVuZGlmICV9CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGhhc0NsYXNzOiBoYXNDbGFzcywKCiAgICAgICAgICAgIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcywKCiAgICAgICAgICAgIGFkZENsYXNzOiBhZGRDbGFzcywKCiAgICAgICAgICAgIHRvZ2dsZUNsYXNzOiB0b2dnbGVDbGFzcywKCiAgICAgICAgICAgIGdldFByZWZlcmVuY2U6IGdldFByZWZlcmVuY2UsCgogICAgICAgICAgICBzZXRQcmVmZXJlbmNlOiBzZXRQcmVmZXJlbmNlLAoKICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogYWRkRXZlbnRMaXN0ZW5lciwKCiAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsCgogICAgICAgICAgICByZW5kZXJBamF4UmVxdWVzdHM6IHJlbmRlckFqYXhSZXF1ZXN0cywKCiAgICAgICAgICAgIGdldFNmd2R0OiBmdW5jdGlvbih0b2tlbikgewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNmd2R0KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZndkdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZndkdCcgKyB0b2tlbik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Z3ZHQ7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBsb2FkOiBmdW5jdGlvbihzZWxlY3RvciwgdXJsLCBvblN1Y2Nlc3MsIG9uRXJyb3IsIG9wdGlvbnMpIHsKICAgICAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdG9yKTsKCiAgICAgICAgICAgICAgICBpZiAoZWwgJiYgZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXNmdXJsJykgIT09IHVybCkgewogICAgICAgICAgICAgICAgICAgIHJlcXVlc3QoCiAgICAgICAgICAgICAgICAgICAgICAgIHVybCwKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oeGhyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbm5lckhUTUwgPSB4aHIucmVzcG9uc2VUZXh0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXNmdXJsJywgdXJsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGVsLCAnbG9hZGluZycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBlbmRpbmcgPSBwZW5kaW5nUmVxdWVzdHM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcXVlc3RTdGFjay5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QWpheFJlcXVlc3QoaSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RTdGFja1tpXS5kdXJhdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hBamF4UmVxdWVzdChpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBSZXZlcnQgdGhlIHBlbmRpbmcgc3RhdGUgaW4gY2FzZSB0aGVyZSB3YXMgYSBzdGFydCBjYWxsZWQgd2l0aG91dCBhIGZpbmlzaCBhYm92ZS4gKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0cyA9IHBlbmRpbmc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAob25TdWNjZXNzIHx8IG5vb3ApKHhociwgZWwpOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih4aHIpIHsgKG9uRXJyb3IgfHwgbm9vcCkoeGhyLCBlbCk7IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICcnLAogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNob3dUb29sYmFyOiBmdW5jdGlvbih0b2tlbikgewogICAgICAgICAgICAgICAgdmFyIHNmd2R0ID0gdGhpcy5nZXRTZndkdCh0b2tlbik7CiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhzZndkdCwgJ3NmLWRpc3BsYXktbm9uZScpOwoKICAgICAgICAgICAgICAgIGlmIChnZXRQcmVmZXJlbmNlKCd0b29sYmFyL2Rpc3BsYXlTdGF0ZScpID09ICdub25lJykgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJNYWluQ29udGVudC0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhckNsZWFyZXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZk1pbmlUb29sYmFyLScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJNYWluQ29udGVudC0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJDbGVhcmVyLScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmTWluaVRvb2xiYXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaGlkZVRvb2xiYXI6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICAgICAgICAgICAgICB2YXIgc2Z3ZHQgPSB0aGlzLmdldFNmd2R0KHRva2VuKTsKICAgICAgICAgICAgICAgIGFkZENsYXNzKHNmd2R0LCAnc2YtZGlzcGxheS1ub25lJyk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpbml0VG9vbGJhcjogZnVuY3Rpb24odG9rZW4pIHsKICAgICAgICAgICAgICAgIHRoaXMuc2hvd1Rvb2xiYXIodG9rZW4pOwoKICAgICAgICAgICAgICAgIHZhciBoaWRlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhckhpZGVCdXR0b24tJyArIHRva2VuKTsKICAgICAgICAgICAgICAgIHZhciBoaWRlQnV0dG9uU3ZnID0gaGlkZUJ1dHRvbi5xdWVyeVNlbGVjdG9yKCdzdmcnKTsKICAgICAgICAgICAgICAgIGhpZGVCdXR0b25Tdmcuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7CiAgICAgICAgICAgICAgICBoaWRlQnV0dG9uU3ZnLnNldEF0dHJpYnV0ZSgnZm9jdXNhYmxlJywgJ2ZhbHNlJyk7CiAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGhpZGVCdXR0b24sICdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICAgICAgICAgIHZhciBwID0gdGhpcy5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgIHAuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAocC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIHx8IHAucHJldmlvdXNTaWJsaW5nKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZk1pbmlUb29sYmFyLScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgc2V0UHJlZmVyZW5jZSgndG9vbGJhci9kaXNwbGF5U3RhdGUnLCAnbm9uZScpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgdmFyIHNob3dCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFyTWluaVRvZ2dsZXItJyArIHRva2VuKTsKICAgICAgICAgICAgICAgIHZhciBzaG93QnV0dG9uU3ZnID0gc2hvd0J1dHRvbi5xdWVyeVNlbGVjdG9yKCdzdmcnKTsKICAgICAgICAgICAgICAgIHNob3dCdXR0b25Tdmcuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7CiAgICAgICAgICAgICAgICBzaG93QnV0dG9uU3ZnLnNldEF0dHJpYnV0ZSgnZm9jdXNhYmxlJywgJ2ZhbHNlJyk7CiAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKHNob3dCdXR0b24sICdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICAgICAgICAgIHZhciBlbGVtID0gdGhpcy5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgIGlmIChlbGVtLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJNYWluQ29udGVudC0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJDbGVhcmVyLScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFyTWFpbkNvbnRlbnQtJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhckNsZWFyZXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBzZXRQcmVmZXJlbmNlKCd0b29sYmFyL2Rpc3BsYXlTdGF0ZScsICdibG9jaycpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBsb2FkVG9vbGJhcjogZnVuY3Rpb24odG9rZW4sIG5ld1Rva2VuKSB7CiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgICAgICAgICAgICB2YXIgdHJpZXNDb3VudGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmTG9hZENvdW50ZXItJyArIHRva2VuKTsKCiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgICAgICByZXRyeTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBvblNlbmQ6IGZ1bmN0aW9uIChjb3VudCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPT09IDMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuaW5pdFRvb2xiYXIodG9rZW4pOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJpZXNDb3VudGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmllc0NvdW50ZXIudGV4dENvbnRlbnQgPSBjb3VudDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIHZhciBjYW5jZWxCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZMb2FkQ2FuY2VsLScgKyB0b2tlbik7CiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsQnV0dG9uKSB7CiAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihjYW5jZWxCdXR0b24sICdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zdG9wID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5oaWRlVG9vbGJhcih0b2tlbik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbmV3VG9rZW4gPSAobmV3VG9rZW4gfHwgdG9rZW4pOwoKICAgICAgICAgICAgICAgIHRoaXMubG9hZCgKICAgICAgICAgICAgICAgICAgICAnc2Z3ZHQnICsgdG9rZW4sCiAgICAgICAgICAgICAgICAgICAgJ3t7IHVybChcIl93ZHRcIiwgeyBcInRva2VuXCI6IFwieHh4eHh4XCIgfSl8ZXNjYXBlKCdqcycpIH19Jy5yZXBsYWNlKC94eHh4eHgvLCBuZXdUb2tlbiksCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oeGhyLCBlbCkgewogICAgICAgICAgICAgICAgICAgICAgICAvKiBEbyBub3RoaW5nIGluIHRoZSBlZGdlIGNhc2Ugd2hlcmUgdGhlIHRvb2xiYXIgaGFzIGFscmVhZHkgYmVlbiByZXBsYWNlZCB3aXRoIGEgbmV3IG9uZSAqLwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJNYWluQ29udGVudC0nICsgbmV3VG9rZW4pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIEV2YWx1YXRlIGluIGdsb2JhbCBzY29wZSBzY3JpcHRzIGVtYmVkZGVkIGluc2lkZSB0aGUgdG9vbGJhciAqLwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSwgc2NyaXB0cyA9IFtdLnNsaWNlLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0JykpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjcmlwdHNbaV0uZmlyc3RDaGlsZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2YWwuY2FsbCh7fSwgc2NyaXB0c1tpXS5maXJzdENoaWxkLm5vZGVWYWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAtMSAhPT0geGhyLnJlc3BvbnNlVGV4dC5pbmRleE9mKCdzZi10b29sYmFycmVzZXQnKSA/ICdibG9jaycgOiAnbm9uZSc7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwuc3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5pbml0VG9vbGJhcihuZXdUb2tlbik7CgogICAgICAgICAgICAgICAgICAgICAgICAvKiBIYW5kbGUgdG9vbGJhci1pbmZvIHBvc2l0aW9uICovCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b29sYmFyQmxvY2tzID0gW10uc2xpY2UuY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCcuc2YtdG9vbGJhci1ibG9jaycpKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRvb2xiYXJCbG9ja3MubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXJCbG9ja3NbaV0ub25tb3VzZW92ZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvb2xiYXJJbmZvID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCcuc2YtdG9vbGJhci1pbmZvJylbMF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhZ2VXaWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRXaWR0aCA9IHRvb2xiYXJJbmZvLm9mZnNldFdpZHRoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZWZ0VmFsdWUgPSAoZWxlbWVudFdpZHRoICsgdGhpcy5vZmZzZXRMZWZ0KSAtIHBhZ2VXaWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmlnaHRWYWx1ZSA9IChlbGVtZW50V2lkdGggKyAocGFnZVdpZHRoIC0gdGhpcy5vZmZzZXRMZWZ0KSkgLSBwYWdlV2lkdGg7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJlc2V0IHJpZ2h0IGFuZCBsZWZ0IHZhbHVlLCB1c2VmdWwgb24gd2luZG93IHJlc2l6ZSAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXJJbmZvLnN0eWxlLnJpZ2h0ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhckluZm8uc3R5bGUubGVmdCA9ICcnOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFdpZHRoID4gcGFnZVdpZHRoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXJJbmZvLnN0eWxlLmxlZnQgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChsZWZ0VmFsdWUgPiAwICYmIHJpZ2h0VmFsdWUgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXJJbmZvLnN0eWxlLnJpZ2h0ID0gKHJpZ2h0VmFsdWUgKiAtMSkgKyAncHgnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGVmdFZhbHVlIDwgMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySW5mby5zdHlsZS5sZWZ0ID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySW5mby5zdHlsZS5yaWdodCA9ICcwcHgnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckFqYXhSZXF1ZXN0cygpOwogICAgICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWFqYXgtY2xlYXInKSwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0U3RhY2sgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckFqYXhSZXF1ZXN0cygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc1N0cmVhayA9IDQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1hamF4LXJlcXVlc3QtbGlzdCcpLmlubmVySFRNTCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1ibG9jay1hamF4JyksICdtb3VzZWVudGVyJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWJsb2NrLWFqYXggLnNmLXRvb2xiYXItaW5mbycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5zY3JvbGxUb3AgPSBlbGVtLnNjcm9sbEhlaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYmxvY2stYWpheCA+IC5zZi10b29sYmFyLWljb24nKSwgJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMucGFyZW50Tm9kZSwgJ2hvdmVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR1bXBJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYmxvY2stZHVtcCAuc2YtdG9vbGJhci1pbmZvJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBkdW1wSW5mbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihkdW1wSW5mbywgJ3NmYmVmb3JlZHVtcGNvbGxhcHNlJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1bXBJbmZvLnN0eWxlLm1pbkhlaWdodCA9IGR1bXBJbmZvLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCsncHgnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGR1bXBJbmZvLCAnbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdW1wSW5mby5zdHlsZS5taW5IZWlnaHQgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih4aHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgIT09IDAgJiYgIW9wdGlvbnMuc3RvcCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNmd2R0ID0gdGhhdC5nZXRTZndkdCh0b2tlbik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZndkdC5pbm5lckhUTUwgPSAnXFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhcnJlc2V0XCI+XFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaWNvblwiPjxzdmcgd2lkdGg9XCIyNlwiIGhlaWdodD1cIjI4XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZlcnNpb249XCIxLjFcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMjYgMjhcIiBlbmFibGUtYmFja2dyb3VuZD1cIm5ldyAwIDAgMjYgMjhcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxwYXRoIGZpbGw9XCIjRkZGRkZGXCIgZD1cIk0xMyAwQzUuOCAwIDAgNS44IDAgMTNjMCA3LjIgNS44IDEzIDEzIDEzYzcuMiAwIDEzLTUuOCAxMy0xM0MyNiA1LjggMjAuMiAwIDEzIDB6IE0yMCA3LjUgYy0wLjYgMC0xLTAuMy0xLTAuOWMwLTAuMiAwLTAuNCAwLjItMC42YzAuMS0wLjMgMC4yLTAuMyAwLjItMC40YzAtMC4zLTAuNS0wLjQtMC43LTAuNGMtMiAwLjEtMi41IDIuNy0yLjkgNC44bC0wLjIgMS4xIGMxLjEgMC4yIDEuOSAwIDIuNC0wLjNjMC42LTAuNC0wLjItMC44LTAuMS0xLjNDMTggOS4yIDE4LjQgOSAxOC43IDguOWMwLjUgMCAwLjggMC41IDAuOCAxYzAgMC44LTEuMSAyLTMuMyAxLjkgYy0wLjMgMC0wLjUgMC0wLjctMC4xTDE1IDE0LjFjLTAuNCAxLjctMC45IDQuMS0yLjYgNi4yYy0xLjUgMS44LTMuMSAyLjEtMy44IDIuMWMtMS4zIDAtMi4xLTAuNi0yLjItMS42YzAtMC45IDAuOC0xLjQgMS4zLTEuNCBjMC43IDAgMS4yIDAuNSAxLjIgMS4xYzAgMC41LTAuMiAwLjYtMC40IDAuN2MtMC4xIDAuMS0wLjMgMC4yLTAuMyAwLjRjMCAwLjEgMC4xIDAuMyAwLjQgMC4zYzAuNSAwIDAuOS0wLjMgMS4yLTAuNSBjMS4zLTEgMS43LTIuOSAyLjQtNi4ybDAuMS0wLjhjMC4yLTEuMSAwLjUtMi4zIDAuOC0zLjVjLTAuOS0wLjctMS40LTEuNS0yLjYtMS44Yy0wLjgtMC4yLTEuMyAwLTEuNyAwLjRDOC40IDEwIDguNiAxMC43IDkgMTEuMSBsMC43IDAuN2MwLjggMC45IDEuMyAxLjcgMS4xIDIuN2MtMC4zIDEuNi0yLjEgMi44LTQuMyAyLjFjLTEuOS0wLjYtMi4yLTEuOS0yLTIuN2MwLjItMC42IDAuNy0wLjggMS4yLTAuNiBjMC41IDAuMiAwLjcgMC44IDAuNiAxLjNjMCAwLjEgMCAwLjEtMC4xIDAuM0M2IDE1IDUuOSAxNS4yIDUuOSAxNS4zYy0wLjEgMC40IDAuNCAwLjcgMC44IDAuOGMwLjggMC4zIDEuNy0wLjIgMS45LTAuOSBjMC4yLTAuNi0wLjItMS4xLTAuNC0xLjJsLTAuOC0wLjljLTAuNC0wLjQtMS4yLTEuNS0wLjgtMi44YzAuMi0wLjUgMC41LTEgMC45LTEuNGMxLTAuNyAyLTAuOCAzLTAuNmMxLjMgMC40IDEuOSAxLjIgMi44IDEuOSBjMC41LTEuMyAxLjEtMi42IDItMy44YzAuOS0xIDItMS43IDMuMy0xLjhDMjAgNC44IDIxIDUuNCAyMSA2LjNDMjEgNi43IDIwLjggNy41IDIwIDcuNXpcIi8+PC9zdmc+PC9kaXY+XFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgbG9hZGluZyB0aGUgd2ViIGRlYnVnIHRvb2xiYXIuIDxhIGhyZWY9XCJ7eyB1cmwoXCJfcHJvZmlsZXJfaG9tZVwiKXxlc2NhcGUoJ2pzJykgfX0nICsgbmV3VG9rZW4gKyAnXCI+T3BlbiB0aGUgd2ViIHByb2ZpbGVyLjwvYT5cXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Z3ZHQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdzZi10b29sYmFyIHNmLWVycm9yLXRvb2xiYXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucwogICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oc2VsZWN0b3IsIGVsT24sIGVsT2ZmKSB7CiAgICAgICAgICAgICAgICB2YXIgdG1wID0gZWxPbi5zdHlsZS5kaXNwbGF5LAogICAgICAgICAgICAgICAgICAgIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IpOwoKICAgICAgICAgICAgICAgIGVsT24uc3R5bGUuZGlzcGxheSA9IGVsT2ZmLnN0eWxlLmRpc3BsYXk7CiAgICAgICAgICAgICAgICBlbE9mZi5zdHlsZS5kaXNwbGF5ID0gdG1wOwoKICAgICAgICAgICAgICAgIGlmIChlbCkgewogICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScgPT09IHRtcCA/ICdub25lJyA6ICdibG9jayc7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBjcmVhdGVUYWJzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciB0YWJHcm91cHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2YtdGFiczpub3QoW2RhdGEtcHJvY2Vzc2VkPXRydWVdKScpOwoKICAgICAgICAgICAgICAgIC8qIGNyZWF0ZSB0aGUgdGFiIG5hdmlnYXRpb24gZm9yIGVhY2ggZ3JvdXAgb2YgdGFicyAqLwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWJHcm91cHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdGFicyA9IHRhYkdyb3Vwc1tpXS5xdWVyeVNlbGVjdG9yQWxsKCc6c2NvcGUgPiAudGFiJyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYk5hdmlnYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpOwogICAgICAgICAgICAgICAgICAgIHRhYk5hdmlnYXRpb24uY2xhc3NOYW1lID0gJ3RhYi1uYXZpZ2F0aW9uJzsKCiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkVGFiSWQgPSAndGFiLScgKyBpICsgJy0wJzsgLyogc2VsZWN0IHRoZSBmaXJzdCB0YWIgYnkgZGVmYXVsdCAqLwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGFicy5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFiSWQgPSAndGFiLScgKyBpICsgJy0nICsgajsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYlRpdGxlID0gdGFic1tqXS5xdWVyeVNlbGVjdG9yKCcudGFiLXRpdGxlJykuaW5uZXJIVE1MOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYk5hdmlnYXRpb25JdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGFiTmF2aWdhdGlvbkl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLXRhYi1pZCcsIHRhYklkKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0NsYXNzKHRhYnNbal0sICdhY3RpdmUnKSkgeyBzZWxlY3RlZFRhYklkID0gdGFiSWQ7IH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0NsYXNzKHRhYnNbal0sICdkaXNhYmxlZCcpKSB7IGFkZENsYXNzKHRhYk5hdmlnYXRpb25JdGVtLCAnZGlzYWJsZWQnKTsgfQogICAgICAgICAgICAgICAgICAgICAgICB0YWJOYXZpZ2F0aW9uSXRlbS5pbm5lckhUTUwgPSB0YWJUaXRsZTsKICAgICAgICAgICAgICAgICAgICAgICAgdGFiTmF2aWdhdGlvbi5hcHBlbmRDaGlsZCh0YWJOYXZpZ2F0aW9uSXRlbSk7CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFiQ29udGVudCA9IHRhYnNbal0ucXVlcnlTZWxlY3RvcignLnRhYi1jb250ZW50Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhYkNvbnRlbnQucGFyZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGFiSWQpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdGFiR3JvdXBzW2ldLmluc2VydEJlZm9yZSh0YWJOYXZpZ2F0aW9uLCB0YWJHcm91cHNbaV0uZmlyc3RDaGlsZCk7CiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtdGFiLWlkPVwiJyArIHNlbGVjdGVkVGFiSWQgKyAnXCJdJyksICdhY3RpdmUnKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvKiBkaXNwbGF5IHRoZSBhY3RpdmUgdGFiIGFuZCBhZGQgdGhlICdjbGljaycgZXZlbnQgbGlzdGVuZXJzICovCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFiR3JvdXBzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdGFiTmF2aWdhdGlvbiA9IHRhYkdyb3Vwc1tpXS5xdWVyeVNlbGVjdG9yQWxsKCc6c2NvcGUgPiAudGFiLW5hdmlnYXRpb24gbGknKTsKCiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHRhYk5hdmlnYXRpb24ubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGFiSWQgPSB0YWJOYXZpZ2F0aW9uW2pdLmdldEF0dHJpYnV0ZSgnZGF0YS10YWItaWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFiSWQpLnF1ZXJ5U2VsZWN0b3IoJy50YWItdGl0bGUnKS5jbGFzc05hbWUgPSAnaGlkZGVuJzsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyh0YWJOYXZpZ2F0aW9uW2pdLCAnYWN0aXZlJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYklkKS5jbGFzc05hbWUgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFiSWQpLmNsYXNzTmFtZSA9ICdoaWRkZW4nOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB0YWJOYXZpZ2F0aW9uW2pdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2ZVRhYiA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBuZWVkZWQgYmVjYXVzZSB3aGVuIHRoZSB0YWIgY29udGFpbnMgSFRNTCBjb250ZW50cywgdXNlciBjYW4gY2xpY2sgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG9uIGFueSBvZiB0aG9zZSBlbGVtZW50cyBpbnN0ZWFkIG9mIHRoZWlyIHBhcmVudCAnPGxpPicgZWxlbWVudCAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGFjdGl2ZVRhYi50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdsaScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUYWIgPSBhY3RpdmVUYWIucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBnZXQgdGhlIGZ1bGwgbGlzdCBvZiB0YWJzIHRocm91Z2ggdGhlIHBhcmVudCBvZiB0aGUgYWN0aXZlIHRhYiBlbGVtZW50ICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFiTmF2aWdhdGlvbiA9IGFjdGl2ZVRhYi5wYXJlbnROb2RlLmNoaWxkcmVuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0YWJOYXZpZ2F0aW9uLmxlbmd0aDsgaysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYklkID0gdGFiTmF2aWdhdGlvbltrXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFiLWlkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFiSWQpLmNsYXNzTmFtZSA9ICdoaWRkZW4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRhYk5hdmlnYXRpb25ba10sICdhY3RpdmUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhhY3RpdmVUYWIsICdhY3RpdmUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmVUYWJJZCA9IGFjdGl2ZVRhYi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFiLWlkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhY3RpdmVUYWJJZCkuY2xhc3NOYW1lID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB0YWJHcm91cHNbaV0uc2V0QXR0cmlidXRlKCdkYXRhLXByb2Nlc3NlZCcsICd0cnVlJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBjcmVhdGVUb2dnbGVzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciB0b2dnbGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNmLXRvZ2dsZTpub3QoW2RhdGEtcHJvY2Vzc2VkPXRydWVdKScpOwoKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9nZ2xlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50U2VsZWN0b3IgPSB0b2dnbGVzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS10b2dnbGUtc2VsZWN0b3InKTsKICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudFNlbGVjdG9yKTsKCiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgJ3NmLXRvZ2dsZS1jb250ZW50Jyk7CgogICAgICAgICAgICAgICAgICAgIGlmICh0b2dnbGVzW2ldLmhhc0F0dHJpYnV0ZSgnZGF0YS10b2dnbGUtaW5pdGlhbCcpICYmIHRvZ2dsZXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1pbml0aWFsJykgPT0gJ2Rpc3BsYXknKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHRvZ2dsZXNbaV0sICdzZi10b2dnbGUtb24nKTsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgJ3NmLXRvZ2dsZS12aXNpYmxlJyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3ModG9nZ2xlc1tpXSwgJ3NmLXRvZ2dsZS1vZmYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgJ3NmLXRvZ2dsZS1oaWRkZW4nKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIodG9nZ2xlc1tpXSwgJ2NsaWNrJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJycgIT09IHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBEb24ndCBkbyBhbnl0aGluZyBvbiB0ZXh0IHNlbGVjdGlvbiAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50OwoKICAgICAgICAgICAgICAgICAgICAgICAgLyogbmVlZGVkIGJlY2F1c2Ugd2hlbiB0aGUgdG9nZ2xlIGNvbnRhaW5zIEhUTUwgY29udGVudHMsIHVzZXIgY2FuIGNsaWNrICovCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIG9uIGFueSBvZiB0aG9zZSBlbGVtZW50cyBpbnN0ZWFkIG9mIHRoZWlyIHBhcmVudCAnLnNmLXRvZ2dsZScgZWxlbWVudCAqLwogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIWhhc0NsYXNzKHRvZ2dsZSwgJ3NmLXRvZ2dsZScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUgPSB0b2dnbGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRvZ2dsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLXNlbGVjdG9yJykpOwoKICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModG9nZ2xlLCAnc2YtdG9nZ2xlLW9uJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRvZ2dsZSwgJ3NmLXRvZ2dsZS1vZmYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWxlbWVudCwgJ3NmLXRvZ2dsZS1oaWRkZW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWxlbWVudCwgJ3NmLXRvZ2dsZS12aXNpYmxlJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAvKiB0aGUgdG9nZ2xlIGRvZXNuJ3QgY2hhbmdlIGl0cyBjb250ZW50cyB3aGVuIGNsaWNraW5nIG9uIGl0ICovCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdG9nZ2xlLmhhc0F0dHJpYnV0ZSgnZGF0YS10b2dnbGUtYWx0LWNvbnRlbnQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRvZ2dsZS5oYXNBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLW9yaWdpbmFsLWNvbnRlbnQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlLnNldEF0dHJpYnV0ZSgnZGF0YS10b2dnbGUtb3JpZ2luYWwtY29udGVudCcsIHRvZ2dsZS5pbm5lckhUTUwpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudENvbnRlbnQgPSB0b2dnbGUuaW5uZXJIVE1MOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxDb250ZW50ID0gdG9nZ2xlLmdldEF0dHJpYnV0ZSgnZGF0YS10b2dnbGUtb3JpZ2luYWwtY29udGVudCcpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0Q29udGVudCA9IHRvZ2dsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLWFsdC1jb250ZW50Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZS5pbm5lckhUTUwgPSBjdXJyZW50Q29udGVudCAhPT0gYWx0Q29udGVudCA/IGFsdENvbnRlbnQgOiBvcmlnaW5hbENvbnRlbnQ7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIC8qIFByZXZlbnRzIGZyb20gZGlzYWxsb3dpbmcgY2xpY2tzIG9uIGxpbmtzIGluc2lkZSB0b2dnbGVzICovCiAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZUxpbmtzID0gdG9nZ2xlc1tpXS5xdWVyeVNlbGVjdG9yQWxsKCdhJyk7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2dnbGVMaW5rcy5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKHRvZ2dsZUxpbmtzW2pdLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8qIFByZXZlbnRzIGZyb20gZGlzYWxsb3dpbmcgY2xpY2tzIG9uIFwiY29weSB0byBjbGlwYm9hcmRcIiBlbGVtZW50cyBpbnNpZGUgdG9nZ2xlcyAqLwogICAgICAgICAgICAgICAgICAgIHZhciBjb3B5VG9DbGlwYm9hcmRFbGVtZW50cyA9IHRvZ2dsZXNbaV0ucXVlcnlTZWxlY3RvckFsbCgnc3BhbltkYXRhLWNsaXBib2FyZC10ZXh0XScpOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgY29weVRvQ2xpcGJvYXJkRWxlbWVudHMubGVuZ3RoOyBrKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihjb3B5VG9DbGlwYm9hcmRFbGVtZW50c1trXSwgJ2NsaWNrJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB0b2dnbGVzW2ldLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9jZXNzZWQnLCAndHJ1ZScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaW5pdGlhbGl6ZUxvZ3NUYWJsZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBTZmpzLnVwZGF0ZUxvZ3NUYWJsZSgpOwoKICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5sb2ctZmlsdGVyIGlucHV0JykuZm9yRWFjaCgoaW5wdXQpID0+IHsKICAgICAgICAgICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7IFNmanMudXBkYXRlTG9nc1RhYmxlKCk7IH0pOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZpbHRlci1zZWxlY3QtYWxsLW9yLW5vbmUgYnV0dG9uJykuZm9yRWFjaCgobGluaykgPT4gewogICAgICAgICAgICAgICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdEFsbCA9IGxpbmsuY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3QtYWxsJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsuY2xvc2VzdCgnLmxvZy1maWx0ZXItY29udGVudCcpLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykuZm9yRWFjaCgoaW5wdXQpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSBzZWxlY3RBbGw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgU2Zqcy51cGRhdGVMb2dzVGFibGUoKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdkZXRhaWxzLmxvZy1maWx0ZXInKS5mb3JFYWNoKChmaWx0ZXJFbGVtZW50KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlsdGVyRWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpICYmIGZpbHRlckVsZW1lbnQub3BlbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyRWxlbWVudC5vcGVuID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgdXBkYXRlTG9nc1RhYmxlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVHlwZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsb2ctZmlsdGVyLXR5cGUgaW5wdXQ6Y2hlY2tlZCcpLnZhbHVlOwogICAgICAgICAgICAgICAgY29uc3QgcHJpb3JpdGllcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNsb2ctZmlsdGVyLXByaW9yaXR5IGlucHV0Jyk7CiAgICAgICAgICAgICAgICBjb25zdCBhbGxQcmlvcml0aWVzID0gQXJyYXkuZnJvbShwcmlvcml0aWVzKS5tYXAoKGlucHV0KSA9PiBpbnB1dC52YWx1ZSk7CiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZFByaW9yaXRpZXMgPSBBcnJheS5mcm9tKHByaW9yaXRpZXMpLmZpbHRlcigoaW5wdXQpID0+IGlucHV0LmNoZWNrZWQpLm1hcCgoaW5wdXQpID0+IGlucHV0LnZhbHVlKTsKICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5uZWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2xvZy1maWx0ZXItY2hhbm5lbCBpbnB1dCcpOwogICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRDaGFubmVscyA9IEFycmF5LmZyb20oY2hhbm5lbHMpLmZpbHRlcigoaW5wdXQpID0+IGlucHV0LmNoZWNrZWQpLm1hcCgoaW5wdXQpID0+IGlucHV0LnZhbHVlKTsKCiAgICAgICAgICAgICAgICBjb25zdCBsb2dzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGFibGUubG9ncycpOwogICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IGxvZ3MpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLyogaGlkZSByb3dzIHRoYXQgZG9uJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgZmlsdGVycyAqLwogICAgICAgICAgICAgICAgbGV0IG51bVZpc2libGVSb3dzID0gMDsKICAgICAgICAgICAgICAgIGxvZ3MucXVlcnlTZWxlY3RvckFsbCgndGJvZHkgdHInKS5mb3JFYWNoKChyb3cpID0+IHsKICAgICAgICAgICAgICAgICAgICBpZiAoJ2FsbCcgIT09IHNlbGVjdGVkVHlwZSAmJiBzZWxlY3RlZFR5cGUgIT09IHJvdy5nZXRBdHRyaWJ1dGUoJ2RhdGEtdHlwZScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmlvcml0eSA9IHJvdy5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJpb3JpdHknKTsKICAgICAgICAgICAgICAgICAgICBpZiAoZmFsc2UgPT09IHNlbGVjdGVkUHJpb3JpdGllcy5pbmNsdWRlcyhwcmlvcml0eSkgJiYgdHJ1ZSA9PT0gYWxsUHJpb3JpdGllcy5pbmNsdWRlcyhwcmlvcml0eSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcm93LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICgnJyAhPT0gcm93LmdldEF0dHJpYnV0ZSgnZGF0YS1jaGFubmVsJykgJiYgZmFsc2UgPT09IHNlbGVjdGVkQ2hhbm5lbHMuaW5jbHVkZXMocm93LmdldEF0dHJpYnV0ZSgnZGF0YS1jaGFubmVsJykpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICByb3cuc3R5bGUuZGlzcGxheSA9ICd0YWJsZS1yb3cnOwogICAgICAgICAgICAgICAgICAgIG51bVZpc2libGVSb3dzKys7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd0YWJsZS5sb2dzJykuc3R5bGUuZGlzcGxheSA9IDAgPT09IG51bVZpc2libGVSb3dzID8gJ25vbmUnIDogJ3RhYmxlJzsKICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uby1sb2dzLW1lc3NhZ2UnKS5zdHlsZS5kaXNwbGF5ID0gMCA9PT0gbnVtVmlzaWJsZVJvd3MgPyAnYmxvY2snIDogJ25vbmUnOwoKICAgICAgICAgICAgICAgIC8qIHVwZGF0ZSB0aGUgc2VsZWN0ZWQgdG90YWxzIG9mIGFsbCBmaWx0ZXJzICovCiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG9nLWZpbHRlci1wcmlvcml0eSAuZmlsdGVyLWFjdGl2ZS1udW0nKS5pbm5lclRleHQgPSAocHJpb3JpdGllcy5sZW5ndGggPT09IHNlbGVjdGVkUHJpb3JpdGllcy5sZW5ndGgpID8gJ0FsbCcgOiBzZWxlY3RlZFByaW9yaXRpZXMubGVuZ3RoOwogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xvZy1maWx0ZXItY2hhbm5lbCAuZmlsdGVyLWFjdGl2ZS1udW0nKS5pbm5lclRleHQgPSAoY2hhbm5lbHMubGVuZ3RoID09PSBzZWxlY3RlZENoYW5uZWxzLmxlbmd0aCkgPyAnQWxsJyA6IHNlbGVjdGVkQ2hhbm5lbHMubGVuZ3RoOwoKICAgICAgICAgICAgICAgIC8qIHVwZGF0ZSB0aGUgY3VycmVudGx5IHNlbGVjdGVkIFwibG9nIHR5cGVcIiB0YWIgKi8KICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNsb2ctZmlsdGVyLXR5cGUgbGknKS5mb3JFYWNoKCh0YWIpID0+IHRhYi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKSk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjbG9nLWZpbHRlci10eXBlIGlucHV0W3ZhbHVlPVwiXCR7c2VsZWN0ZWRUeXBlfVwiXWApLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7CiAgICAgICAgICAgIH0sCiAgICAgICAgfTsKICAgIH0pKCk7CgogICAgU2Zqcy5hZGRFdmVudExpc3RlbmVyKGRvY3VtZW50LCAnRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgIFNmanMuY3JlYXRlVGFicygpOwogICAgICAgIFNmanMuY3JlYXRlVG9nZ2xlcygpOwogICAgfSk7Cn0KLypdXT4qLzwvc2NyaXB0PgoiLCAiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2Jhc2VfanMuaHRtbC50d2lnIiwgIi9Vc2Vycy9tYW5ueS9Eb2N1bWVudHMvUHJvZ3JhbW1hdGlvbi9NREwgTUFOTlkvTWFpc29uRGVzTGlndWVzL3ZlbmRvci9zeW1mb255L3dlYi1wcm9maWxlci1idW5kbGUvUmVzb3VyY2VzL3ZpZXdzL1Byb2ZpbGVyL2Jhc2VfanMuaHRtbC50d2lnIik7CiAgICB9Cn0KIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjE6e3M6NDg6IlxfX1R3aWdUZW1wbGF0ZV9lNjg5MWU1Yjc2YWU0MGYxMGQ2MjRhYWIwNTI4Yzk4YyI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18iOjE0OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo0ODoiXF9fVHdpZ1RlbXBsYXRlX2U2ODkxZTViNzZhZTQwZjEwZDYyNGFhYjA1MjhjOThjIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6NDc6Il9fVHdpZ1RlbXBsYXRlX2U2ODkxZTViNzZhZTQwZjEwZDYyNGFhYjA1MjhjOThjIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGRvY0Jsb2NrIjtOO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwByZWFkT25seSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBwYXJlbnQiO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoxNDoiXFR3aWdcVGVtcGxhdGUiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo4OiJUZW1wbGF0ZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBpbXBsZW1lbnRzIjthOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AY29uc3RhbnRzIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcHJvcGVydGllcyI7YToyOntzOjU3OiJcX19Ud2lnVGVtcGxhdGVfZTY4OTFlNWI3NmFlNDBmMTBkNjI0YWFiMDUyOGM5OGM6OiRzb3VyY2UiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkiOjExOntzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjU3OiJcX19Ud2lnVGVtcGxhdGVfZTY4OTFlNWI3NmFlNDBmMTBkNjI0YWFiMDUyOGM5OGM6OiRzb3VyY2UiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo2OiJzb3VyY2UiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBkb2NCbG9jayI7TjtzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlcyI7YTowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZGVmYXVsdCI7TjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBzdGF0aWMiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjE5O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxOTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlIjtOO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHJlYWRPbmx5IjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAbWV0YWRhdGEiO2E6MDp7fX1zOjU3OiJcX19Ud2lnVGVtcGxhdGVfZTY4OTFlNWI3NmFlNDBmMTBkNjI0YWFiMDUyOGM5OGM6OiRtYWNyb3MiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkiOjExOntzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjU3OiJcX19Ud2lnVGVtcGxhdGVfZTY4OTFlNWI3NmFlNDBmMTBkNjI0YWFiMDUyOGM5OGM6OiRtYWNyb3MiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo2OiJtYWNyb3MiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBkb2NCbG9jayI7TjtzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlcyI7YTowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZGVmYXVsdCI7czoyOiJbXSI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAc3RhdGljIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyMDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZSI7TjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQByZWFkT25seSI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AG1ldGFkYXRhIjthOjA6e319fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRob2RzIjthOjY6e3M6NjM6IlxfX1R3aWdUZW1wbGF0ZV9lNjg5MWU1Yjc2YWU0MGYxMGQ2MjRhYWIwNTI4Yzk4Yzo6X19jb25zdHJ1Y3QoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjM6IlxfX1R3aWdUZW1wbGF0ZV9lNjg5MWU1Yjc2YWU0MGYxMGQ2MjRhYWIwNTI4Yzk4Yzo6X19jb25zdHJ1Y3QoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJfX2NvbnN0cnVjdCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czozOiJlbnYiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoxNzoiXFR3aWdcRW52aXJvbm1lbnQiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiRW52aXJvbm1lbnQiO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6NTU3O31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjMyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjc3MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX1zOjYxOiJcX19Ud2lnVGVtcGxhdGVfZTY4OTFlNWI3NmFlNDBmMTBkNjI0YWFiMDUyOGM5OGM6OmRvRGlzcGxheSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2MToiXF9fVHdpZ1RlbXBsYXRlX2U2ODkxZTViNzZhZTQwZjEwZDYyNGFhYjA1MjhjOThjOjpkb0Rpc3BsYXkoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjk6ImRvRGlzcGxheSI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6OToicHJvdGVjdGVkIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToyOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo3OiJjb250ZXh0IjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo2OiJibG9ja3MiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozNDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTo3Nzc7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6OTYwO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjQ3NjAyO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9fXM6Njc6IlxfX1R3aWdUZW1wbGF0ZV9lNjg5MWU1Yjc2YWU0MGYxMGQ2MjRhYWIwNTI4Yzk4Yzo6Z2V0VGVtcGxhdGVOYW1lKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2siOjc6e3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAc3VtbWFyeSI7czowOiIiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6MTp7aTowO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEdlbmVyaWMiOjI6e3M6NzoiACoAbmFtZSI7czoxODoiY29kZUNvdmVyYWdlSWdub3JlIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tjt9fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQiOjI6e3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2UiO3M6MDoiIjtzOjU2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlQWxpYXNlcyI7YTowOnt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6Njc6IlxfX1R3aWdUZW1wbGF0ZV9lNjg5MWU1Yjc2YWU0MGYxMGQ2MjRhYWIwNTI4Yzk4Yzo6Z2V0VGVtcGxhdGVOYW1lKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNToiZ2V0VGVtcGxhdGVOYW1lIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjk2NTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTo0NzY1Mjt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo5Njg7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6NDc3NTQ7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAG1ldGFkYXRhIjthOjA6e319czo2MzoiXF9fVHdpZ1RlbXBsYXRlX2U2ODkxZTViNzZhZTQwZjEwZDYyNGFhYjA1MjhjOThjOjppc1RyYWl0YWJsZSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MDoiIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjE6e2k6MDtPOjQ2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xHZW5lcmljIjoyOntzOjc6IgAqAG5hbWUiO3M6MTg6ImNvZGVDb3ZlcmFnZUlnbm9yZSI7czoxNDoiACoAZGVzY3JpcHRpb24iO047fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjA6IiI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjYzOiJcX19Ud2lnVGVtcGxhdGVfZTY4OTFlNWI3NmFlNDBmMTBkNjI0YWFiMDUyOGM5OGM6OmlzVHJhaXRhYmxlKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiaXNUcmFpdGFibGUiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6OTczO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjQ3ODA0O31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjk3NjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTo0Nzg2Njt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX1zOjY0OiJcX19Ud2lnVGVtcGxhdGVfZTY4OTFlNWI3NmFlNDBmMTBkNjI0YWFiMDUyOGM5OGM6OmdldERlYnVnSW5mbygpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MDoiIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjE6e2k6MDtPOjQ2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xHZW5lcmljIjoyOntzOjc6IgAqAG5hbWUiO3M6MTg6ImNvZGVDb3ZlcmFnZUlnbm9yZSI7czoxNDoiACoAZGVzY3JpcHRpb24iO047fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjA6IiI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcX19Ud2lnVGVtcGxhdGVfZTY4OTFlNWI3NmFlNDBmMTBkNjI0YWFiMDUyOGM5OGM6OmdldERlYnVnSW5mbygpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTI6ImdldERlYnVnSW5mbyI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo5ODE7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6NDc5MTY7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6OTg0O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjQ4MTQ1O31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9fXM6Njg6IlxfX1R3aWdUZW1wbGF0ZV9lNjg5MWU1Yjc2YWU0MGYxMGQ2MjRhYWIwNTI4Yzk4Yzo6Z2V0U291cmNlQ29udGV4dCgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2ODoiXF9fVHdpZ1RlbXBsYXRlX2U2ODkxZTViNzZhZTQwZjEwZDYyNGFhYjA1MjhjOThjOjpnZXRTb3VyY2VDb250ZXh0KCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNjoiZ2V0U291cmNlQ29udGV4dCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo5ODY7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6NDgxNTI7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTg2NTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTo5MDMxNzt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX19czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHVzZWRUcmFpdHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTc7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxODY2O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRhZGF0YSI7YTowOnt9fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";